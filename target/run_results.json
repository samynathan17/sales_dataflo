{"logs": [], "results": [{"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Contact_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CONTACT WHERE Contact_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}  \r\n       \r\n  select distinct\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Contact_ID,\r\n        ID as Source_ID,\r\n        IS_DELETED,\r\n        MASTER_RECORD_ID,\r\n        ACCOUNT_ID,\r\n        LAST_NAME,\r\n        FIRST_NAME,\r\n        SALUTATION,\r\n        NAME,\r\n        OTHER_STREET,\r\n        OTHER_CITY,\r\n        OTHER_STATE,\r\n        OTHER_POSTAL_CODE,\r\n        OTHER_COUNTRY,\r\n        MAILING_STREET,\r\n        MAILING_CITY,\r\n        MAILING_STATE,\r\n        MAILING_POSTAL_CODE,\r\n        MAILING_COUNTRY,\r\n        PHONE,\r\n        FAX,\r\n        MOBILE_PHONE,\r\n        HOME_PHONE,\r\n        OTHER_PHONE,\r\n        ASSISTANT_PHONE,\r\n        REPORTS_TO_ID,\r\n        EMAIL,\r\n        TITLE,\r\n        DEPARTMENT,\r\n        ASSISTANT_NAME,\r\n        LEAD_SOURCE,\r\n        BIRTHDATE,\r\n        DESCRIPTION,\r\n        OWNER_ID,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        EMAIL_BOUNCED_REASON,\r\n        EMAIL_BOUNCED_DATE,\r\n        IS_EMAIL_BOUNCED,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Contact\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n   {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as Contact_ID,\r\n        null as  Source_ID,\r\n        null as IS_DELETED,\r\n        null as MASTER_RECORD_ID,\r\n        null as ACCOUNT_ID,\r\n        null as LAST_NAME,\r\n        null as FIRST_NAME,\r\n        null as SALUTATION,\r\n        null as NAME,\r\n        null as OTHER_STREET,\r\n        null as OTHER_CITY,\r\n        null as OTHER_STATE,\r\n        null as OTHER_POSTAL_CODE,\r\n        null as OTHER_COUNTRY,\r\n        null as MAILING_STREET,\r\n        null as MAILING_CITY,\r\n        null as MAILING_STATE,\r\n        null as MAILING_POSTAL_CODE,\r\n        null as MAILING_COUNTRY,\r\n        null as PHONE,\r\n        null as FAX,\r\n        null as MOBILE_PHONE,\r\n        null as HOME_PHONE,\r\n        null as OTHER_PHONE,\r\n        null as ASSISTANT_PHONE,\r\n        null as REPORTS_TO_ID,\r\n        null as EMAIL,\r\n        null as TITLE,\r\n        null as DEPARTMENT,\r\n        null as ASSISTANT_NAME,\r\n        null as LEAD_SOURCE,\r\n        null as BIRTHDATE,\r\n        null as DESCRIPTION,\r\n        null as OWNER_ID,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as EMAIL_BOUNCED_REASON,\r\n        null as EMAIL_BOUNCED_DATE,\r\n        null as IS_EMAIL_BOUNCED,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3  \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Contact"], "unique_id": "model.sales_dataflo.Stg_Contact", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Contact.sql", "original_file_path": "ETL/Stage/SF/Stg_Contact.sql", "name": "Stg_Contact", "resource_type": "model", "alias": "Stg_Contact", "checksum": {"name": "sha256", "checksum": "c86ed2ae8d800fd7cf2217c82a09c9d96564fb455d6a601cbdc5b5898212c9d1"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CONTACT WHERE Contact_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Contact_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Contact.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n       \n  select distinct\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Contact_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        ACCOUNT_ID,\n        LAST_NAME,\n        FIRST_NAME,\n        SALUTATION,\n        NAME,\n        OTHER_STREET,\n        OTHER_CITY,\n        OTHER_STATE,\n        OTHER_POSTAL_CODE,\n        OTHER_COUNTRY,\n        MAILING_STREET,\n        MAILING_CITY,\n        MAILING_STATE,\n        MAILING_POSTAL_CODE,\n        MAILING_COUNTRY,\n        PHONE,\n        FAX,\n        MOBILE_PHONE,\n        HOME_PHONE,\n        OTHER_PHONE,\n        ASSISTANT_PHONE,\n        REPORTS_TO_ID,\n        EMAIL,\n        TITLE,\n        DEPARTMENT,\n        ASSISTANT_NAME,\n        LEAD_SOURCE,\n        BIRTHDATE,\n        DESCRIPTION,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        EMAIL_BOUNCED_REASON,\n        EMAIL_BOUNCED_DATE,\n        IS_EMAIL_BOUNCED,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Contact\n          \n   \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n       \n  select distinct\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Contact_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        ACCOUNT_ID,\n        LAST_NAME,\n        FIRST_NAME,\n        SALUTATION,\n        NAME,\n        OTHER_STREET,\n        OTHER_CITY,\n        OTHER_STATE,\n        OTHER_POSTAL_CODE,\n        OTHER_COUNTRY,\n        MAILING_STREET,\n        MAILING_CITY,\n        MAILING_STATE,\n        MAILING_POSTAL_CODE,\n        MAILING_COUNTRY,\n        PHONE,\n        FAX,\n        MOBILE_PHONE,\n        HOME_PHONE,\n        OTHER_PHONE,\n        ASSISTANT_PHONE,\n        REPORTS_TO_ID,\n        EMAIL,\n        TITLE,\n        DEPARTMENT,\n        ASSISTANT_NAME,\n        LEAD_SOURCE,\n        BIRTHDATE,\n        DESCRIPTION,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        EMAIL_BOUNCED_REASON,\n        EMAIL_BOUNCED_DATE,\n        IS_EMAIL_BOUNCED,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Contact\n          \n   \n"}, "error": null, "status": "SUCCESS 919360", "execution_time": 20.616438388824463, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:51:18.381497Z", "completed_at": "2021-05-19T00:51:19.659711Z"}, {"name": "execute", "started_at": "2021-05-19T00:51:19.660099Z", "completed_at": "2021-05-19T00:51:38.572290Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema') ~ \".\" ~ var('V_Sales')~\" e left outer join INFORMATION_SCHEMA.COLUMNS a on e.ENTITY_DATASORUCE_NAME = a.TABLE_SCHEMA and column_name = 'CURRENCY_ISO_CODE' and TABLE_NAME ='OPPORTUNITY' where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME ||'#'|| DATASOURCE_TYPE ||'#'|| nvl(COLUMN_NAME,'NA') ||'#'||REPORTING_CURRENCY\") %}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'opportunity_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_OPPORTUNITY WHERE opportunity_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set entity_name, entity_typ, col, REPORTING_CURRENCY = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n{% if  entity_typ == 'SF'  %}    \r\n  \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS opportunity_id,\r\n        ID as Source_ID,\r\n        IS_DELETED,\r\n        ACCOUNT_ID,\r\n        NAME,\r\n        DESCRIPTION,\r\n        STAGE_NAME,\r\n        AMOUNT,\r\n        CLOSE_DATE,\r\n        TYPE,\r\n        NEXT_STEP,\r\n        LEAD_SOURCE,\r\n        IS_CLOSED,\r\n        IS_WON,\r\n        {% if  col == 'NA'  %} 'USD' {% else %} CURRENCY_ISO_CODE {% endif %} as CURRENCY_ISO_CODE,\r\n        '{{ REPORTING_CURRENCY }}' as REPORTING_CURRENCY,\r\n        FORECAST_CATEGORY,\r\n        FORECAST_CATEGORY_NAME,\r\n        HAS_OPPORTUNITY_LINE_ITEM,\r\n        OWNER_ID,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        SYSTEM_MODSTAMP,\r\n        LAST_ACTIVITY_DATE,\r\n        FISCAL_QUARTER,\r\n        FISCAL_YEAR,\r\n        FISCAL,\r\n        LAST_VIEWED_DATE,\r\n        LAST_REFERENCED_DATE,\r\n        HAS_OPEN_ACTIVITY,\r\n        HAS_OVERDUE_TASK,\r\n        CONTACT_ID,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ entity_name }}' as Source_type,\r\n        'D_OPPORTUNITY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ entity_name }}.opportunity\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as opportunity_id,\r\n        null as  Source_ID,\r\n        null as IS_DELETED,\r\n        null as ACCOUNT_ID,\r\n        null as NAME,\r\n        null as DESCRIPTION,\r\n        null as STAGE_NAME,\r\n        null as AMOUNT,\r\n        null as CLOSE_DATE,\r\n        null as TYPE,\r\n        null as NEXT_STEP,\r\n        null as LEAD_SOURCE,\r\n        null as IS_CLOSED,\r\n        null as IS_WON,\r\n        null as CURRENCY_ISO_CODE,\r\n        null as REPORTING_CURRENCY,\r\n        null as FORECAST_CATEGORY,\r\n        null as FORECAST_CATEGORY_NAME,\r\n        null as HAS_OPPORTUNITY_LINE_ITEM,\r\n        null as OWNER_ID,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as SYSTEM_MODSTAMP,\r\n        null as LAST_ACTIVITY_DATE,\r\n        null as FISCAL_QUARTER,\r\n        null as FISCAL_YEAR,\r\n        null as FISCAL,\r\n        null as LAST_VIEWED_DATE,\r\n        null as LAST_REFERENCED_DATE,\r\n        null as HAS_OPEN_ACTIVITY,\r\n        null as HAS_OVERDUE_TASK,\r\n        null as CONTACT_ID,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3    \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Opportunity"], "unique_id": "model.sales_dataflo.Stg_Opportunity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Opportunity.sql", "original_file_path": "ETL/Stage/SF/Stg_Opportunity.sql", "name": "Stg_Opportunity", "resource_type": "model", "alias": "Stg_Opportunity", "checksum": {"name": "sha256", "checksum": "3324b0eabb99a6e8517f280a82eae532af7953606d152df5cca6313fad9a4e19"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_OPPORTUNITY WHERE opportunity_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "opportunity_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Opportunity.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS opportunity_id,\n        ID as Source_ID,\n        IS_DELETED,\n        ACCOUNT_ID,\n        NAME,\n        DESCRIPTION,\n        STAGE_NAME,\n        AMOUNT,\n        CLOSE_DATE,\n        TYPE,\n        NEXT_STEP,\n        LEAD_SOURCE,\n        IS_CLOSED,\n        IS_WON,\n         CURRENCY_ISO_CODE  as CURRENCY_ISO_CODE,\n        'USD' as REPORTING_CURRENCY,\n        FORECAST_CATEGORY,\n        FORECAST_CATEGORY_NAME,\n        HAS_OPPORTUNITY_LINE_ITEM,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        FISCAL_QUARTER,\n        FISCAL_YEAR,\n        FISCAL,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        HAS_OPEN_ACTIVITY,\n        HAS_OVERDUE_TASK,\n        CONTACT_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.opportunity\n          \n \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS opportunity_id,\n        ID as Source_ID,\n        IS_DELETED,\n        ACCOUNT_ID,\n        NAME,\n        DESCRIPTION,\n        STAGE_NAME,\n        AMOUNT,\n        CLOSE_DATE,\n        TYPE,\n        NEXT_STEP,\n        LEAD_SOURCE,\n        IS_CLOSED,\n        IS_WON,\n         CURRENCY_ISO_CODE  as CURRENCY_ISO_CODE,\n        'USD' as REPORTING_CURRENCY,\n        FORECAST_CATEGORY,\n        FORECAST_CATEGORY_NAME,\n        HAS_OPPORTUNITY_LINE_ITEM,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        FISCAL_QUARTER,\n        FISCAL_YEAR,\n        FISCAL,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        HAS_OPEN_ACTIVITY,\n        HAS_OVERDUE_TASK,\n        CONTACT_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.opportunity\n          \n \n"}, "error": null, "status": "SUCCESS 39392", "execution_time": 8.590128421783447, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:51:39.000537Z", "completed_at": "2021-05-19T00:51:42.183498Z"}, {"name": "execute", "started_at": "2021-05-19T00:51:42.183807Z", "completed_at": "2021-05-19T00:51:47.165437Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nwith source as \r\n(\r\n\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2015', 'dd/mm/yyyy')\",\r\n        end_date=\"dateadd(week, 53, current_date)\"\r\n       )\r\n    }}\r\n) ,Dim_Calendar as(\r\nselect\r\n      d.date_day AS Calendar_ID,\r\n      d.date_day as cldr_date,\r\n      cast({{ dbt_utils.date_trunc('month',  'd.date_day')}} as date) as cldr_mnth_strt_dt,    \r\n       cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as cldr_mnth_end_dt,\r\n        cast({{ dbt_utils.date_trunc('quarter', 'd.date_day')}} as date) as cldr_qtr_strt_dt,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as cldr_qtr_end_dt,\r\n        cast({{ dbt_utils.date_trunc('year', 'd.date_day')}} as date) as cldr_year_start_dt,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as cldr_year_end_dt,\r\n        cast({{ dbt_utils.date_trunc('week', 'd.date_day')}} as date) as week_start_date,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'week') }} as date) as week_end_date,\r\n        {{ dbt_date.day_name('d.date_day', short=true) }} as day_short_name,\r\n      {{ dbt_date.month_name('d.date_day', short=true) }} as month_short_name,\r\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\r\n        cast({{ dbt_date.date_part('day', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_day_num,\r\n        cast({{ dbt_date.date_part('week', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_week_num,\r\n        'Q' || cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_qtr,\r\n        cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year,\r\n        cast(\r\n            case\r\n                when {{ dbt_date.date_part('dayofweek', 'd.date_day') }} = 0 then 7\r\n                else {{ dbt_date.date_part('dayofweek',  'd.date_day')  }}\r\n            end as {{ dbt_utils.type_int() }}\r\n            ) as day_of_week,\r\n        case\r\n            when {{ dbt_date.date_part('dayofweek',  'd.date_day') }} = 0 then 'Y'\r\n            else 'N'\r\n        end as weekend_flag,   \r\n      {{ dbt_utils.current_timestamp() }} as DW_INS_UPD_DTS,\r\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\r\nfrom\r\n    source  d\r\norder by 2)\r\n\r\nselect * from Dim_Calendar", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Calendar"], "unique_id": "model.sales_dataflo.Dim_Calendar", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Calendar.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Calendar.sql", "name": "Dim_Calendar", "resource_type": "model", "alias": "Dim_Calendar", "checksum": {"name": "sha256", "checksum": "f5867ae005a67b370c397692933a1babe42f67c761cc94c9dd84439c8b1c28db"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day", "macro.dbt_date.day_name", "macro.dbt_date.month_name", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Calendar.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith source as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2700\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2015', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,Dim_Calendar as(\nselect\n      d.date_day AS Calendar_ID,\n      d.date_day as cldr_date,\n      cast(\n    date_trunc('month', d.date_day)\n as date) as cldr_mnth_strt_dt,    \n       cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        month,\n        1,\n        \n    date_trunc('month', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_mnth_end_dt,\n        cast(\n    date_trunc('quarter', d.date_day)\n as date) as cldr_qtr_strt_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        quarter,\n        1,\n        \n    date_trunc('quarter', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_qtr_end_dt,\n        cast(\n    date_trunc('year', d.date_day)\n as date) as cldr_year_start_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        year,\n        1,\n        \n    date_trunc('year', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_year_end_dt,\n        cast(\n    date_trunc('week', d.date_day)\n as date) as week_start_date,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        week,\n        1,\n        \n    date_trunc('week', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as week_end_date,\n        to_char(d.date_day, 'Dy') as day_short_name,\n      to_char(d.date_day, 'MON') as month_short_name,\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\n        cast(date_part('day', d.date_day) as \n    int\n) as cldr_day_num,\n        cast(date_part('week', d.date_day) as \n    int\n) as cldr_week_num,\n        'Q' || cast(date_part('quarter', d.date_day) as \n    int\n) as cldr_qtr,\n        cast(date_part('year', d.date_day) as \n    int\n) as year,\n        cast(\n            case\n                when date_part('dayofweek', d.date_day) = 0 then 7\n                else date_part('dayofweek', d.date_day)\n            end as \n    int\n\n            ) as day_of_week,\n        case\n            when date_part('dayofweek', d.date_day) = 0 then 'Y'\n            else 'N'\n        end as weekend_flag,   \n      \n    current_timestamp::\n    timestamp_ntz\n\n as DW_INS_UPD_DTS,\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\nfrom\n    source  d\norder by 2)\n\nselect * from Dim_Calendar", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith source as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2700\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2015', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,Dim_Calendar as(\nselect\n      d.date_day AS Calendar_ID,\n      d.date_day as cldr_date,\n      cast(\n    date_trunc('month', d.date_day)\n as date) as cldr_mnth_strt_dt,    \n       cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        month,\n        1,\n        \n    date_trunc('month', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_mnth_end_dt,\n        cast(\n    date_trunc('quarter', d.date_day)\n as date) as cldr_qtr_strt_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        quarter,\n        1,\n        \n    date_trunc('quarter', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_qtr_end_dt,\n        cast(\n    date_trunc('year', d.date_day)\n as date) as cldr_year_start_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        year,\n        1,\n        \n    date_trunc('year', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_year_end_dt,\n        cast(\n    date_trunc('week', d.date_day)\n as date) as week_start_date,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        week,\n        1,\n        \n    date_trunc('week', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as week_end_date,\n        to_char(d.date_day, 'Dy') as day_short_name,\n      to_char(d.date_day, 'MON') as month_short_name,\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\n        cast(date_part('day', d.date_day) as \n    int\n) as cldr_day_num,\n        cast(date_part('week', d.date_day) as \n    int\n) as cldr_week_num,\n        'Q' || cast(date_part('quarter', d.date_day) as \n    int\n) as cldr_qtr,\n        cast(date_part('year', d.date_day) as \n    int\n) as year,\n        cast(\n            case\n                when date_part('dayofweek', d.date_day) = 0 then 7\n                else date_part('dayofweek', d.date_day)\n            end as \n    int\n\n            ) as day_of_week,\n        case\n            when date_part('dayofweek', d.date_day) = 0 then 'Y'\n            else 'N'\n        end as weekend_flag,   \n      \n    current_timestamp::\n    timestamp_ntz\n\n as DW_INS_UPD_DTS,\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\nfrom\n    source  d\norder by 2)\n\nselect * from Dim_Calendar"}, "error": null, "status": "SUCCESS 1", "execution_time": 4.048624753952026, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:51:47.593388Z", "completed_at": "2021-05-19T00:51:49.286417Z"}, {"name": "execute", "started_at": "2021-05-19T00:51:49.286730Z", "completed_at": "2021-05-19T00:51:51.216451Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Stage_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_OPPORTUNITY_STAGE WHERE Stage_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}   \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Stage_id,\r\n        ID as Source_ID,\r\n        MASTER_LABEL,\r\n        API_NAME,\r\n        IS_ACTIVE,\r\n        SORT_ORDER,\r\n        IS_CLOSED,\r\n        IS_WON,\r\n        FORECAST_CATEGORY,\r\n        FORECAST_CATEGORY_NAME,\r\n        DEFAULT_PROBABILITY,\r\n        DESCRIPTION,\r\n        CREATED_BY_ID,\r\n        CREATED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_OPPORTUNITYSTAGES_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.opportunity_stage \r\n           {% if not loop.last %}\r\n            UNION ALL\r\n           {% endif %}  \r\n{% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as Stage_id,\r\n        null as  Source_ID,\r\n        null as MASTER_LABEL,\r\n        null as API_NAME,\r\n        null as IS_ACTIVE,\r\n        null as SORT_ORDER,\r\n        null as IS_CLOSED,\r\n        null as IS_WON,\r\n        null as FORECAST_CATEGORY,\r\n        null as FORECAST_CATEGORY_NAME,\r\n        null as DEFAULT_PROBABILITY,\r\n        null as DESCRIPTION,\r\n        null as CREATED_BY_ID,\r\n        null as CREATED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3    \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Opportunity_Stage"], "unique_id": "model.sales_dataflo.Stg_Opportunity_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Opportunity_Stage.sql", "original_file_path": "ETL/Stage/SF/Stg_Opportunity_Stage.sql", "name": "Stg_Opportunity_Stage", "resource_type": "model", "alias": "Stg_Opportunity_Stage", "checksum": {"name": "sha256", "checksum": "6703c73121d13b2473211010f93069c563a84bab5da866a469cfc0b029a23230"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_OPPORTUNITY_STAGE WHERE Stage_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Stage_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Opportunity_Stage.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Stage_id,\n        ID as Source_ID,\n        MASTER_LABEL,\n        API_NAME,\n        IS_ACTIVE,\n        SORT_ORDER,\n        IS_CLOSED,\n        IS_WON,\n        FORECAST_CATEGORY,\n        FORECAST_CATEGORY_NAME,\n        DEFAULT_PROBABILITY,\n        DESCRIPTION,\n        CREATED_BY_ID,\n        CREATED_DATE,\n        LAST_MODIFIED_BY_ID,\n        LAST_MODIFIED_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITYSTAGES_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.opportunity_stage \n             \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Stage_id,\n        ID as Source_ID,\n        MASTER_LABEL,\n        API_NAME,\n        IS_ACTIVE,\n        SORT_ORDER,\n        IS_CLOSED,\n        IS_WON,\n        FORECAST_CATEGORY,\n        FORECAST_CATEGORY_NAME,\n        DEFAULT_PROBABILITY,\n        DESCRIPTION,\n        CREATED_BY_ID,\n        CREATED_DATE,\n        LAST_MODIFIED_BY_ID,\n        LAST_MODIFIED_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITYSTAGES_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.opportunity_stage \n             \n\n"}, "error": null, "status": "SUCCESS 40", "execution_time": 5.4039952754974365, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:51:51.644627Z", "completed_at": "2021-05-19T00:51:52.917872Z"}, {"name": "execute", "started_at": "2021-05-19T00:51:52.918189Z", "completed_at": "2021-05-19T00:51:56.614632Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n         )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'OWNER_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_OWNER WHERE OWNER_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  V_SF_Schema[0:2] == 'HS'  %}    \r\n  select\r\n        {{ dbt_utils.surrogate_key('OWNER_ID') }}  AS OWNER_ID,\r\n        OWNER_ID as Source_OWNER_ID,\r\n        PORTAL_ID,\r\n        TYPE,\r\n        FIRST_NAME,\r\n        LAST_NAME,\r\n        EMAIL,\r\n        CREATED_AT,\r\n        UPDATED_AT,\r\n        IS_ACTIVE,\r\n        ACTIVE_USER_ID,\r\n        USER_ID_INCLUDING_INACTIVE,\r\n        null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,   \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_OWNER_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.Owner\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as  OWNER_ID,\r\n        null as  Source_OWNER_ID,\r\n        null as PORTAL_ID,\r\n        null as TYPE,\r\n        null as FIRST_NAME,\r\n        null as LAST_NAME,\r\n        null as EMAIL,\r\n        null as CREATED_AT,\r\n        null as UPDATED_AT,\r\n        null as IS_ACTIVE,\r\n        null as ACTIVE_USER_ID,\r\n        null as USER_ID_INCLUDING_INACTIVE, \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,   \r\n    FROM dual\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Owner"], "unique_id": "model.sales_dataflo.Stg_Owner", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Owner.sql", "original_file_path": "ETL/Stage/HS/Stg_Owner.sql", "name": "Stg_Owner", "resource_type": "model", "alias": "Stg_Owner", "checksum": {"name": "sha256", "checksum": "2891d38fd9ee1c9cf452caee0e2cc77ff2bb54d6590b6dac04bc1ba588ad02e7"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_OWNER WHERE OWNER_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "OWNER_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Owner.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n     \n  select\n        md5(cast(\n    \n    coalesce(cast(OWNER_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS OWNER_ID,\n        OWNER_ID as Source_OWNER_ID,\n        PORTAL_ID,\n        TYPE,\n        FIRST_NAME,\n        LAST_NAME,\n        EMAIL,\n        CREATED_AT,\n        UPDATED_AT,\n        IS_ACTIVE,\n        ACTIVE_USER_ID,\n        USER_ID_INCLUDING_INACTIVE,\n        null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,   \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_OWNER_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Owner\n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n     \n  select\n        md5(cast(\n    \n    coalesce(cast(OWNER_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS OWNER_ID,\n        OWNER_ID as Source_OWNER_ID,\n        PORTAL_ID,\n        TYPE,\n        FIRST_NAME,\n        LAST_NAME,\n        EMAIL,\n        CREATED_AT,\n        UPDATED_AT,\n        IS_ACTIVE,\n        ACTIVE_USER_ID,\n        USER_ID_INCLUDING_INACTIVE,\n        null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,   \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_OWNER_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Owner\n        \n    \n"}, "error": null, "status": "SUCCESS 8", "execution_time": 5.3909337520599365, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:51:57.051222Z", "completed_at": "2021-05-19T00:51:58.486523Z"}, {"name": "execute", "started_at": "2021-05-19T00:51:58.486834Z", "completed_at": "2021-05-19T00:52:02.011734Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'User_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_USER WHERE User_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}    \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS User_id,\r\n        ID as Source_ID,\r\n        USERNAME,\r\n        LAST_NAME,\r\n        FIRST_NAME,\r\n        NAME,\r\n        COMPANY_NAME,\r\n        DIVISION,\r\n        DEPARTMENT,\r\n        TITLE,\r\n        STREET,\r\n        CITY,\r\n        STATE,\r\n        POSTAL_CODE,\r\n        COUNTRY,\r\n        EMAIL,\r\n        EMAIL_PREFERENCES_AUTO_BCC,\r\n        EMAIL_PREFERENCES_AUTO_BCC_STAY_IN_TOUCH,\r\n        EMAIL_PREFERENCES_STAY_IN_TOUCH_REMINDER,\r\n        SENDER_EMAIL,\r\n        SENDER_NAME,\r\n        SIGNATURE,\r\n        STAY_IN_TOUCH_SUBJECT,\r\n        STAY_IN_TOUCH_SIGNATURE,\r\n        STAY_IN_TOUCH_NOTE,\r\n        PHONE,\r\n        FAX,\r\n        MOBILE_PHONE,\r\n        ALIAS,\r\n        COMMUNITY_NICKNAME,\r\n        BADGE_TEXT,\r\n        IS_ACTIVE,\r\n        TIME_ZONE_SID_KEY,\r\n        USER_ROLE_ID,\r\n        LOCALE_SID_KEY,\r\n        RECEIVES_INFO_EMAILS,\r\n        RECEIVES_ADMIN_INFO_EMAILS,\r\n        EMAIL_ENCODING_KEY,\r\n        USER_TYPE,\r\n        LANGUAGE_LOCALE_KEY,\r\n        EMPLOYEE_NUMBER,\r\n        DELEGATED_APPROVER_ID,\r\n        MANAGER_ID,\r\n        LAST_LOGIN_DATE,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        contact_id,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.user\r\n       {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}    \r\n{% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as User_id,\r\n        null as  Source_ID,\r\n        null as USERNAME,\r\n        null as LAST_NAME,\r\n        null as FIRST_NAME,\r\n        null as NAME,\r\n        null as COMPANY_NAME,\r\n        null as DIVISION,\r\n        null as DEPARTMENT,\r\n        null as TITLE,\r\n        null as STREET,\r\n        null as CITY,\r\n        null as STATE,\r\n        null as POSTAL_CODE,\r\n        null as COUNTRY,\r\n        null as EMAIL,\r\n        null as EMAIL_PREFERENCES_AUTO_BCC,\r\n        null as EMAIL_PREFERENCES_AUTO_BCC_STAY_IN_TOUCH,\r\n        null as EMAIL_PREFERENCES_STAY_IN_TOUCH_REMINDER,\r\n        null as SENDER_EMAIL,\r\n        null as SENDER_NAME,\r\n        null as SIGNATURE,\r\n        null as STAY_IN_TOUCH_SUBJECT,\r\n        null as STAY_IN_TOUCH_SIGNATURE,\r\n        null as STAY_IN_TOUCH_NOTE,\r\n        null as PHONE,\r\n        null as FAX,\r\n        null as MOBILE_PHONE,\r\n        null as ALIAS,\r\n        null as COMMUNITY_NICKNAME,\r\n        null as BADGE_TEXT,\r\n        null as IS_ACTIVE,\r\n        null as TIME_ZONE_SID_KEY,\r\n        null as USER_ROLE_ID,\r\n        null as LOCALE_SID_KEY,\r\n        null as RECEIVES_INFO_EMAILS,\r\n        null as RECEIVES_ADMIN_INFO_EMAILS,\r\n        null as EMAIL_ENCODING_KEY,\r\n        null as USER_TYPE,\r\n        null as LANGUAGE_LOCALE_KEY,\r\n        null as EMPLOYEE_NUMBER,\r\n        null as DELEGATED_APPROVER_ID,\r\n        null as MANAGER_ID,\r\n        null as LAST_LOGIN_DATE,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as contact_id,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3  \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_User"], "unique_id": "model.sales_dataflo.Stg_User", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_User.sql", "original_file_path": "ETL/Stage/SF/Stg_User.sql", "name": "Stg_User", "resource_type": "model", "alias": "Stg_User", "checksum": {"name": "sha256", "checksum": "19fdca0d4e1c76e4e51adcbd0a7740ed8d40c0e8b915aa0f6b47429a3b025a06"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_USER WHERE User_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "User_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_User.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n     \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS User_id,\n        ID as Source_ID,\n        USERNAME,\n        LAST_NAME,\n        FIRST_NAME,\n        NAME,\n        COMPANY_NAME,\n        DIVISION,\n        DEPARTMENT,\n        TITLE,\n        STREET,\n        CITY,\n        STATE,\n        POSTAL_CODE,\n        COUNTRY,\n        EMAIL,\n        EMAIL_PREFERENCES_AUTO_BCC,\n        EMAIL_PREFERENCES_AUTO_BCC_STAY_IN_TOUCH,\n        EMAIL_PREFERENCES_STAY_IN_TOUCH_REMINDER,\n        SENDER_EMAIL,\n        SENDER_NAME,\n        SIGNATURE,\n        STAY_IN_TOUCH_SUBJECT,\n        STAY_IN_TOUCH_SIGNATURE,\n        STAY_IN_TOUCH_NOTE,\n        PHONE,\n        FAX,\n        MOBILE_PHONE,\n        ALIAS,\n        COMMUNITY_NICKNAME,\n        BADGE_TEXT,\n        IS_ACTIVE,\n        TIME_ZONE_SID_KEY,\n        USER_ROLE_ID,\n        LOCALE_SID_KEY,\n        RECEIVES_INFO_EMAILS,\n        RECEIVES_ADMIN_INFO_EMAILS,\n        EMAIL_ENCODING_KEY,\n        USER_TYPE,\n        LANGUAGE_LOCALE_KEY,\n        EMPLOYEE_NUMBER,\n        DELEGATED_APPROVER_ID,\n        MANAGER_ID,\n        LAST_LOGIN_DATE,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        contact_id,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.user\n           \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n     \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS User_id,\n        ID as Source_ID,\n        USERNAME,\n        LAST_NAME,\n        FIRST_NAME,\n        NAME,\n        COMPANY_NAME,\n        DIVISION,\n        DEPARTMENT,\n        TITLE,\n        STREET,\n        CITY,\n        STATE,\n        POSTAL_CODE,\n        COUNTRY,\n        EMAIL,\n        EMAIL_PREFERENCES_AUTO_BCC,\n        EMAIL_PREFERENCES_AUTO_BCC_STAY_IN_TOUCH,\n        EMAIL_PREFERENCES_STAY_IN_TOUCH_REMINDER,\n        SENDER_EMAIL,\n        SENDER_NAME,\n        SIGNATURE,\n        STAY_IN_TOUCH_SUBJECT,\n        STAY_IN_TOUCH_SIGNATURE,\n        STAY_IN_TOUCH_NOTE,\n        PHONE,\n        FAX,\n        MOBILE_PHONE,\n        ALIAS,\n        COMMUNITY_NICKNAME,\n        BADGE_TEXT,\n        IS_ACTIVE,\n        TIME_ZONE_SID_KEY,\n        USER_ROLE_ID,\n        LOCALE_SID_KEY,\n        RECEIVES_INFO_EMAILS,\n        RECEIVES_ADMIN_INFO_EMAILS,\n        EMAIL_ENCODING_KEY,\n        USER_TYPE,\n        LANGUAGE_LOCALE_KEY,\n        EMPLOYEE_NUMBER,\n        DELEGATED_APPROVER_ID,\n        MANAGER_ID,\n        LAST_LOGIN_DATE,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        contact_id,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.user\n           \n\n"}, "error": null, "status": "SUCCESS 3532", "execution_time": 5.925637722015381, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:02.445688Z", "completed_at": "2021-05-19T00:52:03.715136Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:03.715529Z", "completed_at": "2021-05-19T00:52:07.935495Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n            )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'DEAL_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_DEAL WHERE DEAL_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n  select\r\n        cast ({{ dbt_utils.surrogate_key('DEAL_ID') }}  as varchar(100)) AS DEAL_ID,\r\n        DEAL_ID as Source_DEAL_ID,\r\n        PORTAL_ID,\r\n        IS_DELETED,\r\n        _FIVETRAN_SYNCED,\r\n        PROPERTY_HS_DEAL_STAGE_PROBABILITY,\r\n        PROPERTY_HS_CLOSED_AMOUNT_IN_HOME_CURRENCY,\r\n        PROPERTY_HS_LASTMODIFIEDDATE,\r\n        PROPERTY_HS_CLOSED_AMOUNT,\r\n        PROPERTY_HS_TIME_IN_APPOINTMENTSCHEDULED,\r\n        PROPERTY_HS_IS_CLOSED,\r\n        PROPERTY_DAYS_TO_CLOSE,\r\n        PROPERTY_HS_DATE_ENTERED_APPOINTMENTSCHEDULED,\r\n        PROPERTY_HS_PROJECTED_AMOUNT,\r\n        PROPERTY_HS_PROJECTED_AMOUNT_IN_HOME_CURRENCY,\r\n        PROPERTY_AMOUNT_IN_HOME_CURRENCY,\r\n        PROPERTY_HS_DATE_EXITED_DECISIONMAKERBOUGHTIN,\r\n        PROPERTY_HS_DATE_ENTERED_DECISIONMAKERBOUGHTIN,\r\n        PROPERTY_HS_DATE_EXITED_CONTRACTSENT,\r\n        PROPERTY_HS_DATE_EXITED_APPOINTMENTSCHEDULED,\r\n        PROPERTY_HS_DATE_ENTERED_PRESENTATIONSCHEDULED,\r\n        PROPERTY_HS_TIME_IN_QUALIFIEDTOBUY,\r\n        PROPERTY_HS_TIME_IN_CLOSEDWON,\r\n        PROPERTY_HS_TIME_IN_DECISIONMAKERBOUGHTIN,\r\n        PROPERTY_HS_DATE_EXITED_PRESENTATIONSCHEDULED,\r\n        PROPERTY_HS_DATE_ENTERED_QUALIFIEDTOBUY,\r\n        PROPERTY_HS_DATE_EXITED_QUALIFIEDTOBUY,\r\n        PROPERTY_HS_DATE_ENTERED_CONTRACTSENT,\r\n        PROPERTY_HS_TIME_IN_PRESENTATIONSCHEDULED,\r\n        PROPERTY_HS_DATE_ENTERED_CLOSEDWON,\r\n        PROPERTY_HS_TIME_IN_CONTRACTSENT,\r\n        PROPERTY_DEALNAME,\r\n        PROPERTY_CLOSEDATE,\r\n        PROPERTY_CREATEDATE,\r\n        DEAL_PIPELINE_STAGE_ID,\r\n        OWNER_ID,\r\n        PROPERTY_HS_CREATEDATE,\r\n        PROPERTY_HS_ALL_OWNER_IDS,\r\n        DEAL_PIPELINE_ID,\r\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        PROPERTY_AMOUNT,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,   \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_DEAL_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.Deal\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as  DEAL_ID,\r\n        null as Source_DEAL_ID,\r\n        null as PORTAL_ID,\r\n        null as IS_DELETED,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as PROPERTY_HS_DEAL_STAGE_PROBABILITY,\r\n        null as PROPERTY_HS_CLOSED_AMOUNT_IN_HOME_CURRENCY,\r\n        null as PROPERTY_HS_LASTMODIFIEDDATE,\r\n        null as PROPERTY_HS_CLOSED_AMOUNT,\r\n        null as PROPERTY_HS_TIME_IN_APPOINTMENTSCHEDULED,\r\n        null as PROPERTY_HS_IS_CLOSED,\r\n        null as PROPERTY_DAYS_TO_CLOSE,\r\n        null as PROPERTY_HS_DATE_ENTERED_APPOINTMENTSCHEDULED,\r\n        null as PROPERTY_HS_PROJECTED_AMOUNT,\r\n        null as PROPERTY_HS_PROJECTED_AMOUNT_IN_HOME_CURRENCY,\r\n        null as PROPERTY_AMOUNT_IN_HOME_CURRENCY,\r\n        null as PROPERTY_HS_DATE_EXITED_DECISIONMAKERBOUGHTIN,\r\n        null as PROPERTY_HS_DATE_ENTERED_DECISIONMAKERBOUGHTIN,\r\n        null as PROPERTY_HS_DATE_EXITED_CONTRACTSENT,\r\n        null as PROPERTY_HS_DATE_EXITED_APPOINTMENTSCHEDULED,\r\n        null as PROPERTY_HS_DATE_ENTERED_PRESENTATIONSCHEDULED,\r\n        null as PROPERTY_HS_TIME_IN_QUALIFIEDTOBUY,\r\n        null as PROPERTY_HS_TIME_IN_CLOSEDWON,\r\n        null as PROPERTY_HS_TIME_IN_DECISIONMAKERBOUGHTIN,\r\n        null as PROPERTY_HS_DATE_EXITED_PRESENTATIONSCHEDULED,\r\n        null as PROPERTY_HS_DATE_ENTERED_QUALIFIEDTOBUY,\r\n        null as PROPERTY_HS_DATE_EXITED_QUALIFIEDTOBUY,\r\n        null as PROPERTY_HS_DATE_ENTERED_CONTRACTSENT,\r\n        null as PROPERTY_HS_TIME_IN_PRESENTATIONSCHEDULED,\r\n        null as PROPERTY_HS_DATE_ENTERED_CLOSEDWON,\r\n        null as PROPERTY_HS_TIME_IN_CONTRACTSENT,\r\n        null as PROPERTY_DEALNAME,\r\n        null as PROPERTY_CLOSEDATE,\r\n        null as PROPERTY_CREATEDATE,\r\n        null as DEAL_PIPELINE_STAGE_ID,\r\n        null as OWNER_ID,\r\n        null as PROPERTY_HS_CREATEDATE,\r\n        null as PROPERTY_HS_ALL_OWNER_IDS,\r\n        null as DEAL_PIPELINE_ID,\r\n        null as PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        null as PROPERTY_AMOUNT,   \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Deal"], "unique_id": "model.sales_dataflo.Stg_Deal", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Deal.sql", "original_file_path": "ETL/Stage/HS/Stg_Deal.sql", "name": "Stg_Deal", "resource_type": "model", "alias": "Stg_Deal", "checksum": {"name": "sha256", "checksum": "03718c05c51e2849ecdc4b9e58db82be7733b1f7956091df95f5f4b75add9de8"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_DEAL WHERE DEAL_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "DEAL_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Deal.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n  \n  select\n        cast (md5(cast(\n    \n    coalesce(cast(DEAL_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  as varchar(100)) AS DEAL_ID,\n        DEAL_ID as Source_DEAL_ID,\n        PORTAL_ID,\n        IS_DELETED,\n        _FIVETRAN_SYNCED,\n        PROPERTY_HS_DEAL_STAGE_PROBABILITY,\n        PROPERTY_HS_CLOSED_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_HS_LASTMODIFIEDDATE,\n        PROPERTY_HS_CLOSED_AMOUNT,\n        PROPERTY_HS_TIME_IN_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_IS_CLOSED,\n        PROPERTY_DAYS_TO_CLOSE,\n        PROPERTY_HS_DATE_ENTERED_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_PROJECTED_AMOUNT,\n        PROPERTY_HS_PROJECTED_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_HS_DATE_EXITED_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_ENTERED_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_EXITED_CONTRACTSENT,\n        PROPERTY_HS_DATE_EXITED_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_TIME_IN_QUALIFIEDTOBUY,\n        PROPERTY_HS_TIME_IN_CLOSEDWON,\n        PROPERTY_HS_TIME_IN_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_EXITED_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_QUALIFIEDTOBUY,\n        PROPERTY_HS_DATE_EXITED_QUALIFIEDTOBUY,\n        PROPERTY_HS_DATE_ENTERED_CONTRACTSENT,\n        PROPERTY_HS_TIME_IN_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_CLOSEDWON,\n        PROPERTY_HS_TIME_IN_CONTRACTSENT,\n        PROPERTY_DEALNAME,\n        PROPERTY_CLOSEDATE,\n        PROPERTY_CREATEDATE,\n        DEAL_PIPELINE_STAGE_ID,\n        OWNER_ID,\n        PROPERTY_HS_CREATEDATE,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        DEAL_PIPELINE_ID,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_AMOUNT,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,   \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Deal\n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n  \n  select\n        cast (md5(cast(\n    \n    coalesce(cast(DEAL_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  as varchar(100)) AS DEAL_ID,\n        DEAL_ID as Source_DEAL_ID,\n        PORTAL_ID,\n        IS_DELETED,\n        _FIVETRAN_SYNCED,\n        PROPERTY_HS_DEAL_STAGE_PROBABILITY,\n        PROPERTY_HS_CLOSED_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_HS_LASTMODIFIEDDATE,\n        PROPERTY_HS_CLOSED_AMOUNT,\n        PROPERTY_HS_TIME_IN_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_IS_CLOSED,\n        PROPERTY_DAYS_TO_CLOSE,\n        PROPERTY_HS_DATE_ENTERED_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_PROJECTED_AMOUNT,\n        PROPERTY_HS_PROJECTED_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_AMOUNT_IN_HOME_CURRENCY,\n        PROPERTY_HS_DATE_EXITED_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_ENTERED_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_EXITED_CONTRACTSENT,\n        PROPERTY_HS_DATE_EXITED_APPOINTMENTSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_TIME_IN_QUALIFIEDTOBUY,\n        PROPERTY_HS_TIME_IN_CLOSEDWON,\n        PROPERTY_HS_TIME_IN_DECISIONMAKERBOUGHTIN,\n        PROPERTY_HS_DATE_EXITED_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_QUALIFIEDTOBUY,\n        PROPERTY_HS_DATE_EXITED_QUALIFIEDTOBUY,\n        PROPERTY_HS_DATE_ENTERED_CONTRACTSENT,\n        PROPERTY_HS_TIME_IN_PRESENTATIONSCHEDULED,\n        PROPERTY_HS_DATE_ENTERED_CLOSEDWON,\n        PROPERTY_HS_TIME_IN_CONTRACTSENT,\n        PROPERTY_DEALNAME,\n        PROPERTY_CLOSEDATE,\n        PROPERTY_CREATEDATE,\n        DEAL_PIPELINE_STAGE_ID,\n        OWNER_ID,\n        PROPERTY_HS_CREATEDATE,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        DEAL_PIPELINE_ID,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_AMOUNT,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,   \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Deal\n        \n    \n"}, "error": null, "status": "SUCCESS 19", "execution_time": 5.661196231842041, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:08.373757Z", "completed_at": "2021-05-19T00:52:09.823935Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:09.824218Z", "completed_at": "2021-05-19T00:52:13.602292Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PIPELINE_STAGE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_DEAL_PIPELINE_STAGE WHERE PIPELINE_STAGE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %}   \r\n  select\r\n        {{ dbt_utils.surrogate_key('STAGE_ID') }}  AS PIPELINE_STAGE_ID,\r\n        STAGE_ID as Source_STAGE_ID,\r\n        PIPELINE_ID,\r\n        LABEL,\r\n        PROBABILITY,\r\n        ACTIVE,\r\n        DISPLAY_ORDER,\r\n        CLOSED_WON,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3, \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.DEAL_PIPELINE_STAGE\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as PIPELINE_STAGE_ID,\r\n        null as  Source_STAGE_ID,\r\n        null as PIPELINE_ID,\r\n        null as LABEL,\r\n        null as PROBABILITY,\r\n        null as ACTIVE,\r\n        null as DISPLAY_ORDER,\r\n        null as CLOSED_WON,        \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Deal_Pipeline_Stage"], "unique_id": "model.sales_dataflo.Stg_Deal_Pipeline_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Deal_Pipeline_Stage.sql", "original_file_path": "ETL/Stage/HS/Stg_Deal_Pipeline_Stage.sql", "name": "Stg_Deal_Pipeline_Stage", "resource_type": "model", "alias": "Stg_Deal_Pipeline_Stage", "checksum": {"name": "sha256", "checksum": "87cd9b15ad03337ffd8108f2cc2f42ded7ca63beddc6a2e4eef2a3505a85a2f7"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_DEAL_PIPELINE_STAGE WHERE PIPELINE_STAGE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PIPELINE_STAGE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Deal_Pipeline_Stage.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(STAGE_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PIPELINE_STAGE_ID,\n        STAGE_ID as Source_STAGE_ID,\n        PIPELINE_ID,\n        LABEL,\n        PROBABILITY,\n        ACTIVE,\n        DISPLAY_ORDER,\n        CLOSED_WON,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3, \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_PIPELINE_STAGE\n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(STAGE_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PIPELINE_STAGE_ID,\n        STAGE_ID as Source_STAGE_ID,\n        PIPELINE_ID,\n        LABEL,\n        PROBABILITY,\n        ACTIVE,\n        DISPLAY_ORDER,\n        CLOSED_WON,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3, \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_PIPELINE_STAGE\n        \n    \n"}, "error": null, "status": "SUCCESS 7", "execution_time": 5.463371276855469, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:14.037539Z", "completed_at": "2021-05-19T00:52:15.510574Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:15.510903Z", "completed_at": "2021-05-19T00:52:19.073883Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'STAGE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_DEAL_STAGE WHERE STAGE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %}   \r\n  select\r\n        {{ dbt_utils.surrogate_key('DEAL_ID','VALUE','DATE_ENTERED') }}  AS STAGE_ID,\r\n        DEAL_ID as Source_deal_id,\r\n        VALUE,\r\n        SOURCE_ID,\r\n        SOURCE,\r\n        DATE_ENTERED,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_DEAL_STAGE_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.DEAL_STAGE\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as STAGE_ID,\r\n        null as Source_deal_id,\r\n        null as VALUE,\r\n        null as SOURCE_ID,\r\n        null as SOURCE,\r\n        null as DATE_ENTERED,      \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3  \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Deal_Stage"], "unique_id": "model.sales_dataflo.Stg_Deal_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Deal_Stage.sql", "original_file_path": "ETL/Stage/HS/Stg_Deal_Stage.sql", "name": "Stg_Deal_Stage", "resource_type": "model", "alias": "Stg_Deal_Stage", "checksum": {"name": "sha256", "checksum": "1afd9b44759a95fbbd767569fda6e1bab6ab857c28b3d3e1792f8f046280b5b4"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_DEAL_STAGE WHERE STAGE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "STAGE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Deal_Stage.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(DEAL_ID as \n    varchar\n), '') || '-' || coalesce(cast(VALUE as \n    varchar\n), '') || '-' || coalesce(cast(DATE_ENTERED as \n    varchar\n), '')\n\n as \n    varchar\n))  AS STAGE_ID,\n        DEAL_ID as Source_deal_id,\n        VALUE,\n        SOURCE_ID,\n        SOURCE,\n        DATE_ENTERED,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_STAGE\n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(DEAL_ID as \n    varchar\n), '') || '-' || coalesce(cast(VALUE as \n    varchar\n), '') || '-' || coalesce(cast(DATE_ENTERED as \n    varchar\n), '')\n\n as \n    varchar\n))  AS STAGE_ID,\n        DEAL_ID as Source_deal_id,\n        VALUE,\n        SOURCE_ID,\n        SOURCE,\n        DATE_ENTERED,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_STAGE\n        \n    \n"}, "error": null, "status": "SUCCESS 34", "execution_time": 5.574567794799805, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:19.503448Z", "completed_at": "2021-05-19T00:52:20.754311Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:20.754608Z", "completed_at": "2021-05-19T00:52:24.642938Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'lead_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_LEAD WHERE lead_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}  \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS lead_id,\r\n        ID as Source_ID,\r\n        IS_DELETED,\r\n        MASTER_RECORD_ID,\r\n        LAST_NAME,\r\n        FIRST_NAME,\r\n        SALUTATION,\r\n        NAME,\r\n        TITLE,\r\n        COMPANY,\r\n        STREET,\r\n        CITY,\r\n        STATE,\r\n        POSTAL_CODE,\r\n        COUNTRY,\r\n        LATITUDE,\r\n        LONGITUDE,\r\n        GEOCODE_ACCURACY,\r\n        PHONE,\r\n        EMAIL,\r\n        WEBSITE,\r\n        PHOTO_URL,\r\n        DESCRIPTION,\r\n        LEAD_SOURCE,\r\n        STATUS,\r\n        INDUSTRY,\r\n        RATING,\r\n        ANNUAL_REVENUE,\r\n        NUMBER_OF_EMPLOYEES,\r\n        OWNER_ID,\r\n        IS_CONVERTED,\r\n        CONVERTED_DATE,\r\n        CONVERTED_ACCOUNT_ID,\r\n        CONVERTED_CONTACT_ID,\r\n        CONVERTED_OPPORTUNITY_ID,\r\n        IS_UNREAD_BY_OWNER,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        SYSTEM_MODSTAMP,\r\n        LAST_ACTIVITY_DATE,\r\n        LAST_VIEWED_DATE,\r\n        LAST_REFERENCED_DATE,\r\n        JIGSAW,\r\n        JIGSAW_CONTACT_ID,\r\n        EMAIL_BOUNCED_REASON,\r\n        EMAIL_BOUNCED_DATE,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_LEAD_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Lead\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n{% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as lead_id,\r\n        null as  Source_ID,\r\n        null as IS_DELETED,\r\n        null as MASTER_RECORD_ID,\r\n        null as LAST_NAME,\r\n        null as FIRST_NAME,\r\n        null as SALUTATION,\r\n        null as NAME,\r\n        null as TITLE,\r\n        null as COMPANY,\r\n        null as STREET,\r\n        null as CITY,\r\n        null as STATE,\r\n        null as POSTAL_CODE,\r\n        null as COUNTRY,\r\n        null as LATITUDE,\r\n        null as LONGITUDE,\r\n        null as GEOCODE_ACCURACY,\r\n        null as PHONE,\r\n        null as EMAIL,\r\n        null as WEBSITE,\r\n        null as PHOTO_URL,\r\n        null as DESCRIPTION,\r\n        null as LEAD_SOURCE,\r\n        null as STATUS,\r\n        null as INDUSTRY,\r\n        null as RATING,\r\n        null as ANNUAL_REVENUE,\r\n        null as NUMBER_OF_EMPLOYEES,\r\n        null as OWNER_ID,\r\n        null as IS_CONVERTED,\r\n        null as CONVERTED_DATE,\r\n        null as CONVERTED_ACCOUNT_ID,\r\n        null as CONVERTED_CONTACT_ID,\r\n        null as CONVERTED_OPPORTUNITY_ID,\r\n        null as IS_UNREAD_BY_OWNER,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as SYSTEM_MODSTAMP,\r\n        null as LAST_ACTIVITY_DATE,\r\n        null as LAST_VIEWED_DATE,\r\n        null as LAST_REFERENCED_DATE,\r\n        null as JIGSAW,\r\n        null as JIGSAW_CONTACT_ID,\r\n        null as EMAIL_BOUNCED_REASON,\r\n        null as EMAIL_BOUNCED_DATE,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Lead"], "unique_id": "model.sales_dataflo.Stg_Lead", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Lead.sql", "original_file_path": "ETL/Stage/SF/Stg_Lead.sql", "name": "Stg_Lead", "resource_type": "model", "alias": "Stg_Lead", "checksum": {"name": "sha256", "checksum": "6a6591ba8eea401f0a2705f74d789e160127fc9e12e4a43bace05ad70e834f14"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_LEAD WHERE lead_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "lead_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Lead.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS lead_id,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        LAST_NAME,\n        FIRST_NAME,\n        SALUTATION,\n        NAME,\n        TITLE,\n        COMPANY,\n        STREET,\n        CITY,\n        STATE,\n        POSTAL_CODE,\n        COUNTRY,\n        LATITUDE,\n        LONGITUDE,\n        GEOCODE_ACCURACY,\n        PHONE,\n        EMAIL,\n        WEBSITE,\n        PHOTO_URL,\n        DESCRIPTION,\n        LEAD_SOURCE,\n        STATUS,\n        INDUSTRY,\n        RATING,\n        ANNUAL_REVENUE,\n        NUMBER_OF_EMPLOYEES,\n        OWNER_ID,\n        IS_CONVERTED,\n        CONVERTED_DATE,\n        CONVERTED_ACCOUNT_ID,\n        CONVERTED_CONTACT_ID,\n        CONVERTED_OPPORTUNITY_ID,\n        IS_UNREAD_BY_OWNER,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        JIGSAW,\n        JIGSAW_CONTACT_ID,\n        EMAIL_BOUNCED_REASON,\n        EMAIL_BOUNCED_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_LEAD_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Lead\n          \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS lead_id,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        LAST_NAME,\n        FIRST_NAME,\n        SALUTATION,\n        NAME,\n        TITLE,\n        COMPANY,\n        STREET,\n        CITY,\n        STATE,\n        POSTAL_CODE,\n        COUNTRY,\n        LATITUDE,\n        LONGITUDE,\n        GEOCODE_ACCURACY,\n        PHONE,\n        EMAIL,\n        WEBSITE,\n        PHOTO_URL,\n        DESCRIPTION,\n        LEAD_SOURCE,\n        STATUS,\n        INDUSTRY,\n        RATING,\n        ANNUAL_REVENUE,\n        NUMBER_OF_EMPLOYEES,\n        OWNER_ID,\n        IS_CONVERTED,\n        CONVERTED_DATE,\n        CONVERTED_ACCOUNT_ID,\n        CONVERTED_CONTACT_ID,\n        CONVERTED_OPPORTUNITY_ID,\n        IS_UNREAD_BY_OWNER,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        JIGSAW,\n        JIGSAW_CONTACT_ID,\n        EMAIL_BOUNCED_REASON,\n        EMAIL_BOUNCED_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_LEAD_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Lead\n          \n\n"}, "error": null, "status": "SUCCESS 551062", "execution_time": 16.745645761489868, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:25.082030Z", "completed_at": "2021-05-19T00:52:26.542147Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:26.542452Z", "completed_at": "2021-05-19T00:52:41.398350Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'User_Role_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_USER_ROLE WHERE User_Role_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}  \r\nselect\r\n        {{ dbt_utils.surrogate_key('id') }}  AS User_Role_id,\r\n        ID as Source_ID,\r\n        NAME,\r\n        PARENT_ROLE_ID,\r\n        ROLLUP_DESCRIPTION,\r\n        OPPORTUNITY_ACCESS_FOR_ACCOUNT_OWNER,\r\n        CASE_ACCESS_FOR_ACCOUNT_OWNER,\r\n        CONTACT_ACCESS_FOR_ACCOUNT_OWNER,\r\n        FORECAST_USER_ID,\r\n        MAY_FORECAST_MANAGER_SHARE,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        SYSTEM_MODSTAMP,\r\n        DEVELOPER_NAME,\r\n        PORTAL_ACCOUNT_ID,\r\n        PORTAL_TYPE,\r\n        PORTAL_ACCOUNT_OWNER_ID,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.user_role\r\n            {% if not loop.last %}\r\n               UNION ALL\r\n            {% endif %}  \r\n{% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as User_Role_id,\r\n        null as  Source_ID,\r\n        null as NAME,\r\n        null as PARENT_ROLE_ID,\r\n        null as ROLLUP_DESCRIPTION,\r\n        null as OPPORTUNITY_ACCESS_FOR_ACCOUNT_OWNER,\r\n        null as CASE_ACCESS_FOR_ACCOUNT_OWNER,\r\n        null as CONTACT_ACCESS_FOR_ACCOUNT_OWNER,\r\n        null as FORECAST_USER_ID,\r\n        null as MAY_FORECAST_MANAGER_SHARE,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as SYSTEM_MODSTAMP,\r\n        null as DEVELOPER_NAME,\r\n        null as PORTAL_ACCOUNT_ID,\r\n        null as PORTAL_TYPE,\r\n        null as PORTAL_ACCOUNT_OWNER_ID,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_User_Role"], "unique_id": "model.sales_dataflo.Stg_User_Role", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_User_Role.sql", "original_file_path": "ETL/Stage/SF/Stg_User_Role.sql", "name": "Stg_User_Role", "resource_type": "model", "alias": "Stg_User_Role", "checksum": {"name": "sha256", "checksum": "1edb612523a71bc1443011502f95ec4c7de277dea87f5009da9544975cdb587f"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_USER_ROLE WHERE User_Role_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "User_Role_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_User_Role.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \nselect\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS User_Role_id,\n        ID as Source_ID,\n        NAME,\n        PARENT_ROLE_ID,\n        ROLLUP_DESCRIPTION,\n        OPPORTUNITY_ACCESS_FOR_ACCOUNT_OWNER,\n        CASE_ACCESS_FOR_ACCOUNT_OWNER,\n        CONTACT_ACCESS_FOR_ACCOUNT_OWNER,\n        FORECAST_USER_ID,\n        MAY_FORECAST_MANAGER_SHARE,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        DEVELOPER_NAME,\n        PORTAL_ACCOUNT_ID,\n        PORTAL_TYPE,\n        PORTAL_ACCOUNT_OWNER_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.user_role\n              \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \nselect\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS User_Role_id,\n        ID as Source_ID,\n        NAME,\n        PARENT_ROLE_ID,\n        ROLLUP_DESCRIPTION,\n        OPPORTUNITY_ACCESS_FOR_ACCOUNT_OWNER,\n        CASE_ACCESS_FOR_ACCOUNT_OWNER,\n        CONTACT_ACCESS_FOR_ACCOUNT_OWNER,\n        FORECAST_USER_ID,\n        MAY_FORECAST_MANAGER_SHARE,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        DEVELOPER_NAME,\n        PORTAL_ACCOUNT_ID,\n        PORTAL_TYPE,\n        PORTAL_ACCOUNT_OWNER_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_USER_ROLE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.user_role\n              \n\n"}, "error": null, "status": "SUCCESS 435", "execution_time": 5.916656970977783, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:41.830077Z", "completed_at": "2021-05-19T00:52:43.353528Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:43.353818Z", "completed_at": "2021-05-19T00:52:47.319003Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Account_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ACCOUNT WHERE ACCOUNT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Account_ID,\r\n        ID as Source_ID,\r\n        IS_DELETED,\r\n        MASTER_RECORD_ID,\r\n        NAME,\r\n        TYPE,\r\n        PARENT_ID,\r\n        BILLING_STREET,\r\n        BILLING_CITY,\r\n        BILLING_STATE,\r\n        BILLING_POSTAL_CODE,\r\n        BILLING_COUNTRY,\r\n        SHIPPING_STREET,\r\n        SHIPPING_CITY,\r\n        SHIPPING_STATE,\r\n        SHIPPING_POSTAL_CODE,\r\n        SHIPPING_COUNTRY,\r\n        PHONE,\r\n        FAX,\r\n        WEBSITE,\r\n        SIC,\r\n        INDUSTRY,\r\n        ANNUAL_REVENUE,\r\n        NUMBER_OF_EMPLOYEES,\r\n        OWNERSHIP,\r\n        DESCRIPTION,\r\n        OWNER_ID,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        ACCOUNT_SOURCE,\r\n        SIC_DESC,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Account\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as Account_ID,\r\n        null as  Source_ID,\r\n        null as IS_DELETED,\r\n        null as MASTER_RECORD_ID,\r\n        null as NAME,\r\n        null as TYPE,\r\n        null as PARENT_ID,\r\n        null as BILLING_STREET,\r\n        null as BILLING_CITY,\r\n        null as BILLING_STATE,\r\n        null as BILLING_POSTAL_CODE,\r\n        null as BILLING_COUNTRY,\r\n        null as SHIPPING_STREET,\r\n        null as SHIPPING_CITY,\r\n        null as SHIPPING_STATE,\r\n        null as SHIPPING_POSTAL_CODE,\r\n        null as SHIPPING_COUNTRY,\r\n        null as PHONE,\r\n        null as FAX,\r\n        null as WEBSITE,\r\n        null as SIC,\r\n        null as INDUSTRY,\r\n        null as ANNUAL_REVENUE,\r\n        null as NUMBER_OF_EMPLOYEES,\r\n        null as OWNERSHIP,\r\n        null as DESCRIPTION,\r\n        null as OWNER_ID,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as ACCOUNT_SOURCE,\r\n        null as SIC_DESC,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Account"], "unique_id": "model.sales_dataflo.Stg_Account", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Account.sql", "original_file_path": "ETL/Stage/SF/Stg_Account.sql", "name": "Stg_Account", "resource_type": "model", "alias": "Stg_Account", "checksum": {"name": "sha256", "checksum": "1ad944cfcc91b38ee2920918ab1f5fa06ccfdc01065743edf9fef2dc59f19bae"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ACCOUNT WHERE ACCOUNT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Account_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Account.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        NAME,\n        TYPE,\n        PARENT_ID,\n        BILLING_STREET,\n        BILLING_CITY,\n        BILLING_STATE,\n        BILLING_POSTAL_CODE,\n        BILLING_COUNTRY,\n        SHIPPING_STREET,\n        SHIPPING_CITY,\n        SHIPPING_STATE,\n        SHIPPING_POSTAL_CODE,\n        SHIPPING_COUNTRY,\n        PHONE,\n        FAX,\n        WEBSITE,\n        SIC,\n        INDUSTRY,\n        ANNUAL_REVENUE,\n        NUMBER_OF_EMPLOYEES,\n        OWNERSHIP,\n        DESCRIPTION,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        ACCOUNT_SOURCE,\n        SIC_DESC,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Account\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        MASTER_RECORD_ID,\n        NAME,\n        TYPE,\n        PARENT_ID,\n        BILLING_STREET,\n        BILLING_CITY,\n        BILLING_STATE,\n        BILLING_POSTAL_CODE,\n        BILLING_COUNTRY,\n        SHIPPING_STREET,\n        SHIPPING_CITY,\n        SHIPPING_STATE,\n        SHIPPING_POSTAL_CODE,\n        SHIPPING_COUNTRY,\n        PHONE,\n        FAX,\n        WEBSITE,\n        SIC,\n        INDUSTRY,\n        ANNUAL_REVENUE,\n        NUMBER_OF_EMPLOYEES,\n        OWNERSHIP,\n        DESCRIPTION,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        ACCOUNT_SOURCE,\n        SIC_DESC,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Account\n         \n    \n"}, "error": null, "status": "SUCCESS 191439", "execution_time": 12.472837448120117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:52:47.750741Z", "completed_at": "2021-05-19T00:52:49.230202Z"}, {"name": "execute", "started_at": "2021-05-19T00:52:49.230534Z", "completed_at": "2021-05-19T00:52:59.788590Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Period_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PERIOD WHERE Period_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}  \r\n  \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Period_ID,\r\n        ID as Source_ID,\r\n        FISCAL_YEAR_SETTINGS_ID,\r\n        TYPE,\r\n        START_DATE,\r\n        END_DATE,\r\n        SYSTEM_MODSTAMP,\r\n        IS_FORECAST_PERIOD,\r\n        QUARTER_LABEL,\r\n        PERIOD_LABEL,\r\n        NUMBER,\r\n        FULLY_QUALIFIED_LABEL,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Period\r\n            {% if not loop.last %}\r\n               UNION ALL\r\n            {% endif %}  \r\n{% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as Period_ID,\r\n        null as  Source_ID,\r\n        null as FISCAL_YEAR_SETTINGS_ID,\r\n        null as TYPE,\r\n        null as START_DATE,\r\n        null as END_DATE,\r\n        null as SYSTEM_MODSTAMP,\r\n        null as IS_FORECAST_PERIOD,\r\n        null as QUARTER_LABEL,\r\n        null as PERIOD_LABEL,\r\n        null as NUMBER,\r\n        null as FULLY_QUALIFIED_LABEL,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Period"], "unique_id": "model.sales_dataflo.Stg_Period", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Period.sql", "original_file_path": "ETL/Stage/SF/Stg_Period.sql", "name": "Stg_Period", "resource_type": "model", "alias": "Stg_Period", "checksum": {"name": "sha256", "checksum": "145f6563ff661f7e004aff2cdd88347973507e442d7e8103d94c01f505935158"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PERIOD WHERE Period_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Period_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Period.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n  \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Period_ID,\n        ID as Source_ID,\n        FISCAL_YEAR_SETTINGS_ID,\n        TYPE,\n        START_DATE,\n        END_DATE,\n        SYSTEM_MODSTAMP,\n        IS_FORECAST_PERIOD,\n        QUARTER_LABEL,\n        PERIOD_LABEL,\n        NUMBER,\n        FULLY_QUALIFIED_LABEL,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Period\n              \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n   \n  \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Period_ID,\n        ID as Source_ID,\n        FISCAL_YEAR_SETTINGS_ID,\n        TYPE,\n        START_DATE,\n        END_DATE,\n        SYSTEM_MODSTAMP,\n        IS_FORECAST_PERIOD,\n        QUARTER_LABEL,\n        PERIOD_LABEL,\n        NUMBER,\n        FULLY_QUALIFIED_LABEL,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_ACCOUNT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Period\n              \n\n"}, "error": null, "status": "SUCCESS 459", "execution_time": 5.692950963973999, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:00.227491Z", "completed_at": "2021-05-19T00:53:01.705550Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:01.705884Z", "completed_at": "2021-05-19T00:53:05.488580Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n  materialized=\"table\"\r\n) \r\n}}\r\n\r\nselect * from(\r\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter)' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion    \r\nSelect 35 METRIC_ID, 'All Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 36 METRIC_ID, 'All deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 37 METRIC_ID, 'Average Time to Close Deal' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 38 METRIC_ID, 'Average Time to Close Deal by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'average' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 39 METRIC_ID, 'Calls' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 40 METRIC_ID, 'Calls & Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 41 METRIC_ID, 'Calls by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 42 METRIC_ID, 'Closed Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 43 METRIC_ID, 'Closed Deals Leaderboard' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 44 METRIC_ID, 'Closed Lost by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 45 METRIC_ID, 'Closed Lost Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 46 METRIC_ID, 'Closed Won Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 47 METRIC_ID, 'Closed Won Deals Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 48 METRIC_ID, 'Closed Won Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 49 METRIC_ID, 'Companies by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 50 METRIC_ID, 'Deals Amount by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 51 METRIC_ID, 'Deals by Deal Type (by Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 52 METRIC_ID, 'Deals by Original Source Data' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 53 METRIC_ID, 'Deals by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 54 METRIC_ID, 'Deals by Stage (Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 55 METRIC_ID, 'Deals by Stage by Created Date' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 56 METRIC_ID, 'Deals Closed Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 57 METRIC_ID, 'Deals Closed Won' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 58 METRIC_ID, 'Deals Closed Won Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 59 METRIC_ID, 'Deals Closed Won and Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 60 METRIC_ID, 'Deals Created' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 61 METRIC_ID, 'Deals Created by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 62 METRIC_ID, 'Deals Created by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 63 METRIC_ID, 'Deals Lost by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 64 METRIC_ID, 'Deals Won Amount by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 65 METRIC_ID, 'Deals Won by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 66 METRIC_ID, 'Emails Logged' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 67 METRIC_ID, 'Emails Logged by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 68 METRIC_ID, 'Forecasted Deals by Stage' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 69 METRIC_ID, 'Latest Deal Amount by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 70 METRIC_ID, 'Latest Deal by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 71 METRIC_ID, 'Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 72 METRIC_ID, 'Meetings by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 73 METRIC_ID, 'New Company by First Conversion' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 74 METRIC_ID, 'New Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 75 METRIC_ID, 'New Deals Created Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 76 METRIC_ID, 'Notes' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 77 METRIC_ID, 'Notes by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 78 METRIC_ID, 'Open (Unclosed) Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 79 METRIC_ID, 'Open (Unclosed) Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 80 METRIC_ID, 'Open (unclosed) Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 81 METRIC_ID, 'Open (Unclosed) Deals by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 82 METRIC_ID, 'Open (Unclosed) Deals by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 83 METRIC_ID, 'Open Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 84 METRIC_ID, '1 Overview' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, '' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 85 METRIC_ID, 'Revenue by Company' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 86 METRIC_ID, 'Sales Leaderboard' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 87 METRIC_ID, 'Sales Performance' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Average Time to Close Deal, All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Lost, Deals Closed Won, Deals Closed Won Amount.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 88 METRIC_ID, 'Sales Pipeline' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Won.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 89 METRIC_ID, 'Tasks Completed' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 90 METRIC_ID, 'Tasks Completed by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 91 METRIC_ID, 'Top Won Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 92 METRIC_ID, 'Total Contacts (Marketing)' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 93 METRIC_ID, 'Sessions by Device Type' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of website sessions by device type: desktop, mobile, and tablet (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 94 METRIC_ID, 'Traffic By Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of sessions by channel grouping (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 95 METRIC_ID, 'Sessions by Social Network' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Social Networks.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 96 METRIC_ID, 'Top Pages by Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pageviews to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 97 METRIC_ID, 'Avg. Quantity by Sources' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 98 METRIC_ID, 'Product revenue by Product name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Individual Product Sales during specified Date Range split up by Product Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 99 METRIC_ID, 'Sessions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 100 METRIC_ID, 'Sessions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 101 METRIC_ID, 'Sessions by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 102 METRIC_ID, 'Goal Completion by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 103 METRIC_ID, 'Goal Completion by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 104 METRIC_ID, 'Quantity by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 105 METRIC_ID, 'Quantity by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 106 METRIC_ID, 'Revenue by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 107 METRIC_ID, 'Revenue by landing page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 108 METRIC_ID, 'Goal Completion by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 109 METRIC_ID, 'Sessions by Paid Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Paid Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 110 METRIC_ID, 'Goal Value by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 111 METRIC_ID, 'Revenue by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 112 METRIC_ID, 'Goal Value by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 113 METRIC_ID, 'Screen Views by Screen Name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range split up by Screen Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 114 METRIC_ID, 'Sessions by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 115 METRIC_ID, 'Sessions by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 116 METRIC_ID, 'Sessions by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 117 METRIC_ID, 'Goal Completion by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 118 METRIC_ID, 'Top Source/Medium by Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Sources/Mediums.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 119 METRIC_ID, 'Top Sources By Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 120 METRIC_ID, 'Sessions by Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 121 METRIC_ID, 'Sessions by Top Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 122 METRIC_ID, 'Transactions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 123 METRIC_ID, 'Goal Value by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 124 METRIC_ID, 'Transactions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 125 METRIC_ID, 'Transactions per User by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by Channels during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 126 METRIC_ID, 'Transactions per User by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by original Source during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 127 METRIC_ID, 'Goal Value by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 128 METRIC_ID, 'Users by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 129 METRIC_ID, 'Users by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 130 METRIC_ID, 'Users by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Users who have initiated at least one Session to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 131 METRIC_ID, 'Top Events by Sessions by Label' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Total number of Sessions during the specified date range split up by top Events by Label.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 132 METRIC_ID, 'Users by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 133 METRIC_ID, 'Ecommerce Conv Rate by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 134 METRIC_ID, 'Audience Metrics' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of total monthly users, sessions, and page views (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 135 METRIC_ID, 'Impressions, Cost, Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get Google Ads data by distribution network and ad group including impressions, cost, and clicks (for the last 14 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 136 METRIC_ID, 'Organic Search Landing Page Performance (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of landing pages including average time on page, number of users, sessions, and more (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 137 METRIC_ID, 'Web Property Metrics (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get daily web property metrics including users, sessions, and page views (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 138 METRIC_ID, 'Website Performance' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get website performance details including users, bounce rate, page views per session, and more (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 139 METRIC_ID, 'Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 140 METRIC_ID, 'Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range. A session is the period time a user is actively engaged with your website, app, etc.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 141 METRIC_ID, '% New Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The Procentage of the Sessions that are created by New Users (first-time visits) during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 142 METRIC_ID, 'New Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of First-time Users during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 143 METRIC_ID, 'Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pages Viewed during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 144 METRIC_ID, 'Pages / Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Number of Pages Viewed during a Session during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 145 METRIC_ID, 'Bounce Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Single-Page Sessions in which there was no Interaction with the Page during specified Date Range. A bounced Session has a duration of 0 seconds.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 146 METRIC_ID, 'Screens / Session' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Screens Viewed per Session during specified Date Range. Every View of a Single Screen is counted individually, including repeated Siews of the same Screen.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 147 METRIC_ID, 'Average Session Duration' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Length of a Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 148 METRIC_ID, 'Audience Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 149 METRIC_ID, 'Audience Overview (mobile)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.This is a multi-metric Datablock with the following metrics: Avg. Session Duration, % New Sessions, Screens / Session, Screen View, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 150 METRIC_ID, 'Goal Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Goal Completion, Goal Conversion Rate.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 151 METRIC_ID, 'Goal Completion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 152 METRIC_ID, 'Goal Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Sum of all individual Goal Conversion Rates during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 153 METRIC_ID, 'Behavior Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Time on Page, Bounce Rate, Pageviews, Unique Pageviews.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 154 METRIC_ID, 'Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range. Depending on your implementation, this can include Tax and Shipping.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 155 METRIC_ID, 'Transactions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 156 METRIC_ID, 'Ecommerce Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 157 METRIC_ID, 'Ecommerce overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Order Value, Ecommerce Conversion Rate, Revenue, Quantity, Revenue per Visit, Transactions, Unique Purchases.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 158 METRIC_ID, 'Avg. Order Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Value of transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 159 METRIC_ID, 'Avg. Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 160 METRIC_ID, 'Avg. revenue per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average amount of Money generated split up by User during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 161 METRIC_ID, 'Unique Purchases' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Times a specified Pooduct (or set of Products) was a part of a Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 162 METRIC_ID, 'Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 163 METRIC_ID, 'Events' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Events occurred during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 164 METRIC_ID, 'Transactions per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions divided by total number of Users during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 165 METRIC_ID, 'Avg. Time on Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Page/Screen, or Set of Pages/Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 166 METRIC_ID, 'Avg. Time on Screen' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Screen, or Set of Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 167 METRIC_ID, 'Unique Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during which the specified Page was Viewed at least once. A unique pageview is counted for each page URL + page Title combination.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 168 METRIC_ID, 'Unique Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Unique Screen Views is the number of Sessions during which the specified Screen was Viewed at least once during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 169 METRIC_ID, 'Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 170 METRIC_ID, 'Revenue per Visit' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The amount of Money generated each time a Customer visits your Website during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 171 METRIC_ID, 'Goal Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range. This value is calculated by multiplying the number of Goal Conversionsby the value that you assigned to each Goal.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 172 METRIC_ID, 'Cost - Total spends' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Amount you spent on ads impressions or interactions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nUnion\r\nSelect 173 METRIC_ID, 'Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total chargeable clicks based on campaigns objective' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 174 METRIC_ID, 'Clicks by ad' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Total chargeable clicks by ad wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 175 METRIC_ID, 'Impressions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Number of times people seen the ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 176 METRIC_ID, 'Impressions by campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Impression campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 177 METRIC_ID, 'CTR -Click Through rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Percentage of chargeable clicks relative to impressions (clicks divided by impressions)' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 178 METRIC_ID, 'CTR By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CTR Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 179 METRIC_ID, 'Average CPC-Cost per clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The total cost of all clicks divided by the total number of clicks received' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 180 METRIC_ID, 'Average CPC-By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPC Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 181 METRIC_ID, 'Leads' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Number of leads collected through a campaign' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 182 METRIC_ID, 'Cost per Lead' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Amount spent per lead collected' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 183 METRIC_ID, 'Conversions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total number of times people took a desired action after clicking on or seeing your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 184 METRIC_ID, 'Conversions By campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'Conversions listed campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 185 METRIC_ID, 'Cost per conversion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'The Cost attributable to conversion-tracked clicks divided by the number of conversions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 186 METRIC_ID, 'Cost per conversion by campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS \r\nUnion\r\nSelect 187 METRIC_ID, 'Total Engagement' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 188 METRIC_ID, 'Total Social Actions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 189 METRIC_ID, 'Clicks to Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nUnion\r\nSelect 190 METRIC_ID, 'CPM' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 191 METRIC_ID, 'Reach' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion  \r\nSelect 192 METRIC_ID, 'Frequency' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The average number of times each person saw your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 193 METRIC_ID, 'Cost per action (CPA)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'Cost per action (CPA) allows you to pay only for actions that people take because of your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \r\nUnion\r\nSelect 194 METRIC_ID, 'Page likes' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'No of likes for page' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\n)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Metrics"], "unique_id": "model.sales_dataflo.Dim_Metrics", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Metrics.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Metrics.sql", "name": "Dim_Metrics", "resource_type": "model", "alias": "Dim_Metrics", "checksum": {"name": "sha256", "checksum": "0869e75b76474ce530132e7c76d73da033623aa7b488b0c4a15ec088af569320"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Metrics.sql", "deferred": false, "compiled_sql": "\n\nselect * from(\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter)' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion    \nSelect 35 METRIC_ID, 'All Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 36 METRIC_ID, 'All deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 37 METRIC_ID, 'Average Time to Close Deal' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 38 METRIC_ID, 'Average Time to Close Deal by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'average' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 39 METRIC_ID, 'Calls' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 40 METRIC_ID, 'Calls & Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 41 METRIC_ID, 'Calls by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 42 METRIC_ID, 'Closed Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 43 METRIC_ID, 'Closed Deals Leaderboard' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 44 METRIC_ID, 'Closed Lost by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 45 METRIC_ID, 'Closed Lost Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 46 METRIC_ID, 'Closed Won Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 47 METRIC_ID, 'Closed Won Deals Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 48 METRIC_ID, 'Closed Won Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 49 METRIC_ID, 'Companies by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 50 METRIC_ID, 'Deals Amount by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 51 METRIC_ID, 'Deals by Deal Type (by Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 52 METRIC_ID, 'Deals by Original Source Data' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 53 METRIC_ID, 'Deals by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 54 METRIC_ID, 'Deals by Stage (Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 55 METRIC_ID, 'Deals by Stage by Created Date' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 56 METRIC_ID, 'Deals Closed Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 57 METRIC_ID, 'Deals Closed Won' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 58 METRIC_ID, 'Deals Closed Won Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 59 METRIC_ID, 'Deals Closed Won and Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 60 METRIC_ID, 'Deals Created' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 61 METRIC_ID, 'Deals Created by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 62 METRIC_ID, 'Deals Created by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 63 METRIC_ID, 'Deals Lost by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 64 METRIC_ID, 'Deals Won Amount by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 65 METRIC_ID, 'Deals Won by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 66 METRIC_ID, 'Emails Logged' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 67 METRIC_ID, 'Emails Logged by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 68 METRIC_ID, 'Forecasted Deals by Stage' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 69 METRIC_ID, 'Latest Deal Amount by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 70 METRIC_ID, 'Latest Deal by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 71 METRIC_ID, 'Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 72 METRIC_ID, 'Meetings by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 73 METRIC_ID, 'New Company by First Conversion' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 74 METRIC_ID, 'New Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 75 METRIC_ID, 'New Deals Created Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 76 METRIC_ID, 'Notes' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 77 METRIC_ID, 'Notes by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 78 METRIC_ID, 'Open (Unclosed) Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 79 METRIC_ID, 'Open (Unclosed) Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 80 METRIC_ID, 'Open (unclosed) Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 81 METRIC_ID, 'Open (Unclosed) Deals by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 82 METRIC_ID, 'Open (Unclosed) Deals by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 83 METRIC_ID, 'Open Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 84 METRIC_ID, '1 Overview' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, '' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 85 METRIC_ID, 'Revenue by Company' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 86 METRIC_ID, 'Sales Leaderboard' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 87 METRIC_ID, 'Sales Performance' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Average Time to Close Deal, All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Lost, Deals Closed Won, Deals Closed Won Amount.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 88 METRIC_ID, 'Sales Pipeline' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Won.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 89 METRIC_ID, 'Tasks Completed' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 90 METRIC_ID, 'Tasks Completed by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 91 METRIC_ID, 'Top Won Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 92 METRIC_ID, 'Total Contacts (Marketing)' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 93 METRIC_ID, 'Sessions by Device Type' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of website sessions by device type: desktop, mobile, and tablet (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 94 METRIC_ID, 'Traffic By Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of sessions by channel grouping (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 95 METRIC_ID, 'Sessions by Social Network' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Social Networks.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 96 METRIC_ID, 'Top Pages by Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pageviews to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 97 METRIC_ID, 'Avg. Quantity by Sources' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 98 METRIC_ID, 'Product revenue by Product name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Individual Product Sales during specified Date Range split up by Product Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 99 METRIC_ID, 'Sessions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 100 METRIC_ID, 'Sessions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 101 METRIC_ID, 'Sessions by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 102 METRIC_ID, 'Goal Completion by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 103 METRIC_ID, 'Goal Completion by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 104 METRIC_ID, 'Quantity by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 105 METRIC_ID, 'Quantity by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 106 METRIC_ID, 'Revenue by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 107 METRIC_ID, 'Revenue by landing page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 108 METRIC_ID, 'Goal Completion by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 109 METRIC_ID, 'Sessions by Paid Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Paid Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 110 METRIC_ID, 'Goal Value by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 111 METRIC_ID, 'Revenue by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 112 METRIC_ID, 'Goal Value by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 113 METRIC_ID, 'Screen Views by Screen Name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range split up by Screen Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 114 METRIC_ID, 'Sessions by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 115 METRIC_ID, 'Sessions by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 116 METRIC_ID, 'Sessions by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 117 METRIC_ID, 'Goal Completion by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 118 METRIC_ID, 'Top Source/Medium by Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Sources/Mediums.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 119 METRIC_ID, 'Top Sources By Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 120 METRIC_ID, 'Sessions by Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 121 METRIC_ID, 'Sessions by Top Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 122 METRIC_ID, 'Transactions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 123 METRIC_ID, 'Goal Value by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 124 METRIC_ID, 'Transactions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 125 METRIC_ID, 'Transactions per User by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by Channels during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 126 METRIC_ID, 'Transactions per User by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by original Source during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 127 METRIC_ID, 'Goal Value by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 128 METRIC_ID, 'Users by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 129 METRIC_ID, 'Users by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 130 METRIC_ID, 'Users by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Users who have initiated at least one Session to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 131 METRIC_ID, 'Top Events by Sessions by Label' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Total number of Sessions during the specified date range split up by top Events by Label.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 132 METRIC_ID, 'Users by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 133 METRIC_ID, 'Ecommerce Conv Rate by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 134 METRIC_ID, 'Audience Metrics' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of total monthly users, sessions, and page views (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 135 METRIC_ID, 'Impressions, Cost, Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get Google Ads data by distribution network and ad group including impressions, cost, and clicks (for the last 14 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 136 METRIC_ID, 'Organic Search Landing Page Performance (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of landing pages including average time on page, number of users, sessions, and more (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 137 METRIC_ID, 'Web Property Metrics (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get daily web property metrics including users, sessions, and page views (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 138 METRIC_ID, 'Website Performance' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get website performance details including users, bounce rate, page views per session, and more (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 139 METRIC_ID, 'Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 140 METRIC_ID, 'Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range. A session is the period time a user is actively engaged with your website, app, etc.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 141 METRIC_ID, '% New Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The Procentage of the Sessions that are created by New Users (first-time visits) during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 142 METRIC_ID, 'New Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of First-time Users during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 143 METRIC_ID, 'Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pages Viewed during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 144 METRIC_ID, 'Pages / Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Number of Pages Viewed during a Session during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 145 METRIC_ID, 'Bounce Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Single-Page Sessions in which there was no Interaction with the Page during specified Date Range. A bounced Session has a duration of 0 seconds.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 146 METRIC_ID, 'Screens / Session' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Screens Viewed per Session during specified Date Range. Every View of a Single Screen is counted individually, including repeated Siews of the same Screen.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 147 METRIC_ID, 'Average Session Duration' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Length of a Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 148 METRIC_ID, 'Audience Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 149 METRIC_ID, 'Audience Overview (mobile)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.This is a multi-metric Datablock with the following metrics: Avg. Session Duration, % New Sessions, Screens / Session, Screen View, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 150 METRIC_ID, 'Goal Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Goal Completion, Goal Conversion Rate.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 151 METRIC_ID, 'Goal Completion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 152 METRIC_ID, 'Goal Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Sum of all individual Goal Conversion Rates during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 153 METRIC_ID, 'Behavior Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Time on Page, Bounce Rate, Pageviews, Unique Pageviews.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 154 METRIC_ID, 'Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range. Depending on your implementation, this can include Tax and Shipping.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 155 METRIC_ID, 'Transactions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 156 METRIC_ID, 'Ecommerce Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 157 METRIC_ID, 'Ecommerce overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Order Value, Ecommerce Conversion Rate, Revenue, Quantity, Revenue per Visit, Transactions, Unique Purchases.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 158 METRIC_ID, 'Avg. Order Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Value of transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 159 METRIC_ID, 'Avg. Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 160 METRIC_ID, 'Avg. revenue per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average amount of Money generated split up by User during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 161 METRIC_ID, 'Unique Purchases' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Times a specified Pooduct (or set of Products) was a part of a Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 162 METRIC_ID, 'Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 163 METRIC_ID, 'Events' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Events occurred during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 164 METRIC_ID, 'Transactions per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions divided by total number of Users during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 165 METRIC_ID, 'Avg. Time on Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Page/Screen, or Set of Pages/Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 166 METRIC_ID, 'Avg. Time on Screen' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Screen, or Set of Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 167 METRIC_ID, 'Unique Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during which the specified Page was Viewed at least once. A unique pageview is counted for each page URL + page Title combination.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 168 METRIC_ID, 'Unique Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Unique Screen Views is the number of Sessions during which the specified Screen was Viewed at least once during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 169 METRIC_ID, 'Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 170 METRIC_ID, 'Revenue per Visit' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The amount of Money generated each time a Customer visits your Website during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 171 METRIC_ID, 'Goal Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range. This value is calculated by multiplying the number of Goal Conversionsby the value that you assigned to each Goal.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 172 METRIC_ID, 'Cost - Total spends' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Amount you spent on ads impressions or interactions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nUnion\nSelect 173 METRIC_ID, 'Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total chargeable clicks based on campaigns objective' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 174 METRIC_ID, 'Clicks by ad' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Total chargeable clicks by ad wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 175 METRIC_ID, 'Impressions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Number of times people seen the ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 176 METRIC_ID, 'Impressions by campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Impression campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 177 METRIC_ID, 'CTR -Click Through rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Percentage of chargeable clicks relative to impressions (clicks divided by impressions)' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 178 METRIC_ID, 'CTR By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CTR Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 179 METRIC_ID, 'Average CPC-Cost per clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The total cost of all clicks divided by the total number of clicks received' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 180 METRIC_ID, 'Average CPC-By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPC Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 181 METRIC_ID, 'Leads' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Number of leads collected through a campaign' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 182 METRIC_ID, 'Cost per Lead' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Amount spent per lead collected' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 183 METRIC_ID, 'Conversions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total number of times people took a desired action after clicking on or seeing your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 184 METRIC_ID, 'Conversions By campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'Conversions listed campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 185 METRIC_ID, 'Cost per conversion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'The Cost attributable to conversion-tracked clicks divided by the number of conversions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 186 METRIC_ID, 'Cost per conversion by campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS \nUnion\nSelect 187 METRIC_ID, 'Total Engagement' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 188 METRIC_ID, 'Total Social Actions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 189 METRIC_ID, 'Clicks to Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nUnion\nSelect 190 METRIC_ID, 'CPM' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 191 METRIC_ID, 'Reach' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion  \nSelect 192 METRIC_ID, 'Frequency' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The average number of times each person saw your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 193 METRIC_ID, 'Cost per action (CPA)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'Cost per action (CPA) allows you to pay only for actions that people take because of your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 194 METRIC_ID, 'Page likes' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'No of likes for page' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from(\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID, 'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF,HS' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE, 'SF' ENTITY_TYPE, '' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, ' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE, 'SF' ENTITY_TYPE, 'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter)' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion    \nSelect 35 METRIC_ID, 'All Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 36 METRIC_ID, 'All deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 37 METRIC_ID, 'Average Time to Close Deal' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 38 METRIC_ID, 'Average Time to Close Deal by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'average' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 39 METRIC_ID, 'Calls' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 40 METRIC_ID, 'Calls & Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 41 METRIC_ID, 'Calls by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 42 METRIC_ID, 'Closed Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 43 METRIC_ID, 'Closed Deals Leaderboard' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 44 METRIC_ID, 'Closed Lost by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 45 METRIC_ID, 'Closed Lost Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 46 METRIC_ID, 'Closed Won Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 47 METRIC_ID, 'Closed Won Deals Amount by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 48 METRIC_ID, 'Closed Won Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 49 METRIC_ID, 'Companies by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 50 METRIC_ID, 'Deals Amount by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 51 METRIC_ID, 'Deals by Deal Type (by Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 52 METRIC_ID, 'Deals by Original Source Data' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 53 METRIC_ID, 'Deals by Original Source Type' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 54 METRIC_ID, 'Deals by Stage (Create Date)' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 55 METRIC_ID, 'Deals by Stage by Created Date' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 56 METRIC_ID, 'Deals Closed Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 57 METRIC_ID, 'Deals Closed Won' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 58 METRIC_ID, 'Deals Closed Won Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Sales Stage is equal to Closed Won' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 59 METRIC_ID, 'Deals Closed Won and Lost' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 60 METRIC_ID, 'Deals Created' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 61 METRIC_ID, 'Deals Created by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 62 METRIC_ID, 'Deals Created by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 63 METRIC_ID, 'Deals Lost by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 64 METRIC_ID, 'Deals Won Amount by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 65 METRIC_ID, 'Deals Won by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 66 METRIC_ID, 'Emails Logged' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 67 METRIC_ID, 'Emails Logged by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 68 METRIC_ID, 'Forecasted Deals by Stage' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 69 METRIC_ID, 'Latest Deal Amount by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 70 METRIC_ID, 'Latest Deal by Name' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 71 METRIC_ID, 'Meetings' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 72 METRIC_ID, 'Meetings by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 73 METRIC_ID, 'New Company by First Conversion' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 74 METRIC_ID, 'New Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 75 METRIC_ID, 'New Deals Created Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,' Creation Date is not equal to empty' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 76 METRIC_ID, 'Notes' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 77 METRIC_ID, 'Notes by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 78 METRIC_ID, 'Open (Unclosed) Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 79 METRIC_ID, 'Open (Unclosed) Deals Amount' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 80 METRIC_ID, 'Open (unclosed) Deals by Owner' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'TRUE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 81 METRIC_ID, 'Open (Unclosed) Deals by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 82 METRIC_ID, 'Open (Unclosed) Deals by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 83 METRIC_ID, 'Open Deals Amount by Stage by Pipeline' METRIC_NAME, 2 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 84 METRIC_ID, '1 Overview' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, '' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 85 METRIC_ID, 'Revenue by Company' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 86 METRIC_ID, 'Sales Leaderboard' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 87 METRIC_ID, 'Sales Performance' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Average Time to Close Deal, All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Lost, Deals Closed Won, Deals Closed Won Amount.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 88 METRIC_ID, 'Sales Pipeline' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'sum' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: All deals, Companies, Contacts (Marketing), Deals Created, Deals Closed Won.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 89 METRIC_ID, 'Tasks Completed' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 90 METRIC_ID, 'Tasks Completed by Owner' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 91 METRIC_ID, 'Top Won Deals' METRIC_NAME, 1 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 92 METRIC_ID, 'Total Contacts (Marketing)' METRIC_NAME, 0 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'count' RESULT_TYPE,'HS' ENTITY_TYPE,'' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 93 METRIC_ID, 'Sessions by Device Type' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of website sessions by device type: desktop, mobile, and tablet (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 94 METRIC_ID, 'Traffic By Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get the number of sessions by channel grouping (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 95 METRIC_ID, 'Sessions by Social Network' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Social Networks.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 96 METRIC_ID, 'Top Pages by Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pageviews to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 97 METRIC_ID, 'Avg. Quantity by Sources' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 98 METRIC_ID, 'Product revenue by Product name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Individual Product Sales during specified Date Range split up by Product Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 99 METRIC_ID, 'Sessions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 100 METRIC_ID, 'Sessions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 101 METRIC_ID, 'Sessions by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 102 METRIC_ID, 'Goal Completion by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 103 METRIC_ID, 'Goal Completion by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 104 METRIC_ID, 'Quantity by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 105 METRIC_ID, 'Quantity by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 106 METRIC_ID, 'Revenue by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 107 METRIC_ID, 'Revenue by landing page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 108 METRIC_ID, 'Goal Completion by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 109 METRIC_ID, 'Sessions by Paid Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Paid Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 110 METRIC_ID, 'Goal Value by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 111 METRIC_ID, 'Revenue by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 112 METRIC_ID, 'Goal Value by Goal' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by Goals.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 113 METRIC_ID, 'Screen Views by Screen Name' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range split up by Screen Name.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 114 METRIC_ID, 'Sessions by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 115 METRIC_ID, 'Sessions by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Count' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 116 METRIC_ID, 'Sessions by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 117 METRIC_ID, 'Goal Completion by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 118 METRIC_ID, 'Top Source/Medium by Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified Date Range split up by Top Sources/Mediums.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 119 METRIC_ID, 'Top Sources By Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 120 METRIC_ID, 'Sessions by Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 121 METRIC_ID, 'Sessions by Top Geo Location' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during the specified date range split up by Geo Location.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 122 METRIC_ID, 'Transactions by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range split up by Channels.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 123 METRIC_ID, 'Goal Value by New vs Returning' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range split up by New vs Returning.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 124 METRIC_ID, 'Transactions by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 125 METRIC_ID, 'Transactions per User by Channel' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by Channels during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 126 METRIC_ID, 'Transactions per User by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions split up by original Source during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 127 METRIC_ID, 'Goal Value by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 128 METRIC_ID, 'Users by Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Landing Page.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 129 METRIC_ID, 'Users by Organic Keyword' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range split up by Organic Keywords.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 130 METRIC_ID, 'Users by Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Users who have initiated at least one Session to each Page during the specified Date Range. This metric is collecting data for the top 500 Pages in the connected Google Analytics Account. To gather data for more than 500 Pages, please use the Query Builder tool.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 131 METRIC_ID, 'Top Events by Sessions by Label' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Total number of Sessions during the specified date range split up by top Events by Label.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 132 METRIC_ID, 'Users by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 133 METRIC_ID, 'Ecommerce Conv Rate by Source' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during the specified Date Range split up by Sources.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 134 METRIC_ID, 'Audience Metrics' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of total monthly users, sessions, and page views (for the last year).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 135 METRIC_ID, 'Impressions, Cost, Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get Google Ads data by distribution network and ad group including impressions, cost, and clicks (for the last 14 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 136 METRIC_ID, 'Organic Search Landing Page Performance (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get a list of landing pages including average time on page, number of users, sessions, and more (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 137 METRIC_ID, 'Web Property Metrics (Last 30 Days)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get daily web property metrics including users, sessions, and page views (for the last 30 days).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 138 METRIC_ID, 'Website Performance' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Get website performance details including users, bounce rate, page views per session, and more (for the last 2 years).' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 139 METRIC_ID, 'Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Users who have initiated at least one Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 140 METRIC_ID, 'Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during specified Date Range. A session is the period time a user is actively engaged with your website, app, etc.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 141 METRIC_ID, '% New Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The Procentage of the Sessions that are created by New Users (first-time visits) during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 142 METRIC_ID, 'New Users' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of First-time Users during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 143 METRIC_ID, 'Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Pages Viewed during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 144 METRIC_ID, 'Pages / Sessions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Number of Pages Viewed during a Session during specified Date Range. Repeated Views of a Single Page are counted.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 145 METRIC_ID, 'Bounce Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Single-Page Sessions in which there was no Interaction with the Page during specified Date Range. A bounced Session has a duration of 0 seconds.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 146 METRIC_ID, 'Screens / Session' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Screens Viewed per Session during specified Date Range. Every View of a Single Screen is counted individually, including repeated Siews of the same Screen.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 147 METRIC_ID, 'Average Session Duration' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Length of a Session during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 148 METRIC_ID, 'Audience Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 149 METRIC_ID, 'Audience Overview (mobile)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Session Duration, Bounce Rate, % New Sessions, Pages / Session, Pageviews, Sessions, Users.This is a multi-metric Datablock with the following metrics: Avg. Session Duration, % New Sessions, Screens / Session, Screen View, Sessions, Users.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 150 METRIC_ID, 'Goal Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Goal Completion, Goal Conversion Rate.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 151 METRIC_ID, 'Goal Completion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Conversions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 152 METRIC_ID, 'Goal Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Sum of all individual Goal Conversion Rates during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 153 METRIC_ID, 'Behavior Overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Time on Page, Bounce Rate, Pageviews, Unique Pageviews.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 154 METRIC_ID, 'Revenue' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Revenue from Web Ecommerce or In-app Transactions during specified Date Range. Depending on your implementation, this can include Tax and Shipping.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 155 METRIC_ID, 'Transactions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Completed Purchases on your Site during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 156 METRIC_ID, 'Ecommerce Conversion Rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Percentage of Sessions that resulted in an Ecommerce Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 157 METRIC_ID, 'Ecommerce overview' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'This is a multi-metric Datablock with the following metrics: Avg. Order Value, Ecommerce Conversion Rate, Revenue, Quantity, Revenue per Visit, Transactions, Unique Purchases.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 158 METRIC_ID, 'Avg. Order Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Value of transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 159 METRIC_ID, 'Avg. Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average number of Products Sold per Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 160 METRIC_ID, 'Avg. revenue per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average amount of Money generated split up by User during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 161 METRIC_ID, 'Unique Purchases' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Times a specified Pooduct (or set of Products) was a part of a Transaction during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 162 METRIC_ID, 'Quantity' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Units Sold in Ecommerce transactions during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 163 METRIC_ID, 'Events' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Events occurred during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 164 METRIC_ID, 'Transactions per user' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Transactions divided by total number of Users during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 165 METRIC_ID, 'Avg. Time on Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Page/Screen, or Set of Pages/Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 166 METRIC_ID, 'Avg. Time on Screen' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Average Amount of Time Users Spent Viewing a specified Screen, or Set of Screens during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 167 METRIC_ID, 'Unique Pageviews' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Sessions during which the specified Page was Viewed at least once. A unique pageview is counted for each page URL + page Title combination.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 168 METRIC_ID, 'Unique Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Unique Screen Views is the number of Sessions during which the specified Screen was Viewed at least once during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 169 METRIC_ID, 'Screen Views' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Number of Screens Viewed. Repeated Views of a Single Screen are counted during specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 170 METRIC_ID, 'Revenue per Visit' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'The amount of Money generated each time a Customer visits your Website during the specified Date Range.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 171 METRIC_ID, 'Goal Value' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'GA' ENTITY_TYPE,'Value produced by Goal Conversions on your Site during specified Date Range. This value is calculated by multiplying the number of Goal Conversionsby the value that you assigned to each Goal.' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 172 METRIC_ID, 'Cost - Total spends' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Amount you spent on ads impressions or interactions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nUnion\nSelect 173 METRIC_ID, 'Clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total chargeable clicks based on campaigns objective' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 174 METRIC_ID, 'Clicks by ad' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Total chargeable clicks by ad wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 175 METRIC_ID, 'Impressions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Number of times people seen the ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 176 METRIC_ID, 'Impressions by campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Impression campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 177 METRIC_ID, 'CTR -Click Through rate' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Percentage of chargeable clicks relative to impressions (clicks divided by impressions)' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 178 METRIC_ID, 'CTR By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CTR Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 179 METRIC_ID, 'Average CPC-Cost per clicks' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The total cost of all clicks divided by the total number of clicks received' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 180 METRIC_ID, 'Average CPC-By campaigns' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPC Campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 181 METRIC_ID, 'Leads' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Number of leads collected through a campaign' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 182 METRIC_ID, 'Cost per Lead' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LINKEDIN' ENTITY_TYPE,'Amount spent per lead collected' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 183 METRIC_ID, 'Conversions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Total number of times people took a desired action after clicking on or seeing your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 184 METRIC_ID, 'Conversions By campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'Conversions listed campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 185 METRIC_ID, 'Cost per conversion' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,GAADS' ENTITY_TYPE,'The Cost attributable to conversion-tracked clicks divided by the number of conversions' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 186 METRIC_ID, 'Cost per conversion by campaign' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS \nUnion\nSelect 187 METRIC_ID, 'Total Engagement' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 188 METRIC_ID, 'Total Social Actions' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 189 METRIC_ID, 'Clicks to Landing Page' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, 'TRUE' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'Cost per conversion by campaign wise' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nUnion\nSelect 190 METRIC_ID, 'CPM' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'LIADS,FBADS,GAADS' ENTITY_TYPE,'CPM measures the total amount spent on an advertising campaign, divided by the number of impressions and multiplied by 1,000' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 191 METRIC_ID, 'Reach' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The number of people who saw your ads at least once. Reach is different from impressions, which may include multiple views of your ads by the same people' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion  \nSelect 192 METRIC_ID, 'Frequency' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'The average number of times each person saw your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 193 METRIC_ID, 'Cost per action (CPA)' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'Cost per action (CPA) allows you to pay only for actions that people take because of your ad' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS  \nUnion\nSelect 194 METRIC_ID, 'Page likes' METRIC_NAME, 10 METRIC_CATEGORY_ID,  'FALSE' POINT_IN_TIME, 'TRUE' ACTIVE_FLAG, '' SEGMENT_FLAG, 'Sum' RESULT_TYPE,'FBADS' ENTITY_TYPE,'No of likes for page' METRICCRITERIA,'' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)"}, "error": null, "status": "SUCCESS 1", "execution_time": 4.777263164520264, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:05.922887Z", "completed_at": "2021-05-19T00:53:05.978548Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:05.978878Z", "completed_at": "2021-05-19T00:53:10.274101Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~ \" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS ACC_ID,\r\nNOTIFIED_ON_CREATIVE_REJECTION,\r\nTYPE,\r\nNOTIFIED_ON_CREATIVE_APPROVAL,\r\nID,\r\nLAST_MODIFIED_TIME,\r\nNAME,\r\nCREATED_TIME,\r\nNOTIFIED_ON_CAMPAIGN_OPTIMIZATION,\r\nNOTIFIED_ON_END_OF_CAMPAIGN,\r\nSTATUS,\r\nREFERENCE,\r\nCURRENCY,\r\nVERSION_TAG,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.ACCOUNT_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS NOTIFIED_ON_CREATIVE_REJECTION,\r\n       NULL AS TYPE,\r\n       NULL AS NOTIFIED_ON_CREATIVE_APPROVAL,\r\n       NULL AS ID,\r\n       NULL AS LAST_MODIFIED_TIME,\r\n       NULL AS NAME,\r\n       NULL AS CREATED_TIME,\r\n       NULL AS NOTIFIED_ON_CAMPAIGN_OPTIMIZATION,\r\n       NULL AS NOTIFIED_ON_END_OF_CAMPAIGN,\r\n       NULL AS STATUS,\r\n       NULL AS REFERENCE,\r\n       NULL AS CURRENCY,\r\n       NULL AS VERSION_TAG,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Account_History"], "unique_id": "model.sales_dataflo.Stg_Account_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Account_History.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Account_History.sql", "name": "Stg_Account_History", "resource_type": "model", "alias": "Stg_Account_History", "checksum": {"name": "sha256", "checksum": "04ff28783d795c128e1b7334743113f226c327e709c60a82b035591fd94705a3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Account_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\nNOTIFIED_ON_CREATIVE_REJECTION,\nTYPE,\nNOTIFIED_ON_CREATIVE_APPROVAL,\nID,\nLAST_MODIFIED_TIME,\nNAME,\nCREATED_TIME,\nNOTIFIED_ON_CAMPAIGN_OPTIMIZATION,\nNOTIFIED_ON_END_OF_CAMPAIGN,\nSTATUS,\nREFERENCE,\nCURRENCY,\nVERSION_TAG,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.ACCOUNT_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\nNOTIFIED_ON_CREATIVE_REJECTION,\nTYPE,\nNOTIFIED_ON_CREATIVE_APPROVAL,\nID,\nLAST_MODIFIED_TIME,\nNAME,\nCREATED_TIME,\nNOTIFIED_ON_CAMPAIGN_OPTIMIZATION,\nNOTIFIED_ON_END_OF_CAMPAIGN,\nSTATUS,\nREFERENCE,\nCURRENCY,\nVERSION_TAG,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.ACCOUNT_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7677149772644043, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:10.703144Z", "completed_at": "2021-05-19T00:53:12.134078Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:12.134574Z", "completed_at": "2021-05-19T00:53:13.052488Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CAMP_GRP_ID,\r\n        BACKFILLED,\r\n        STATUS,\r\n        LAST_MODIFIED_TIME,\r\n        RUN_SCHEDULE_START,\r\n        ACCOUNT_ID,\r\n        ID,\r\n        NAME,\r\n        RUN_SCHEDULE_END,\r\n        CREATED_TIME,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CAMPAIGN_GROUP_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\nNULL AS BACKFILLED,\r\nNULL AS STATUS,\r\nNULL AS LAST_MODIFIED_TIME,\r\nNULL AS RUN_SCHEDULE_START,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS ID,\r\nNULL AS NAME,\r\nNULL AS RUN_SCHEDULE_END,\r\nNULL AS CREATED_TIME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Campaign_Group_History"], "unique_id": "model.sales_dataflo.Stg_Campaign_Group_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Campaign_Group_History.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Campaign_Group_History.sql", "name": "Stg_Campaign_Group_History", "resource_type": "model", "alias": "Stg_Campaign_Group_History", "checksum": {"name": "sha256", "checksum": "d9996dd52c1b7114ab6d469269ce53aa189d2e623705e286f480d772deecc8cc"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Campaign_Group_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CAMP_GRP_ID,\n        BACKFILLED,\n        STATUS,\n        LAST_MODIFIED_TIME,\n        RUN_SCHEDULE_START,\n        ACCOUNT_ID,\n        ID,\n        NAME,\n        RUN_SCHEDULE_END,\n        CREATED_TIME,\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CAMPAIGN_GROUP_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CAMP_GRP_ID,\n        BACKFILLED,\n        STATUS,\n        LAST_MODIFIED_TIME,\n        RUN_SCHEDULE_START,\n        ACCOUNT_ID,\n        ID,\n        NAME,\n        RUN_SCHEDULE_END,\n        CREATED_TIME,\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CAMPAIGN_GROUP_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5851855278015137, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:13.473409Z", "completed_at": "2021-05-19T00:53:14.735891Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:14.736200Z", "completed_at": "2021-05-19T00:53:15.634000Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CAMP_ID,\r\n       ID,\r\nLOCALE_LANGUAGE,\r\nFORMAT,\r\nLOCALE_COUNTRY,\r\nLAST_MODIFIED_TIME,\r\nOPTIMIZATION_TARGET_TYPE,\r\nVERSION_TAG,\r\nOFFSITE_DELIVERY_ENABLED,\r\nDAILY_BUDGET_AMOUNT,\r\nSTATUS,\r\nCREATED_TIME,\r\nCOST_TYPE,\r\nRUN_SCHEDULE_START,\r\nUNIT_COST_CURRENCY_CODE,\r\nASSOCIATED_ENTITY,\r\nAUDIENCE_EXPANSION_ENABLED,\r\nCAMPAIGN_GROUP_ID,\r\nDAILY_BUDGET_CURRENCY_CODE,\r\nUNIT_COST_AMOUNT,\r\nTYPE,\r\nACCOUNT_ID,\r\nCREATIVE_SELECTION,\r\nNAME,\r\nOBJECTIVE_TYPE,\r\nRUN_SCHEDULE_END,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CAMPAIGN_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS ID,\r\nNULL AS LOCALE_LANGUAGE,\r\nNULL AS FORMAT,\r\nNULL AS LOCALE_COUNTRY,\r\nNULL AS LAST_MODIFIED_TIME,\r\nNULL AS OPTIMIZATION_TARGET_TYPE,\r\nNULL AS VERSION_TAG,\r\nNULL AS OFFSITE_DELIVERY_ENABLED,\r\nNULL AS DAILY_BUDGET_AMOUNT,\r\nNULL AS STATUS,\r\nNULL AS CREATED_TIME,\r\nNULL AS COST_TYPE,\r\nNULL AS RUN_SCHEDULE_START,\r\nNULL AS UNIT_COST_CURRENCY_CODE,\r\nNULL AS ASSOCIATED_ENTITY,\r\nNULL AS AUDIENCE_EXPANSION_ENABLED,\r\nNULL AS CAMPAIGN_GROUP_ID,\r\nNULL AS DAILY_BUDGET_CURRENCY_CODE,\r\nNULL AS UNIT_COST_AMOUNT,\r\nNULL AS TYPE,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS CREATIVE_SELECTION,\r\nNULL AS NAME,\r\nNULL AS OBJECTIVE_TYPE,\r\nNULL AS RUN_SCHEDULE_END,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Campaign_History"], "unique_id": "model.sales_dataflo.Stg_Campaign_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Campaign_History.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Campaign_History.sql", "name": "Stg_Campaign_History", "resource_type": "model", "alias": "Stg_Campaign_History", "checksum": {"name": "sha256", "checksum": "698c6e45e1fa0c08d5d5749ac58a1ddceb16f3847ec92e88ea031c5a8cc7edf0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Campaign_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CAMP_ID,\n       ID,\nLOCALE_LANGUAGE,\nFORMAT,\nLOCALE_COUNTRY,\nLAST_MODIFIED_TIME,\nOPTIMIZATION_TARGET_TYPE,\nVERSION_TAG,\nOFFSITE_DELIVERY_ENABLED,\nDAILY_BUDGET_AMOUNT,\nSTATUS,\nCREATED_TIME,\nCOST_TYPE,\nRUN_SCHEDULE_START,\nUNIT_COST_CURRENCY_CODE,\nASSOCIATED_ENTITY,\nAUDIENCE_EXPANSION_ENABLED,\nCAMPAIGN_GROUP_ID,\nDAILY_BUDGET_CURRENCY_CODE,\nUNIT_COST_AMOUNT,\nTYPE,\nACCOUNT_ID,\nCREATIVE_SELECTION,\nNAME,\nOBJECTIVE_TYPE,\nRUN_SCHEDULE_END,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CAMPAIGN_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CAMP_ID,\n       ID,\nLOCALE_LANGUAGE,\nFORMAT,\nLOCALE_COUNTRY,\nLAST_MODIFIED_TIME,\nOPTIMIZATION_TARGET_TYPE,\nVERSION_TAG,\nOFFSITE_DELIVERY_ENABLED,\nDAILY_BUDGET_AMOUNT,\nSTATUS,\nCREATED_TIME,\nCOST_TYPE,\nRUN_SCHEDULE_START,\nUNIT_COST_CURRENCY_CODE,\nASSOCIATED_ENTITY,\nAUDIENCE_EXPANSION_ENABLED,\nCAMPAIGN_GROUP_ID,\nDAILY_BUDGET_CURRENCY_CODE,\nUNIT_COST_AMOUNT,\nTYPE,\nACCOUNT_ID,\nCREATIVE_SELECTION,\nNAME,\nOBJECTIVE_TYPE,\nRUN_SCHEDULE_END,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CAMPAIGN_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5834600925445557, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:16.061158Z", "completed_at": "2021-05-19T00:53:17.319085Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:17.319374Z", "completed_at": "2021-05-19T00:53:18.223807Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CRE_ID,\r\n       SPONSORED_UPDATE_SHARE_CONTENT_TITLE,\r\nSPOTLIGHT_CALL_TO_ACTION,\r\nJOBS_LOGO,\r\nSPONSORED_UPDATE_CAROUSEL_DIRECT_SPONSORED_CONTENT,\r\nSPOTLIGHT_DESCRIPTION,\r\nCALL_TO_ACTION_LABEL_TYPE,\r\nJOBS_ORGANIZATION,\r\nSPONSORED_VIDEO_MEDIA_ASSET,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_DESCRIPTION,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE_SUBJECT,\r\nTEXT_AD_TEXT,\r\nFOLLOW_COMPANY_ORGANIZATION_NAME,\r\nREVIEW_STATUS,\r\nREFERENCE,\r\nVERSION_TAG,\r\nSPOTLIGHT_HEADLINE,\r\nCAMPAIGN_ID,\r\nSPOTLIGHT_LOGO,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\r\nID,\r\nSPONSORED_UPDATE_SHARE,\r\nSPONSORED_UPDATE_SHARE_SUBJECT,\r\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_TITLE,\r\nSPOTLIGHT_CUSTOM_BACKGROUND,\r\nCREATED_TIME,\r\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST_VALUE_SPECIFIC_CONTENT_SHARE_CONTENT_MEDIA,\r\nSPONSORED_UPDATE_DIRECT_SPONSORED_CONTENT,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_CONTENT_ENTITIES,\r\nTYPE,\r\nSPONSORED_UPDATE_ACTIVITY,\r\nJOBS_COMPANY_NAME,\r\nFOLLOW_COMPANY_ORGANIZATION_LOGO,\r\nSPONSORED_UPDATE_CAROUSEL_SHARE,\r\nSPONSORED_UPDATE_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\r\nLAST_MODIFIED_TIME,\r\nTEXT_AD_TITLE,\r\nSPONSORED_UPDATE_CAROUSEL_ACTIVITY,\r\nSPOTLIGHT_SHOW_MEMBER_PROFILE_PHOTO,\r\nSPONSORED_IN_MAIL_CONTENT,\r\nSPONSORED_UPDATE_SHARE_CONTENT_DESCRIPTION,\r\nSTATUS,\r\nFOLLOW_COMPANY_CALL_TO_ACTION,\r\nSPONSORED_UPDATE_SHARE_CONTENT_CONTENT_ENTITIES,\r\nCALL_TO_ACTION_TARGET,\r\nCLICK_URI,\r\nSPOTLIGHT_FORUM_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CREATIVE_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS SPONSORED_UPDATE_SHARE_CONTENT_TITLE,\r\nNULL AS SPOTLIGHT_CALL_TO_ACTION,\r\nNULL AS JOBS_LOGO,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_DIRECT_SPONSORED_CONTENT,\r\nNULL AS SPOTLIGHT_DESCRIPTION,\r\nNULL AS CALL_TO_ACTION_LABEL_TYPE,\r\nNULL AS JOBS_ORGANIZATION,\r\nNULL AS SPONSORED_VIDEO_MEDIA_ASSET,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_DESCRIPTION,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE_SUBJECT,\r\nNULL AS TEXT_AD_TEXT,\r\nNULL AS FOLLOW_COMPANY_ORGANIZATION_NAME,\r\nNULL AS REVIEW_STATUS,\r\nNULL AS REFERENCE,\r\nNULL AS VERSION_TAG,\r\nNULL AS SPOTLIGHT_HEADLINE,\r\nNULL AS CAMPAIGN_ID,\r\nNULL AS SPOTLIGHT_LOGO,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\r\nNULL AS ID,\r\nNULL AS SPONSORED_UPDATE_SHARE,\r\nNULL AS SPONSORED_UPDATE_SHARE_SUBJECT,\r\nNULL AS SPONSORED_VIDEO_USER_GENERATED_CONTENT_POST,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_TITLE,\r\nNULL AS SPOTLIGHT_CUSTOM_BACKGROUND,\r\nNULL AS CREATED_TIME,\r\nNULL AS SPONSORED_VIDEO_USER_GENERATED_CONTENT_POST_VALUE_SPECIFIC_CONTENT_SHARE_CONTENT_MEDIA,\r\nNULL AS SPONSORED_UPDATE_DIRECT_SPONSORED_CONTENT,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_CONTENT_ENTITIES,\r\nNULL AS TYPE,\r\nNULL AS SPONSORED_UPDATE_ACTIVITY,\r\nNULL AS JOBS_COMPANY_NAME,\r\nNULL AS FOLLOW_COMPANY_ORGANIZATION_LOGO,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_SHARE,\r\nNULL AS SPONSORED_UPDATE_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\r\nNULL AS LAST_MODIFIED_TIME,\r\nNULL AS TEXT_AD_TITLE,\r\nNULL AS SPONSORED_UPDATE_CAROUSEL_ACTIVITY,\r\nNULL AS SPOTLIGHT_SHOW_MEMBER_PROFILE_PHOTO,\r\nNULL AS SPONSORED_IN_MAIL_CONTENT,\r\nNULL AS SPONSORED_UPDATE_SHARE_CONTENT_DESCRIPTION,\r\nNULL AS STATUS,\r\nNULL AS FOLLOW_COMPANY_CALL_TO_ACTION,\r\nNULL AS SPONSORED_UPDATE_SHARE_CONTENT_CONTENT_ENTITIES,\r\nNULL AS CALL_TO_ACTION_TARGET,\r\nNULL AS CLICK_URI,\r\nNULL AS SPOTLIGHT_FORUM_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Creative_History"], "unique_id": "model.sales_dataflo.Stg_Creative_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Creative_History.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Creative_History.sql", "name": "Stg_Creative_History", "resource_type": "model", "alias": "Stg_Creative_History", "checksum": {"name": "sha256", "checksum": "c2f4b865efab82a32f1cd82c2f874df52e80a9d5f2731bbbcba789d93316e3a1"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Creative_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CRE_ID,\n       SPONSORED_UPDATE_SHARE_CONTENT_TITLE,\nSPOTLIGHT_CALL_TO_ACTION,\nJOBS_LOGO,\nSPONSORED_UPDATE_CAROUSEL_DIRECT_SPONSORED_CONTENT,\nSPOTLIGHT_DESCRIPTION,\nCALL_TO_ACTION_LABEL_TYPE,\nJOBS_ORGANIZATION,\nSPONSORED_VIDEO_MEDIA_ASSET,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_DESCRIPTION,\nSPONSORED_UPDATE_CAROUSEL_SHARE_SUBJECT,\nTEXT_AD_TEXT,\nFOLLOW_COMPANY_ORGANIZATION_NAME,\nREVIEW_STATUS,\nREFERENCE,\nVERSION_TAG,\nSPOTLIGHT_HEADLINE,\nCAMPAIGN_ID,\nSPOTLIGHT_LOGO,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\nID,\nSPONSORED_UPDATE_SHARE,\nSPONSORED_UPDATE_SHARE_SUBJECT,\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_TITLE,\nSPOTLIGHT_CUSTOM_BACKGROUND,\nCREATED_TIME,\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST_VALUE_SPECIFIC_CONTENT_SHARE_CONTENT_MEDIA,\nSPONSORED_UPDATE_DIRECT_SPONSORED_CONTENT,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_CONTENT_ENTITIES,\nTYPE,\nSPONSORED_UPDATE_ACTIVITY,\nJOBS_COMPANY_NAME,\nFOLLOW_COMPANY_ORGANIZATION_LOGO,\nSPONSORED_UPDATE_CAROUSEL_SHARE,\nSPONSORED_UPDATE_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\nLAST_MODIFIED_TIME,\nTEXT_AD_TITLE,\nSPONSORED_UPDATE_CAROUSEL_ACTIVITY,\nSPOTLIGHT_SHOW_MEMBER_PROFILE_PHOTO,\nSPONSORED_IN_MAIL_CONTENT,\nSPONSORED_UPDATE_SHARE_CONTENT_DESCRIPTION,\nSTATUS,\nFOLLOW_COMPANY_CALL_TO_ACTION,\nSPONSORED_UPDATE_SHARE_CONTENT_CONTENT_ENTITIES,\nCALL_TO_ACTION_TARGET,\nCLICK_URI,\nSPOTLIGHT_FORUM_NAME,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CREATIVE_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CRE_ID,\n       SPONSORED_UPDATE_SHARE_CONTENT_TITLE,\nSPOTLIGHT_CALL_TO_ACTION,\nJOBS_LOGO,\nSPONSORED_UPDATE_CAROUSEL_DIRECT_SPONSORED_CONTENT,\nSPOTLIGHT_DESCRIPTION,\nCALL_TO_ACTION_LABEL_TYPE,\nJOBS_ORGANIZATION,\nSPONSORED_VIDEO_MEDIA_ASSET,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_DESCRIPTION,\nSPONSORED_UPDATE_CAROUSEL_SHARE_SUBJECT,\nTEXT_AD_TEXT,\nFOLLOW_COMPANY_ORGANIZATION_NAME,\nREVIEW_STATUS,\nREFERENCE,\nVERSION_TAG,\nSPOTLIGHT_HEADLINE,\nCAMPAIGN_ID,\nSPOTLIGHT_LOGO,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\nID,\nSPONSORED_UPDATE_SHARE,\nSPONSORED_UPDATE_SHARE_SUBJECT,\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_TITLE,\nSPOTLIGHT_CUSTOM_BACKGROUND,\nCREATED_TIME,\nSPONSORED_VIDEO_USER_GENERATED_CONTENT_POST_VALUE_SPECIFIC_CONTENT_SHARE_CONTENT_MEDIA,\nSPONSORED_UPDATE_DIRECT_SPONSORED_CONTENT,\nSPONSORED_UPDATE_CAROUSEL_SHARE_CONTENT_CONTENT_ENTITIES,\nTYPE,\nSPONSORED_UPDATE_ACTIVITY,\nJOBS_COMPANY_NAME,\nFOLLOW_COMPANY_ORGANIZATION_LOGO,\nSPONSORED_UPDATE_CAROUSEL_SHARE,\nSPONSORED_UPDATE_SHARE_CONTENT_SHARE_MEDIA_CATEGORY,\nLAST_MODIFIED_TIME,\nTEXT_AD_TITLE,\nSPONSORED_UPDATE_CAROUSEL_ACTIVITY,\nSPOTLIGHT_SHOW_MEMBER_PROFILE_PHOTO,\nSPONSORED_IN_MAIL_CONTENT,\nSPONSORED_UPDATE_SHARE_CONTENT_DESCRIPTION,\nSTATUS,\nFOLLOW_COMPANY_CALL_TO_ACTION,\nSPONSORED_UPDATE_SHARE_CONTENT_CONTENT_ENTITIES,\nCALL_TO_ACTION_TARGET,\nCLICK_URI,\nSPOTLIGHT_FORUM_NAME,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.CREATIVE_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5778064727783203, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:18.647336Z", "completed_at": "2021-05-19T00:53:19.905590Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:19.905919Z", "completed_at": "2021-05-19T00:53:20.803500Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key(['day','creative_id']) }} as daily_creative_id,\r\nSHARES,\r\nCOMPANY_PAGE_CLICKS,\r\nVIRAL_SHARES,\r\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nOTHER_ENGAGEMENTS,\r\nVIRAL_CARD_CLICKS,\r\nVIDEO_VIEWS,\r\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\r\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nVIRAL_ONE_CLICK_LEADS,\r\nCARD_CLICKS,\r\nVIDEO_MIDPOINT_COMPLETIONS,\r\nVIDEO_COMPLETIONS,\r\nVIRAL_IMPRESSIONS,\r\nVIRAL_COMMENT_LIKES,\r\nVIRAL_LANDING_PAGE_CLICKS,\r\nFULL_SCREEN_PLAYS,\r\nVIDEO_STARTS,\r\nVIRAL_COMMENTS,\r\nLIKES,\r\nVIRAL_OTHER_ENGAGEMENTS,\r\nDAY,\r\nVIRAL_FULL_SCREEN_PLAYS,\r\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\r\nCOMMENT_LIKES,\r\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nCOST_IN_LOCAL_CURRENCY,\r\nONE_CLICK_LEADS,\r\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\r\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\r\nOPENS,\r\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nVIRAL_CLICKS,\r\nEXTERNAL_WEBSITE_CONVERSIONS,\r\nVIRAL_CARD_IMPRESSIONS,\r\nONE_CLICK_LEAD_FORM_OPENS,\r\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nCREATIVE_ID,\r\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nVIRAL_VIDEO_VIEWS,\r\nLANDING_PAGE_CLICKS,\r\nACTION_CLICKS,\r\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\r\nCOST_IN_USD,\r\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\r\nVIRAL_TOTAL_ENGAGEMENTS,\r\nVIRAL_VIDEO_STARTS,\r\nCLICKS,\r\nLEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\r\nTEXT_URL_CLICKS,\r\nVIRAL_LIKES,\r\nIMPRESSIONS,\r\nAD_UNIT_CLICKS,\r\nCARD_IMPRESSIONS,\r\nVIRAL_FOLLOWS,\r\nFOLLOWS,\r\nTOTAL_ENGAGEMENTS,\r\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nCOMMENTS,\r\nVIRAL_COMPANY_PAGE_CLICKS,\r\nVIRAL_VIDEO_COMPLETIONS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_ANALYTICS_BY_CREATIVE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS SHARES,\r\nNULL AS COMPANY_PAGE_CLICKS,\r\nNULL AS VIRAL_SHARES,\r\nNULL AS VIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nNULL AS OTHER_ENGAGEMENTS,\r\nNULL AS VIRAL_CARD_CLICKS,\r\nNULL AS VIDEO_VIEWS,\r\nNULL AS VIRAL_VIDEO_MIDPOINT_COMPLETIONS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nNULL AS VIRAL_ONE_CLICK_LEADS,\r\nNULL AS CARD_CLICKS,\r\nNULL AS VIDEO_MIDPOINT_COMPLETIONS,\r\nNULL AS VIDEO_COMPLETIONS,\r\nNULL AS VIRAL_IMPRESSIONS,\r\nNULL AS VIRAL_COMMENT_LIKES,\r\nNULL AS VIRAL_LANDING_PAGE_CLICKS,\r\nNULL AS FULL_SCREEN_PLAYS,\r\nNULL AS VIDEO_STARTS,\r\nNULL AS VIRAL_COMMENTS,\r\nNULL AS LIKES,\r\nNULL AS VIRAL_OTHER_ENGAGEMENTS,\r\nNULL AS DAY,\r\nNULL AS VIRAL_FULL_SCREEN_PLAYS,\r\nNULL AS APPROXIMATE_UNIQUE_IMPRESSIONS,\r\nNULL AS COMMENT_LIKES,\r\nNULL AS EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nNULL AS COST_IN_LOCAL_CURRENCY,\r\nNULL AS ONE_CLICK_LEADS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\r\nNULL AS LEAD_GENERATION_MAIL_INTERESTED_CLICKS,\r\nNULL AS OPENS,\r\nNULL AS VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nNULL AS VIRAL_CLICKS,\r\nNULL AS EXTERNAL_WEBSITE_CONVERSIONS,\r\nNULL AS VIRAL_CARD_IMPRESSIONS,\r\nNULL AS ONE_CLICK_LEAD_FORM_OPENS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nNULL AS CREATIVE_ID,\r\nNULL AS EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nNULL AS VIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nNULL AS VIRAL_VIDEO_VIEWS,\r\nNULL AS LANDING_PAGE_CLICKS,\r\nNULL AS ACTION_CLICKS,\r\nNULL AS CONVERSION_VALUE_IN_LOCAL_CURRENCY,\r\nNULL AS COST_IN_USD,\r\nNULL AS VIRAL_ONE_CLICK_LEAD_FORM_OPENS,\r\nNULL AS VIRAL_TOTAL_ENGAGEMENTS,\r\nNULL AS VIRAL_VIDEO_STARTS,\r\nNULL AS CLICKS,\r\nNULL AS LEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\r\nNULL AS TEXT_URL_CLICKS,\r\nNULL AS VIRAL_LIKES,\r\nNULL AS IMPRESSIONS,\r\nNULL AS AD_UNIT_CLICKS,\r\nNULL AS CARD_IMPRESSIONS,\r\nNULL AS VIRAL_FOLLOWS,\r\nNULL AS FOLLOWS,\r\nNULL AS TOTAL_ENGAGEMENTS,\r\nNULL AS VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nNULL AS COMMENTS,\r\nNULL AS VIRAL_COMPANY_PAGE_CLICKS,\r\nNULL AS VIRAL_VIDEO_COMPLETIONS,\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Ad_Analytics_By_Creative"], "unique_id": "model.sales_dataflo.Stg_Ad_Analytics_By_Creative", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Creative.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Creative.sql", "name": "Stg_Ad_Analytics_By_Creative", "resource_type": "model", "alias": "Stg_Ad_Analytics_By_Creative", "checksum": {"name": "sha256", "checksum": "f09f12103172a808dae97f8752cd3d38473137e9a5b266e90b37414422252cb2"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Creative.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(day as \n    varchar\n), '') || '-' || coalesce(cast(creative_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as daily_creative_id,\nSHARES,\nCOMPANY_PAGE_CLICKS,\nVIRAL_SHARES,\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\nOTHER_ENGAGEMENTS,\nVIRAL_CARD_CLICKS,\nVIDEO_VIEWS,\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_ONE_CLICK_LEADS,\nCARD_CLICKS,\nVIDEO_MIDPOINT_COMPLETIONS,\nVIDEO_COMPLETIONS,\nVIRAL_IMPRESSIONS,\nVIRAL_COMMENT_LIKES,\nVIRAL_LANDING_PAGE_CLICKS,\nFULL_SCREEN_PLAYS,\nVIDEO_STARTS,\nVIRAL_COMMENTS,\nLIKES,\nVIRAL_OTHER_ENGAGEMENTS,\nDAY,\nVIRAL_FULL_SCREEN_PLAYS,\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\nCOMMENT_LIKES,\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nCOST_IN_LOCAL_CURRENCY,\nONE_CLICK_LEADS,\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\nOPENS,\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\nVIRAL_CLICKS,\nEXTERNAL_WEBSITE_CONVERSIONS,\nVIRAL_CARD_IMPRESSIONS,\nONE_CLICK_LEAD_FORM_OPENS,\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nCREATIVE_ID,\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIRAL_VIDEO_VIEWS,\nLANDING_PAGE_CLICKS,\nACTION_CLICKS,\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\nCOST_IN_USD,\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\nVIRAL_TOTAL_ENGAGEMENTS,\nVIRAL_VIDEO_STARTS,\nCLICKS,\nLEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\nTEXT_URL_CLICKS,\nVIRAL_LIKES,\nIMPRESSIONS,\nAD_UNIT_CLICKS,\nCARD_IMPRESSIONS,\nVIRAL_FOLLOWS,\nFOLLOWS,\nTOTAL_ENGAGEMENTS,\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\nCOMMENTS,\nVIRAL_COMPANY_PAGE_CLICKS,\nVIRAL_VIDEO_COMPLETIONS,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.AD_ANALYTICS_BY_CREATIVE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(day as \n    varchar\n), '') || '-' || coalesce(cast(creative_id as \n    varchar\n), '')\n\n as \n    varchar\n)) as daily_creative_id,\nSHARES,\nCOMPANY_PAGE_CLICKS,\nVIRAL_SHARES,\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\nOTHER_ENGAGEMENTS,\nVIRAL_CARD_CLICKS,\nVIDEO_VIEWS,\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_ONE_CLICK_LEADS,\nCARD_CLICKS,\nVIDEO_MIDPOINT_COMPLETIONS,\nVIDEO_COMPLETIONS,\nVIRAL_IMPRESSIONS,\nVIRAL_COMMENT_LIKES,\nVIRAL_LANDING_PAGE_CLICKS,\nFULL_SCREEN_PLAYS,\nVIDEO_STARTS,\nVIRAL_COMMENTS,\nLIKES,\nVIRAL_OTHER_ENGAGEMENTS,\nDAY,\nVIRAL_FULL_SCREEN_PLAYS,\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\nCOMMENT_LIKES,\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nCOST_IN_LOCAL_CURRENCY,\nONE_CLICK_LEADS,\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\nOPENS,\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\nVIRAL_CLICKS,\nEXTERNAL_WEBSITE_CONVERSIONS,\nVIRAL_CARD_IMPRESSIONS,\nONE_CLICK_LEAD_FORM_OPENS,\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nCREATIVE_ID,\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIRAL_VIDEO_VIEWS,\nLANDING_PAGE_CLICKS,\nACTION_CLICKS,\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\nCOST_IN_USD,\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\nVIRAL_TOTAL_ENGAGEMENTS,\nVIRAL_VIDEO_STARTS,\nCLICKS,\nLEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\nTEXT_URL_CLICKS,\nVIRAL_LIKES,\nIMPRESSIONS,\nAD_UNIT_CLICKS,\nCARD_IMPRESSIONS,\nVIRAL_FOLLOWS,\nFOLLOWS,\nTOTAL_ENGAGEMENTS,\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\nCOMMENTS,\nVIRAL_COMPANY_PAGE_CLICKS,\nVIRAL_VIDEO_COMPLETIONS,\n\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021.AD_ANALYTICS_BY_CREATIVE\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.76789927482605, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:21.227808Z", "completed_at": "2021-05-19T00:53:22.648888Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:22.649178Z", "completed_at": "2021-05-19T00:53:23.567510Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ACC_ID,\r\n        IMPRESSIONS,\r\n        _FIVETRAN_SYNCED,\r\n        EFFECTIVE_FINAL_URL,\r\n        CUSTOMER_ID,\r\n        ACCOUNT_DESCRIPTIVE_NAME account_name,\r\n        COST,\r\n        CAMPAIGN_STATUS,\r\n        CLICKS,\r\n        AD_GROUP_STATUS,\r\n        AD_GROUP_NAME,\r\n        DATE,\r\n        CAMPAIGN_NAME,\r\n        _FIVETRAN_ID,\r\n        CAMPAIGN_ID,\r\n        AD_GROUP_ID,\r\n        EXTERNAL_CUSTOMER_ID,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.FINAL_URL_PERFORMANCE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       Null As IMPRESSIONS,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As EFFECTIVE_FINAL_URL,\r\nNull As CUSTOMER_ID,\r\nNull As ACCOUNT_DESCRIPTIVE_NAME,\r\nNull As COST,\r\nNull As CAMPAIGN_STATUS,\r\nNull As CLICKS,\r\nNull As AD_GROUP_STATUS,\r\nNull As AD_GROUP_NAME,\r\nNull As DATE,\r\nNull As CAMPAIGN_NAME,\r\nNull As _FIVETRAN_ID,\r\nNull As CAMPAIGN_ID,\r\nNull As AD_GROUP_ID,\r\nNull As EXTERNAL_CUSTOMER_ID,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Final_URL_Performance"], "unique_id": "model.sales_dataflo.Stg_Final_URL_Performance", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Final_URL_Performance.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Final_URL_Performance.sql", "name": "Stg_Final_URL_Performance", "resource_type": "model", "alias": "Stg_Final_URL_Performance", "checksum": {"name": "sha256", "checksum": "5214f8bbcf7f625450625f287462c2787e7aee7e3288ec470d1704d0a616c4be"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Final_URL_Performance.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n        IMPRESSIONS,\n        _FIVETRAN_SYNCED,\n        EFFECTIVE_FINAL_URL,\n        CUSTOMER_ID,\n        ACCOUNT_DESCRIPTIVE_NAME account_name,\n        COST,\n        CAMPAIGN_STATUS,\n        CLICKS,\n        AD_GROUP_STATUS,\n        AD_GROUP_NAME,\n        DATE,\n        CAMPAIGN_NAME,\n        _FIVETRAN_ID,\n        CAMPAIGN_ID,\n        AD_GROUP_ID,\n        EXTERNAL_CUSTOMER_ID,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.FINAL_URL_PERFORMANCE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n        IMPRESSIONS,\n        _FIVETRAN_SYNCED,\n        EFFECTIVE_FINAL_URL,\n        CUSTOMER_ID,\n        ACCOUNT_DESCRIPTIVE_NAME account_name,\n        COST,\n        CAMPAIGN_STATUS,\n        CLICKS,\n        AD_GROUP_STATUS,\n        AD_GROUP_NAME,\n        DATE,\n        CAMPAIGN_NAME,\n        _FIVETRAN_ID,\n        CAMPAIGN_ID,\n        AD_GROUP_ID,\n        EXTERNAL_CUSTOMER_ID,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.FINAL_URL_PERFORMANCE\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7312936782836914, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:23.998218Z", "completed_at": "2021-05-19T00:53:25.412083Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:25.412394Z", "completed_at": "2021-05-19T00:53:26.304908Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"ad_reporting__facebook_ads_enabled\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ACC_HIS_ID,\r\n        AGENCY_CLIENT_DECLARATION_CLIENT_POSTAL_CODE,\r\nAMOUNT_SPENT,\r\nCREATED_TIME,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_COUNTRY_CODE,\r\nBUSINESS_STATE,\r\n_FIVETRAN_ID,\r\nEND_ADVERTISER,\r\nMEDIA_AGENCY,\r\nIO_NUMBER,\r\nOWNER,\r\nBUSINESS_CITY,\r\nBUSINESS_COUNTRY_CODE,\r\nBUSINESS_STREET_2,\r\nMIN_DAILY_BUDGET,\r\nACCOUNT_STATUS,\r\nIS_ATTRIBUTION_SPEC_SYSTEM_DEFAULT,\r\nMIN_CAMPAIGN_GROUP_SPEND_CAP,\r\nOFFSITE_PIXELS_TOS_ACCEPTED,\r\nTIMEZONE_NAME,\r\nAGE,\r\nIS_PERSONAL,\r\nAGENCY_CLIENT_DECLARATION_HAS_WRITTEN_MANDATE_FROM_ADVERTISER,\r\nBUSINESS_MANAGER_PRIMARY_PAGE,\r\nHAS_MIGRATED_PERMISSIONS,\r\nCURRENCY,\r\nAGENCY_CLIENT_DECLARATION_AGENCY_REPRESENTING_CLIENT,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_EMAIL_ADDRESS,\r\nBUSINESS_MANAGER_UPDATED_BY,\r\nIS_NOTIFICATIONS_ENABLED,\r\nDISABLE_REASON,\r\nTAX_ID,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_CITY,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_NAME,\r\nAGENCY_CLIENT_DECLARATION_IS_CLIENT_PAYING_INVOICES,\r\nIS_DIRECT_DEALS_ENABLED,\r\nBUSINESS_MANAGER_UPDATE_TIME,\r\nEND_ADVERTISER_NAME,\r\nIS_PREPAY_ACCOUNT,\r\nBUSINESS_ZIP,\r\nBALANCE,\r\nBUSINESS_MANAGER_TIMEZONE_ID,\r\nNAME,\r\nIS_TAX_ID_REQUIRED,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_BASED_IN_FRANCE,\r\nTAX_ID_STATUS,\r\nSALESFORCE_INVOICE_GROUP_ID,\r\nTAX_ID_TYPE,\r\nID,\r\nSPEND_CAP,\r\nBUSINESS_NAME,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_STREET_2,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_PROVINCE,\r\nBUSINESS_MANAGER_MANAGER_ID,\r\nBUSINESS_MANAGER_CREATED_TIME,\r\nAGENCY_CLIENT_DECLARATION_CLIENT_STREET,\r\nTIMEZONE_OFFSET_HOURS_UTC,\r\nBUSINESS_STREET,\r\nCAN_CREATE_BRAND_LIFT_STUDY,\r\nBUSINESS_MANAGER_CREATED_BY,\r\nTIMEZONE_ID,\r\nNEXT_BILL_DATE,\r\nCAPABILITIES,\r\nPARTNER,\r\nBUSINESS_MANAGER_NAME,\r\n_FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.ACCOUNT_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS AGENCY_CLIENT_DECLARATION_CLIENT_POSTAL_CODE,\r\nNULL AS AMOUNT_SPENT,\r\nNULL AS CREATED_TIME,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_COUNTRY_CODE,\r\nNULL AS BUSINESS_STATE,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS END_ADVERTISER,\r\nNULL AS MEDIA_AGENCY,\r\nNULL AS IO_NUMBER,\r\nNULL AS OWNER,\r\nNULL AS BUSINESS_CITY,\r\nNULL AS BUSINESS_COUNTRY_CODE,\r\nNULL AS BUSINESS_STREET_2,\r\nNULL AS MIN_DAILY_BUDGET,\r\nNULL AS ACCOUNT_STATUS,\r\nNULL AS IS_ATTRIBUTION_SPEC_SYSTEM_DEFAULT,\r\nNULL AS MIN_CAMPAIGN_GROUP_SPEND_CAP,\r\nNULL AS OFFSITE_PIXELS_TOS_ACCEPTED,\r\nNULL AS TIMEZONE_NAME,\r\nNULL AS AGE,\r\nNULL AS IS_PERSONAL,\r\nNULL AS AGENCY_CLIENT_DECLARATION_HAS_WRITTEN_MANDATE_FROM_ADVERTISER,\r\nNULL AS BUSINESS_MANAGER_PRIMARY_PAGE,\r\nNULL AS HAS_MIGRATED_PERMISSIONS,\r\nNULL AS CURRENCY,\r\nNULL AS AGENCY_CLIENT_DECLARATION_AGENCY_REPRESENTING_CLIENT,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_EMAIL_ADDRESS,\r\nNULL AS BUSINESS_MANAGER_UPDATED_BY,\r\nNULL AS IS_NOTIFICATIONS_ENABLED,\r\nNULL AS DISABLE_REASON,\r\nNULL AS TAX_ID,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_CITY,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_NAME,\r\nNULL AS AGENCY_CLIENT_DECLARATION_IS_CLIENT_PAYING_INVOICES,\r\nNULL AS IS_DIRECT_DEALS_ENABLED,\r\nNULL AS BUSINESS_MANAGER_UPDATE_TIME,\r\nNULL AS END_ADVERTISER_NAME,\r\nNULL AS IS_PREPAY_ACCOUNT,\r\nNULL AS BUSINESS_ZIP,\r\nNULL AS BALANCE,\r\nNULL AS BUSINESS_MANAGER_TIMEZONE_ID,\r\nNULL AS NAME,\r\nNULL AS IS_TAX_ID_REQUIRED,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_BASED_IN_FRANCE,\r\nNULL AS TAX_ID_STATUS,\r\nNULL AS SALESFORCE_INVOICE_GROUP_ID,\r\nNULL AS TAX_ID_TYPE,\r\nNULL AS ID,\r\nNULL AS SPEND_CAP,\r\nNULL AS BUSINESS_NAME,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET_2,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_PROVINCE,\r\nNULL AS BUSINESS_MANAGER_MANAGER_ID,\r\nNULL AS BUSINESS_MANAGER_CREATED_TIME,\r\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET,\r\nNULL AS TIMEZONE_OFFSET_HOURS_UTC,\r\nNULL AS BUSINESS_STREET,\r\nNULL AS CAN_CREATE_BRAND_LIFT_STUDY,\r\nNULL AS BUSINESS_MANAGER_CREATED_BY,\r\nNULL AS TIMEZONE_ID,\r\nNULL AS NEXT_BILL_DATE,\r\nNULL AS CAPABILITIES,\r\nNULL AS PARTNER,\r\nNULL AS BUSINESS_MANAGER_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Account_History_FB"], "unique_id": "model.sales_dataflo.Stg_Account_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Account_History_FB.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Account_History_FB.sql", "name": "Stg_Account_History_FB", "resource_type": "model", "alias": "Stg_Account_History_FB", "checksum": {"name": "sha256", "checksum": "6cbf2f114b7ef3fee26cce57cf1aa74b97646a7f10457d80b9248bc30f3866a2"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Account_History_FB.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n  \n         select\n       NULL AS AGENCY_CLIENT_DECLARATION_CLIENT_POSTAL_CODE,\nNULL AS AMOUNT_SPENT,\nNULL AS CREATED_TIME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_COUNTRY_CODE,\nNULL AS BUSINESS_STATE,\nNULL AS _FIVETRAN_ID,\nNULL AS END_ADVERTISER,\nNULL AS MEDIA_AGENCY,\nNULL AS IO_NUMBER,\nNULL AS OWNER,\nNULL AS BUSINESS_CITY,\nNULL AS BUSINESS_COUNTRY_CODE,\nNULL AS BUSINESS_STREET_2,\nNULL AS MIN_DAILY_BUDGET,\nNULL AS ACCOUNT_STATUS,\nNULL AS IS_ATTRIBUTION_SPEC_SYSTEM_DEFAULT,\nNULL AS MIN_CAMPAIGN_GROUP_SPEND_CAP,\nNULL AS OFFSITE_PIXELS_TOS_ACCEPTED,\nNULL AS TIMEZONE_NAME,\nNULL AS AGE,\nNULL AS IS_PERSONAL,\nNULL AS AGENCY_CLIENT_DECLARATION_HAS_WRITTEN_MANDATE_FROM_ADVERTISER,\nNULL AS BUSINESS_MANAGER_PRIMARY_PAGE,\nNULL AS HAS_MIGRATED_PERMISSIONS,\nNULL AS CURRENCY,\nNULL AS AGENCY_CLIENT_DECLARATION_AGENCY_REPRESENTING_CLIENT,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_EMAIL_ADDRESS,\nNULL AS BUSINESS_MANAGER_UPDATED_BY,\nNULL AS IS_NOTIFICATIONS_ENABLED,\nNULL AS DISABLE_REASON,\nNULL AS TAX_ID,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_CITY,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_NAME,\nNULL AS AGENCY_CLIENT_DECLARATION_IS_CLIENT_PAYING_INVOICES,\nNULL AS IS_DIRECT_DEALS_ENABLED,\nNULL AS BUSINESS_MANAGER_UPDATE_TIME,\nNULL AS END_ADVERTISER_NAME,\nNULL AS IS_PREPAY_ACCOUNT,\nNULL AS BUSINESS_ZIP,\nNULL AS BALANCE,\nNULL AS BUSINESS_MANAGER_TIMEZONE_ID,\nNULL AS NAME,\nNULL AS IS_TAX_ID_REQUIRED,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_BASED_IN_FRANCE,\nNULL AS TAX_ID_STATUS,\nNULL AS SALESFORCE_INVOICE_GROUP_ID,\nNULL AS TAX_ID_TYPE,\nNULL AS ID,\nNULL AS SPEND_CAP,\nNULL AS BUSINESS_NAME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET_2,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_PROVINCE,\nNULL AS BUSINESS_MANAGER_MANAGER_ID,\nNULL AS BUSINESS_MANAGER_CREATED_TIME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET,\nNULL AS TIMEZONE_OFFSET_HOURS_UTC,\nNULL AS BUSINESS_STREET,\nNULL AS CAN_CREATE_BRAND_LIFT_STUDY,\nNULL AS BUSINESS_MANAGER_CREATED_BY,\nNULL AS TIMEZONE_ID,\nNULL AS NEXT_BILL_DATE,\nNULL AS CAPABILITIES,\nNULL AS PARTNER,\nNULL AS BUSINESS_MANAGER_NAME,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n  \n         select\n       NULL AS AGENCY_CLIENT_DECLARATION_CLIENT_POSTAL_CODE,\nNULL AS AMOUNT_SPENT,\nNULL AS CREATED_TIME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_COUNTRY_CODE,\nNULL AS BUSINESS_STATE,\nNULL AS _FIVETRAN_ID,\nNULL AS END_ADVERTISER,\nNULL AS MEDIA_AGENCY,\nNULL AS IO_NUMBER,\nNULL AS OWNER,\nNULL AS BUSINESS_CITY,\nNULL AS BUSINESS_COUNTRY_CODE,\nNULL AS BUSINESS_STREET_2,\nNULL AS MIN_DAILY_BUDGET,\nNULL AS ACCOUNT_STATUS,\nNULL AS IS_ATTRIBUTION_SPEC_SYSTEM_DEFAULT,\nNULL AS MIN_CAMPAIGN_GROUP_SPEND_CAP,\nNULL AS OFFSITE_PIXELS_TOS_ACCEPTED,\nNULL AS TIMEZONE_NAME,\nNULL AS AGE,\nNULL AS IS_PERSONAL,\nNULL AS AGENCY_CLIENT_DECLARATION_HAS_WRITTEN_MANDATE_FROM_ADVERTISER,\nNULL AS BUSINESS_MANAGER_PRIMARY_PAGE,\nNULL AS HAS_MIGRATED_PERMISSIONS,\nNULL AS CURRENCY,\nNULL AS AGENCY_CLIENT_DECLARATION_AGENCY_REPRESENTING_CLIENT,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_EMAIL_ADDRESS,\nNULL AS BUSINESS_MANAGER_UPDATED_BY,\nNULL AS IS_NOTIFICATIONS_ENABLED,\nNULL AS DISABLE_REASON,\nNULL AS TAX_ID,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_CITY,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_NAME,\nNULL AS AGENCY_CLIENT_DECLARATION_IS_CLIENT_PAYING_INVOICES,\nNULL AS IS_DIRECT_DEALS_ENABLED,\nNULL AS BUSINESS_MANAGER_UPDATE_TIME,\nNULL AS END_ADVERTISER_NAME,\nNULL AS IS_PREPAY_ACCOUNT,\nNULL AS BUSINESS_ZIP,\nNULL AS BALANCE,\nNULL AS BUSINESS_MANAGER_TIMEZONE_ID,\nNULL AS NAME,\nNULL AS IS_TAX_ID_REQUIRED,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_BASED_IN_FRANCE,\nNULL AS TAX_ID_STATUS,\nNULL AS SALESFORCE_INVOICE_GROUP_ID,\nNULL AS TAX_ID_TYPE,\nNULL AS ID,\nNULL AS SPEND_CAP,\nNULL AS BUSINESS_NAME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET_2,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_PROVINCE,\nNULL AS BUSINESS_MANAGER_MANAGER_ID,\nNULL AS BUSINESS_MANAGER_CREATED_TIME,\nNULL AS AGENCY_CLIENT_DECLARATION_CLIENT_STREET,\nNULL AS TIMEZONE_OFFSET_HOURS_UTC,\nNULL AS BUSINESS_STREET,\nNULL AS CAN_CREATE_BRAND_LIFT_STUDY,\nNULL AS BUSINESS_MANAGER_CREATED_BY,\nNULL AS TIMEZONE_ID,\nNULL AS NEXT_BILL_DATE,\nNULL AS CAPABILITIES,\nNULL AS PARTNER,\nNULL AS BUSINESS_MANAGER_NAME,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5795016288757324, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:26.732110Z", "completed_at": "2021-05-19T00:53:27.973478Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:27.973784Z", "completed_at": "2021-05-19T00:53:28.887609Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS AD_ID,\r\n       CONFIGURED_STATUS,\r\nBID_INFO_ACTIONS,\r\nACCOUNT_ID,\r\nSTATUS,\r\nLAST_UPDATED_BY_APP_ID,\r\nCREATED_TIME,\r\nEFFECTIVE_STATUS,\r\nCREATIVE_ID,\r\nNAME,\r\nUPDATED_TIME,\r\nAD_SET_ID,\r\nBID_AMOUNT,\r\nAD_SOURCE_ID,\r\nBID_TYPE,\r\nID,\r\nCAMPAIGN_ID,\r\n_FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n    NULL AS CONFIGURED_STATUS,\r\nNULL AS BID_INFO_ACTIONS,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS STATUS,\r\nNULL AS LAST_UPDATED_BY_APP_ID,\r\nNULL AS CREATED_TIME,\r\nNULL AS EFFECTIVE_STATUS,\r\nNULL AS CREATIVE_ID,\r\nNULL AS NAME,\r\nNULL AS UPDATED_TIME,\r\nNULL AS AD_SET_ID,\r\nNULL AS BID_AMOUNT,\r\nNULL AS AD_SOURCE_ID,\r\nNULL AS BID_TYPE,\r\nNULL AS ID,\r\nNULL AS CAMPAIGN_ID,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Ad_History"], "unique_id": "model.sales_dataflo.Stg_Ad_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Ad_History.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Ad_History.sql", "name": "Stg_Ad_History", "resource_type": "model", "alias": "Stg_Ad_History", "checksum": {"name": "sha256", "checksum": "e83306836530a16d6547b5ad949c21614b11b30c0bc45f8a8f5a8a16ceb43fab"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Ad_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n    NULL AS CONFIGURED_STATUS,\nNULL AS BID_INFO_ACTIONS,\nNULL AS ACCOUNT_ID,\nNULL AS STATUS,\nNULL AS LAST_UPDATED_BY_APP_ID,\nNULL AS CREATED_TIME,\nNULL AS EFFECTIVE_STATUS,\nNULL AS CREATIVE_ID,\nNULL AS NAME,\nNULL AS UPDATED_TIME,\nNULL AS AD_SET_ID,\nNULL AS BID_AMOUNT,\nNULL AS AD_SOURCE_ID,\nNULL AS BID_TYPE,\nNULL AS ID,\nNULL AS CAMPAIGN_ID,\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n    NULL AS CONFIGURED_STATUS,\nNULL AS BID_INFO_ACTIONS,\nNULL AS ACCOUNT_ID,\nNULL AS STATUS,\nNULL AS LAST_UPDATED_BY_APP_ID,\nNULL AS CREATED_TIME,\nNULL AS EFFECTIVE_STATUS,\nNULL AS CREATIVE_ID,\nNULL AS NAME,\nNULL AS UPDATED_TIME,\nNULL AS AD_SET_ID,\nNULL AS BID_AMOUNT,\nNULL AS AD_SOURCE_ID,\nNULL AS BID_TYPE,\nNULL AS ID,\nNULL AS CAMPAIGN_ID,\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5923290252685547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:29.314191Z", "completed_at": "2021-05-19T00:53:30.564330Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:30.564648Z", "completed_at": "2021-05-19T00:53:31.478940Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS ADS_ID,\r\n        PROMOTED_OBJECT_PRODUCT_SET_ID,\r\nTARGETING_EXCLUDED_CONNECTIONS,\r\nPROMOTED_OBJECT_OBJECT_STORE_URL,\r\nTARGETING_USER_DEVICE,\r\nOPTIMIZATION_GOAL,\r\nTARGETING_EXCLUDED_PUBLISHER_CATEGORIES,\r\nTARGETING_PUBLISHER_PLATFORMS,\r\nBILLING_EVENT,\r\nLIFETIME_BUDGET,\r\nTARGETING_GEO_LOCATIONS_COUNTRIES,\r\nPROMOTED_OBJECT_PIXEL_ID,\r\nCREATED_TIME,\r\nBID_STRATEGY,\r\nTARGETING_FLEXIBLE_SPEC,\r\nTARGETING_USER_ADCLUSTERS,\r\nNAME as ad_set_name,\r\nTARGETING_WIRELESS_CARRIER,\r\nLIFETIME_IMPS,\r\nTARGETING_EDUCATION_STATUSES,\r\nTARGETING_FRIENDS_OF_CONNECTIONS,\r\nTARGETING_WORK_EMPLOYERS,\r\nEFFECTIVE_STATUS,\r\nBID_INFO_ACTIONS,\r\nTARGETING_AUDIENCE_NETWORK_POSITIONS,\r\nRF_PREDICTION_ID,\r\nTARGETING_EDUCATION_MAJORS,\r\nID as ad_set_id,\r\nPROMOTED_OBJECT_OFFER_ID,\r\nSTART_TIME,\r\nUSE_NEW_APP_CLICK,\r\nBUDGET_REMAINING,\r\nPROMOTED_OBJECT_EVENT_ID,\r\nPROMOTED_OBJECT_PLACE_PAGE_SET_ID,\r\nRECURRING_BUDGET_SEMANTICS,\r\nUPDATED_TIME,\r\nTARGETING_EXCLUDED_USER_DEVICE,\r\nTARGETING_LOCALES,\r\nTARGETING_AGE_MAX,\r\nBID_AMOUNT,\r\nTARGETING_EDUCATION_SCHOOLS,\r\nTARGETING_EXCLUDED_PUBLISHER_LIST_IDS,\r\nTARGETING_COLLEGE_YEARS,\r\nINSTAGRAM_ACTOR_ID,\r\nTARGETING_AGE_MIN,\r\nTARGETING_USER_OS,\r\nACCOUNT_ID,\r\nCONFIGURED_STATUS,\r\nDAILY_BUDGET,\r\nPROMOTED_OBJECT_APPLICATION_ID,\r\nEND_TIME,\r\nPROMOTED_OBJECT_PAGE_ID,\r\nCAMPAIGN_ID,\r\nTARGETING_FACEBOOK_POSITIONS,\r\nTARGETING_EFFECTIVE_AUDIENCE_NETWORK_POSITIONS,\r\nTARGETING_GEO_LOCATIONS_LOCATION_TYPES,\r\nSTATUS,\r\nADSET_SOURCE_ID,\r\nPROMOTED_OBJECT_CUSTOM_EVENT_TYPE,\r\nTARGETING_CONNECTIONS,\r\nTARGETING_WORK_POSITIONS,\r\nTARGETING_APP_INSTALL_STATE,\r\nDESTINATION_TYPE,\r\nTARGETING_INSTAGRAM_POSITIONS,\r\nTARGETING_EXCLUSIONS,\r\nPROMOTED_OBJECT_PRODUCT_CATALOG_ID,\r\nTARGETING_DEVICE_PLATFORMS,\r\n_FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_SET_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS PROMOTED_OBJECT_PRODUCT_SET_ID,\r\nNULL AS TARGETING_EXCLUDED_CONNECTIONS,\r\nNULL AS PROMOTED_OBJECT_OBJECT_STORE_URL,\r\nNULL AS TARGETING_USER_DEVICE,\r\nNULL AS OPTIMIZATION_GOAL,\r\nNULL AS TARGETING_EXCLUDED_PUBLISHER_CATEGORIES,\r\nNULL AS TARGETING_PUBLISHER_PLATFORMS,\r\nNULL AS BILLING_EVENT,\r\nNULL AS LIFETIME_BUDGET,\r\nNULL AS TARGETING_GEO_LOCATIONS_COUNTRIES,\r\nNULL AS PROMOTED_OBJECT_PIXEL_ID,\r\nNULL AS CREATED_TIME,\r\nNULL AS BID_STRATEGY,\r\nNULL AS TARGETING_FLEXIBLE_SPEC,\r\nNULL AS TARGETING_USER_ADCLUSTERS,\r\nNULL AS ad_set_name,\r\nNULL AS TARGETING_WIRELESS_CARRIER,\r\nNULL AS LIFETIME_IMPS,\r\nNULL AS TARGETING_EDUCATION_STATUSES,\r\nNULL AS TARGETING_FRIENDS_OF_CONNECTIONS,\r\nNULL AS TARGETING_WORK_EMPLOYERS,\r\nNULL AS EFFECTIVE_STATUS,\r\nNULL AS BID_INFO_ACTIONS,\r\nNULL AS TARGETING_AUDIENCE_NETWORK_POSITIONS,\r\nNULL AS RF_PREDICTION_ID,\r\nNULL AS TARGETING_EDUCATION_MAJORS,\r\nNULL AS ad_set_id,\r\nNULL AS PROMOTED_OBJECT_OFFER_ID,\r\nNULL AS START_TIME,\r\nNULL AS USE_NEW_APP_CLICK,\r\nNULL AS BUDGET_REMAINING,\r\nNULL AS PROMOTED_OBJECT_EVENT_ID,\r\nNULL AS PROMOTED_OBJECT_PLACE_PAGE_SET_ID,\r\nNULL AS RECURRING_BUDGET_SEMANTICS,\r\nNULL AS UPDATED_TIME,\r\nNULL AS TARGETING_EXCLUDED_USER_DEVICE,\r\nNULL AS TARGETING_LOCALES,\r\nNULL AS TARGETING_AGE_MAX,\r\nNULL AS BID_AMOUNT,\r\nNULL AS TARGETING_EDUCATION_SCHOOLS,\r\nNULL AS TARGETING_EXCLUDED_PUBLISHER_LIST_IDS,\r\nNULL AS TARGETING_COLLEGE_YEARS,\r\nNULL AS INSTAGRAM_ACTOR_ID,\r\nNULL AS TARGETING_AGE_MIN,\r\nNULL AS TARGETING_USER_OS,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS CONFIGURED_STATUS,\r\nNULL AS DAILY_BUDGET,\r\nNULL AS PROMOTED_OBJECT_APPLICATION_ID,\r\nNULL AS END_TIME,\r\nNULL AS PROMOTED_OBJECT_PAGE_ID,\r\nNULL AS CAMPAIGN_ID,\r\nNULL AS TARGETING_FACEBOOK_POSITIONS,\r\nNULL AS TARGETING_EFFECTIVE_AUDIENCE_NETWORK_POSITIONS,\r\nNULL AS TARGETING_GEO_LOCATIONS_LOCATION_TYPES,\r\nNULL AS STATUS,\r\nNULL AS ADSET_SOURCE_ID,\r\nNULL AS PROMOTED_OBJECT_CUSTOM_EVENT_TYPE,\r\nNULL AS TARGETING_CONNECTIONS,\r\nNULL AS TARGETING_WORK_POSITIONS,\r\nNULL AS TARGETING_APP_INSTALL_STATE,\r\nNULL AS DESTINATION_TYPE,\r\nNULL AS TARGETING_INSTAGRAM_POSITIONS,\r\nNULL AS TARGETING_EXCLUSIONS,\r\nNULL AS PROMOTED_OBJECT_PRODUCT_CATALOG_ID,\r\nNULL AS TARGETING_DEVICE_PLATFORMS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Ad_Set_History"], "unique_id": "model.sales_dataflo.Stg_Ad_Set_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Ad_Set_History.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Ad_Set_History.sql", "name": "Stg_Ad_Set_History", "resource_type": "model", "alias": "Stg_Ad_Set_History", "checksum": {"name": "sha256", "checksum": "512cae9c233050f773daa7c1253f813034b644af984f77d417e2a90ba6dcf1d6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Ad_Set_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS PROMOTED_OBJECT_PRODUCT_SET_ID,\nNULL AS TARGETING_EXCLUDED_CONNECTIONS,\nNULL AS PROMOTED_OBJECT_OBJECT_STORE_URL,\nNULL AS TARGETING_USER_DEVICE,\nNULL AS OPTIMIZATION_GOAL,\nNULL AS TARGETING_EXCLUDED_PUBLISHER_CATEGORIES,\nNULL AS TARGETING_PUBLISHER_PLATFORMS,\nNULL AS BILLING_EVENT,\nNULL AS LIFETIME_BUDGET,\nNULL AS TARGETING_GEO_LOCATIONS_COUNTRIES,\nNULL AS PROMOTED_OBJECT_PIXEL_ID,\nNULL AS CREATED_TIME,\nNULL AS BID_STRATEGY,\nNULL AS TARGETING_FLEXIBLE_SPEC,\nNULL AS TARGETING_USER_ADCLUSTERS,\nNULL AS ad_set_name,\nNULL AS TARGETING_WIRELESS_CARRIER,\nNULL AS LIFETIME_IMPS,\nNULL AS TARGETING_EDUCATION_STATUSES,\nNULL AS TARGETING_FRIENDS_OF_CONNECTIONS,\nNULL AS TARGETING_WORK_EMPLOYERS,\nNULL AS EFFECTIVE_STATUS,\nNULL AS BID_INFO_ACTIONS,\nNULL AS TARGETING_AUDIENCE_NETWORK_POSITIONS,\nNULL AS RF_PREDICTION_ID,\nNULL AS TARGETING_EDUCATION_MAJORS,\nNULL AS ad_set_id,\nNULL AS PROMOTED_OBJECT_OFFER_ID,\nNULL AS START_TIME,\nNULL AS USE_NEW_APP_CLICK,\nNULL AS BUDGET_REMAINING,\nNULL AS PROMOTED_OBJECT_EVENT_ID,\nNULL AS PROMOTED_OBJECT_PLACE_PAGE_SET_ID,\nNULL AS RECURRING_BUDGET_SEMANTICS,\nNULL AS UPDATED_TIME,\nNULL AS TARGETING_EXCLUDED_USER_DEVICE,\nNULL AS TARGETING_LOCALES,\nNULL AS TARGETING_AGE_MAX,\nNULL AS BID_AMOUNT,\nNULL AS TARGETING_EDUCATION_SCHOOLS,\nNULL AS TARGETING_EXCLUDED_PUBLISHER_LIST_IDS,\nNULL AS TARGETING_COLLEGE_YEARS,\nNULL AS INSTAGRAM_ACTOR_ID,\nNULL AS TARGETING_AGE_MIN,\nNULL AS TARGETING_USER_OS,\nNULL AS ACCOUNT_ID,\nNULL AS CONFIGURED_STATUS,\nNULL AS DAILY_BUDGET,\nNULL AS PROMOTED_OBJECT_APPLICATION_ID,\nNULL AS END_TIME,\nNULL AS PROMOTED_OBJECT_PAGE_ID,\nNULL AS CAMPAIGN_ID,\nNULL AS TARGETING_FACEBOOK_POSITIONS,\nNULL AS TARGETING_EFFECTIVE_AUDIENCE_NETWORK_POSITIONS,\nNULL AS TARGETING_GEO_LOCATIONS_LOCATION_TYPES,\nNULL AS STATUS,\nNULL AS ADSET_SOURCE_ID,\nNULL AS PROMOTED_OBJECT_CUSTOM_EVENT_TYPE,\nNULL AS TARGETING_CONNECTIONS,\nNULL AS TARGETING_WORK_POSITIONS,\nNULL AS TARGETING_APP_INSTALL_STATE,\nNULL AS DESTINATION_TYPE,\nNULL AS TARGETING_INSTAGRAM_POSITIONS,\nNULL AS TARGETING_EXCLUSIONS,\nNULL AS PROMOTED_OBJECT_PRODUCT_CATALOG_ID,\nNULL AS TARGETING_DEVICE_PLATFORMS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS PROMOTED_OBJECT_PRODUCT_SET_ID,\nNULL AS TARGETING_EXCLUDED_CONNECTIONS,\nNULL AS PROMOTED_OBJECT_OBJECT_STORE_URL,\nNULL AS TARGETING_USER_DEVICE,\nNULL AS OPTIMIZATION_GOAL,\nNULL AS TARGETING_EXCLUDED_PUBLISHER_CATEGORIES,\nNULL AS TARGETING_PUBLISHER_PLATFORMS,\nNULL AS BILLING_EVENT,\nNULL AS LIFETIME_BUDGET,\nNULL AS TARGETING_GEO_LOCATIONS_COUNTRIES,\nNULL AS PROMOTED_OBJECT_PIXEL_ID,\nNULL AS CREATED_TIME,\nNULL AS BID_STRATEGY,\nNULL AS TARGETING_FLEXIBLE_SPEC,\nNULL AS TARGETING_USER_ADCLUSTERS,\nNULL AS ad_set_name,\nNULL AS TARGETING_WIRELESS_CARRIER,\nNULL AS LIFETIME_IMPS,\nNULL AS TARGETING_EDUCATION_STATUSES,\nNULL AS TARGETING_FRIENDS_OF_CONNECTIONS,\nNULL AS TARGETING_WORK_EMPLOYERS,\nNULL AS EFFECTIVE_STATUS,\nNULL AS BID_INFO_ACTIONS,\nNULL AS TARGETING_AUDIENCE_NETWORK_POSITIONS,\nNULL AS RF_PREDICTION_ID,\nNULL AS TARGETING_EDUCATION_MAJORS,\nNULL AS ad_set_id,\nNULL AS PROMOTED_OBJECT_OFFER_ID,\nNULL AS START_TIME,\nNULL AS USE_NEW_APP_CLICK,\nNULL AS BUDGET_REMAINING,\nNULL AS PROMOTED_OBJECT_EVENT_ID,\nNULL AS PROMOTED_OBJECT_PLACE_PAGE_SET_ID,\nNULL AS RECURRING_BUDGET_SEMANTICS,\nNULL AS UPDATED_TIME,\nNULL AS TARGETING_EXCLUDED_USER_DEVICE,\nNULL AS TARGETING_LOCALES,\nNULL AS TARGETING_AGE_MAX,\nNULL AS BID_AMOUNT,\nNULL AS TARGETING_EDUCATION_SCHOOLS,\nNULL AS TARGETING_EXCLUDED_PUBLISHER_LIST_IDS,\nNULL AS TARGETING_COLLEGE_YEARS,\nNULL AS INSTAGRAM_ACTOR_ID,\nNULL AS TARGETING_AGE_MIN,\nNULL AS TARGETING_USER_OS,\nNULL AS ACCOUNT_ID,\nNULL AS CONFIGURED_STATUS,\nNULL AS DAILY_BUDGET,\nNULL AS PROMOTED_OBJECT_APPLICATION_ID,\nNULL AS END_TIME,\nNULL AS PROMOTED_OBJECT_PAGE_ID,\nNULL AS CAMPAIGN_ID,\nNULL AS TARGETING_FACEBOOK_POSITIONS,\nNULL AS TARGETING_EFFECTIVE_AUDIENCE_NETWORK_POSITIONS,\nNULL AS TARGETING_GEO_LOCATIONS_LOCATION_TYPES,\nNULL AS STATUS,\nNULL AS ADSET_SOURCE_ID,\nNULL AS PROMOTED_OBJECT_CUSTOM_EVENT_TYPE,\nNULL AS TARGETING_CONNECTIONS,\nNULL AS TARGETING_WORK_POSITIONS,\nNULL AS TARGETING_APP_INSTALL_STATE,\nNULL AS DESTINATION_TYPE,\nNULL AS TARGETING_INSTAGRAM_POSITIONS,\nNULL AS TARGETING_EXCLUSIONS,\nNULL AS PROMOTED_OBJECT_PRODUCT_CATALOG_ID,\nNULL AS TARGETING_DEVICE_PLATFORMS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.566899538040161, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:31.909203Z", "completed_at": "2021-05-19T00:53:33.142121Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:33.142473Z", "completed_at": "2021-05-19T00:53:34.055030Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Campaign_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CAMPAIGN WHERE Campaign_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}   \r\n \r\n select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Campaign_ID,\r\n        ID as Source_ID,\r\n        IS_DELETED,\r\n        NAME,\r\n        TYPE,\r\n        STATUS,\r\n        START_DATE,\r\n        END_DATE,\r\n        EXPECTED_REVENUE,\r\n        BUDGETED_COST,\r\n        ACTUAL_COST,\r\n        EXPECTED_RESPONSE,\r\n        NUMBER_SENT,\r\n        IS_ACTIVE,\r\n        DESCRIPTION,\r\n        NUMBER_OF_LEADS,\r\n        NUMBER_OF_CONVERTED_LEADS,\r\n        NUMBER_OF_CONTACTS,\r\n        NUMBER_OF_RESPONSES,\r\n        NUMBER_OF_OPPORTUNITIES,\r\n        NUMBER_OF_WON_OPPORTUNITIES,\r\n        AMOUNT_ALL_OPPORTUNITIES,\r\n        AMOUNT_WON_OPPORTUNITIES,\r\n        OWNER_ID,\r\n        CREATED_DATE,\r\n        CREATED_BY_ID,\r\n        LAST_MODIFIED_DATE,\r\n        LAST_MODIFIED_BY_ID,\r\n        SYSTEM_MODSTAMP,\r\n        LAST_ACTIVITY_DATE,\r\n        LAST_VIEWED_DATE,\r\n        LAST_REFERENCED_DATE,\r\n        CAMPAIGN_MEMBER_RECORD_TYPE_ID,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_CAMPAIGN_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Campaign\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as Campaign_ID,\r\n        null as  Source_ID,\r\n        null as IS_DELETED,\r\n        null as NAME,\r\n        null as TYPE,\r\n        null as STATUS,\r\n        null as START_DATE,\r\n        null as END_DATE,\r\n        null as EXPECTED_REVENUE,\r\n        null as BUDGETED_COST,\r\n        null as ACTUAL_COST,\r\n        null as EXPECTED_RESPONSE,\r\n        null as NUMBER_SENT,\r\n        null as IS_ACTIVE,\r\n        null as DESCRIPTION,\r\n        null as NUMBER_OF_LEADS,\r\n        null as NUMBER_OF_CONVERTED_LEADS,\r\n        null as NUMBER_OF_CONTACTS,\r\n        null as NUMBER_OF_RESPONSES,\r\n        null as NUMBER_OF_OPPORTUNITIES,\r\n        null as NUMBER_OF_WON_OPPORTUNITIES,\r\n        null as AMOUNT_ALL_OPPORTUNITIES,\r\n        null as AMOUNT_WON_OPPORTUNITIES,\r\n        null as OWNER_ID,\r\n        null as CREATED_DATE,\r\n        null as CREATED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as SYSTEM_MODSTAMP,\r\n        null as LAST_ACTIVITY_DATE,\r\n        null as LAST_VIEWED_DATE,\r\n        null as LAST_REFERENCED_DATE,\r\n        null as CAMPAIGN_MEMBER_RECORD_TYPE_ID,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Campaign"], "unique_id": "model.sales_dataflo.Stg_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Campaign.sql", "original_file_path": "ETL/Stage/SF/Stg_Campaign.sql", "name": "Stg_Campaign", "resource_type": "model", "alias": "Stg_Campaign", "checksum": {"name": "sha256", "checksum": "f741b23865f5aff93d15c7ae9c867d8cd78c69b01aa1872022c5160832f2e39b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CAMPAIGN WHERE Campaign_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Campaign_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Campaign.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Campaign_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        NAME,\n        TYPE,\n        STATUS,\n        START_DATE,\n        END_DATE,\n        EXPECTED_REVENUE,\n        BUDGETED_COST,\n        ACTUAL_COST,\n        EXPECTED_RESPONSE,\n        NUMBER_SENT,\n        IS_ACTIVE,\n        DESCRIPTION,\n        NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        CAMPAIGN_MEMBER_RECORD_TYPE_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_CAMPAIGN_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Campaign\n          \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Campaign_ID,\n        ID as Source_ID,\n        IS_DELETED,\n        NAME,\n        TYPE,\n        STATUS,\n        START_DATE,\n        END_DATE,\n        EXPECTED_REVENUE,\n        BUDGETED_COST,\n        ACTUAL_COST,\n        EXPECTED_RESPONSE,\n        NUMBER_SENT,\n        IS_ACTIVE,\n        DESCRIPTION,\n        NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES,\n        OWNER_ID,\n        CREATED_DATE,\n        CREATED_BY_ID,\n        LAST_MODIFIED_DATE,\n        LAST_MODIFIED_BY_ID,\n        SYSTEM_MODSTAMP,\n        LAST_ACTIVITY_DATE,\n        LAST_VIEWED_DATE,\n        LAST_REFERENCED_DATE,\n        CAMPAIGN_MEMBER_RECORD_TYPE_ID,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_CAMPAIGN_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.Campaign\n          \n    \n"}, "error": null, "status": "SUCCESS 9646", "execution_time": 6.4126129150390625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:34.478564Z", "completed_at": "2021-05-19T00:53:35.930107Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:35.930419Z", "completed_at": "2021-05-19T00:53:40.463965Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CAMP_ID,\r\n        START_TIME,\r\n        ID as CAMPAIGN_ID,\r\n        BUDGET_REBALANCE_FLAG,\r\n        SOURCE_CAMPAIGN_ID,\r\n        CONFIGURED_STATUS,\r\n        OBJECTIVE,\r\n        STATUS,\r\n        DAILY_BUDGET,\r\n        BUYING_TYPE,\r\n        NAME,\r\n        CAN_USE_SPEND_CAP,\r\n        EFFECTIVE_STATUS,\r\n        BOOSTED_OBJECT_ID,\r\n        ACCOUNT_ID,\r\n        CREATED_TIME,\r\n        STOP_TIME,\r\n        CAN_CREATE_BRAND_LIFT_STUDY,\r\n        SPEND_CAP,\r\n        UPDATED_TIME,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CAMPAIGN_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null as ID,\r\n        Null as START_TIME,\r\n        Null as CAMPAIGN_ID,\r\n        Null as BUDGET_REBALANCE_FLAG,\r\n        Null as SOURCE_CAMPAIGN_ID,\r\n        Null as CONFIGURED_STATUS,\r\n        Null as OBJECTIVE,\r\n        Null as STATUS,\r\n        Null as DAILY_BUDGET,\r\n        Null as BUYING_TYPE,\r\n        Null as NAME,\r\n        Null as CAN_USE_SPEND_CAP,\r\n        Null as EFFECTIVE_STATUS,\r\n        Null as BOOSTED_OBJECT_ID,\r\n        Null as ACCOUNT_ID,\r\n        Null as CREATED_TIME,\r\n        Null as STOP_TIME,\r\n        Null as CAN_CREATE_BRAND_LIFT_STUDY,\r\n        Null as SPEND_CAP,\r\n        Null as UPDATED_TIME,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Campaign_History_FB"], "unique_id": "model.sales_dataflo.Stg_Campaign_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Campaign_History_FB.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Campaign_History_FB.sql", "name": "Stg_Campaign_History_FB", "resource_type": "model", "alias": "Stg_Campaign_History_FB", "checksum": {"name": "sha256", "checksum": "a146760ad7dfbc0b6e69b2561fe1ff63aa6b12bcbbc8c0e336966aa3adb0a187"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Campaign_History_FB.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        Null as ID,\n        Null as START_TIME,\n        Null as CAMPAIGN_ID,\n        Null as BUDGET_REBALANCE_FLAG,\n        Null as SOURCE_CAMPAIGN_ID,\n        Null as CONFIGURED_STATUS,\n        Null as OBJECTIVE,\n        Null as STATUS,\n        Null as DAILY_BUDGET,\n        Null as BUYING_TYPE,\n        Null as NAME,\n        Null as CAN_USE_SPEND_CAP,\n        Null as EFFECTIVE_STATUS,\n        Null as BOOSTED_OBJECT_ID,\n        Null as ACCOUNT_ID,\n        Null as CREATED_TIME,\n        Null as STOP_TIME,\n        Null as CAN_CREATE_BRAND_LIFT_STUDY,\n        Null as SPEND_CAP,\n        Null as UPDATED_TIME,\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        Null as ID,\n        Null as START_TIME,\n        Null as CAMPAIGN_ID,\n        Null as BUDGET_REBALANCE_FLAG,\n        Null as SOURCE_CAMPAIGN_ID,\n        Null as CONFIGURED_STATUS,\n        Null as OBJECTIVE,\n        Null as STATUS,\n        Null as DAILY_BUDGET,\n        Null as BUYING_TYPE,\n        Null as NAME,\n        Null as CAN_USE_SPEND_CAP,\n        Null as EFFECTIVE_STATUS,\n        Null as BOOSTED_OBJECT_ID,\n        Null as ACCOUNT_ID,\n        Null as CREATED_TIME,\n        Null as STOP_TIME,\n        Null as CAN_CREATE_BRAND_LIFT_STUDY,\n        Null as SPEND_CAP,\n        Null as UPDATED_TIME,\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.758790969848633, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:40.893749Z", "completed_at": "2021-05-19T00:53:42.326908Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:42.327250Z", "completed_at": "2021-05-19T00:53:43.227869Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CHANNEL_TRAFFIC WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        CHANNEL_GROUPING,\r\n        GOAL_VALUE_ALL,\r\n        NEW_USERS,\r\n        SESSIONS,\r\n        AVG_SESSION_DURATION,\r\n        GOAL_COMPLETIONS_ALL,\r\n        PAGEVIEWS_PER_SESSION,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        USERS,\r\n        BOUNCE_RATE,\r\n        PERCENT_NEW_SESSIONS,   \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_CHANNEL_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CHANNEL_TRAFFIC \r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as CHANNEL_GROUPING,\r\n        null as GOAL_VALUE_ALL,\r\n        null as NEW_USERS,\r\n        null as SESSIONS,\r\n        null as AVG_SESSION_DURATION,\r\n        null as GOAL_COMPLETIONS_ALL,\r\n        null as PAGEVIEWS_PER_SESSION,\r\n        null as GOAL_CONVERSION_RATE_ALL,\r\n        null as USERS,\r\n        null as BOUNCE_RATE,\r\n        null as PERCENT_NEW_SESSIONS\r\n        from dual\r\n   \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Channel_Traffic"], "unique_id": "model.sales_dataflo.Stg_Channel_Traffic", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Channel_Traffic.sql", "original_file_path": "ETL/Stage/GA/Stg_Channel_Traffic.sql", "name": "Stg_Channel_Traffic", "resource_type": "model", "alias": "Stg_Channel_Traffic", "checksum": {"name": "sha256", "checksum": "4162b1824a3ed8ba148b30c734e6c476711f6e2c4780512c753934c111f93060"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CHANNEL_TRAFFIC WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Channel_Traffic.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        CHANNEL_GROUPING,\n        GOAL_VALUE_ALL,\n        NEW_USERS,\n        SESSIONS,\n        AVG_SESSION_DURATION,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        PERCENT_NEW_SESSIONS,   \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_CHANNEL_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.CHANNEL_TRAFFIC \n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        CHANNEL_GROUPING,\n        GOAL_VALUE_ALL,\n        NEW_USERS,\n        SESSIONS,\n        AVG_SESSION_DURATION,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        PERCENT_NEW_SESSIONS,   \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_CHANNEL_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.CHANNEL_TRAFFIC \n           \n        \n"}, "error": null, "status": "SUCCESS 613", "execution_time": 5.684217691421509, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:43.655155Z", "completed_at": "2021-05-19T00:53:44.944494Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:44.944810Z", "completed_at": "2021-05-19T00:53:48.908125Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CRE_ID,\r\n        OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IOS,\r\nID as CREATIVE_ID,\r\nOBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPAD,\r\nOBJECT_STORY_LINK_DATA_DESCRIPTION,\r\nTEMPLATE_APP_LINK_SPEC_IOS,\r\nTITLE,\r\nTEMPLATE_LINK,\r\nVIDEO_CALL_TO_ACTION_VALUE_LINK,\r\nACTOR_ID,\r\nOBJECT_STORY_LINK_DATA_CAPTION,\r\nOBJECT_URL,\r\n_FIVETRAN_ID,\r\nEFFECTIVE_INSTAGRAM_STORY_ID,\r\nPAGE_MESSAGE,\r\nCAROUSEL_AD_LINK,\r\nASSET_FEED_SPEC_LINK_URLS,\r\nOBJECT_STORY_ID,\r\nCALL_TO_ACTION_TYPE,\r\nUSE_PAGE_ACTOR_OVERRIDE,\r\nIMAGE_URL,\r\nINSTAGRAM_PERMALINK_URL,\r\nNAME as CREATIVE_NAME,\r\nTEMPLATE_CHILD_ATTACHMENTS,\r\nPAGE_LINK,\r\nTEMPLATE_MESSAGE,\r\nTEMPLATE_APP_LINK_SPEC_IPHONE,\r\nTEMPLATE_PAGE_LINK,\r\nOBJECT_STORY_LINK_DATA_LINK,\r\nOBJECT_ID,\r\nTEMPLATE_APP_LINK_SPEC_ANDROID,\r\nOBJECT_STORY_LINK_DATA_APP_LINK_SPEC_ANDROID,\r\nEFFECTIVE_OBJECT_STORY_ID,\r\nPRODUCT_SET_ID,\r\nIMAGE_FILE,\r\nBODY,\r\nOBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPHONE,\r\nSTATUS,\r\nOBJECT_STORY_LINK_DATA_MESSAGE,\r\nTHUMBNAIL_URL,\r\nTEMPLATE_DESCRIPTION,\r\nVIDEO_ID,\r\nINSTAGRAM_STORY_ID,\r\nOBJECT_TYPE,\r\nLINK_OG_ID,\r\nBRANDED_CONTENT_SPONSOR_PAGE_ID,\r\nTEMPLATE_CAPTION,\r\nTEMPLATE_URL,\r\nACCOUNT_ID,\r\nIMAGE_HASH,\r\nLINK_URL,\r\nAPPLINK_TREATMENT,\r\nTEMPLATE_APP_LINK_SPEC_IPAD,\r\nINSTAGRAM_ACTOR_ID,\r\nOBJECT_STORY_LINK_DATA_CHILD_ATTACHMENTS,\r\nURL_TAGS,\r\n_FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CREATIVE_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IOS,\r\nNULL AS creative_id,\r\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPAD,\r\nNULL AS OBJECT_STORY_LINK_DATA_DESCRIPTION,\r\nNULL AS TEMPLATE_APP_LINK_SPEC_IOS,\r\nNULL AS TITLE,\r\nNULL AS TEMPLATE_LINK,\r\nNULL AS VIDEO_CALL_TO_ACTION_VALUE_LINK,\r\nNULL AS ACTOR_ID,\r\nNULL AS OBJECT_STORY_LINK_DATA_CAPTION,\r\nNULL AS OBJECT_URL,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS EFFECTIVE_INSTAGRAM_STORY_ID,\r\nNULL AS PAGE_MESSAGE,\r\nNULL AS CAROUSEL_AD_LINK,\r\nNULL AS ASSET_FEED_SPEC_LINK_URLS,\r\nNULL AS OBJECT_STORY_ID,\r\nNULL AS CALL_TO_ACTION_TYPE,\r\nNULL AS USE_PAGE_ACTOR_OVERRIDE,\r\nNULL AS IMAGE_URL,\r\nNULL AS INSTAGRAM_PERMALINK_URL,\r\nNULL AS creative_name,\r\nNULL AS TEMPLATE_CHILD_ATTACHMENTS,\r\nNULL AS PAGE_LINK,\r\nNULL AS TEMPLATE_MESSAGE,\r\nNULL AS TEMPLATE_APP_LINK_SPEC_IPHONE,\r\nNULL AS TEMPLATE_PAGE_LINK,\r\nNULL AS OBJECT_STORY_LINK_DATA_LINK,\r\nNULL AS OBJECT_ID,\r\nNULL AS TEMPLATE_APP_LINK_SPEC_ANDROID,\r\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_ANDROID,\r\nNULL AS EFFECTIVE_OBJECT_STORY_ID,\r\nNULL AS PRODUCT_SET_ID,\r\nNULL AS IMAGE_FILE,\r\nNULL AS BODY,\r\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPHONE,\r\nNULL AS STATUS,\r\nNULL AS OBJECT_STORY_LINK_DATA_MESSAGE,\r\nNULL AS THUMBNAIL_URL,\r\nNULL AS TEMPLATE_DESCRIPTION,\r\nNULL AS VIDEO_ID,\r\nNULL AS INSTAGRAM_STORY_ID,\r\nNULL AS OBJECT_TYPE,\r\nNULL AS LINK_OG_ID,\r\nNULL AS BRANDED_CONTENT_SPONSOR_PAGE_ID,\r\nNULL AS TEMPLATE_CAPTION,\r\nNULL AS TEMPLATE_URL,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS IMAGE_HASH,\r\nNULL AS LINK_URL,\r\nNULL AS APPLINK_TREATMENT,\r\nNULL AS TEMPLATE_APP_LINK_SPEC_IPAD,\r\nNULL AS INSTAGRAM_ACTOR_ID,\r\nNULL AS OBJECT_STORY_LINK_DATA_CHILD_ATTACHMENTS,\r\nNULL AS URL_TAGS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Creative_History_FB"], "unique_id": "model.sales_dataflo.Stg_Creative_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Creative_History_FB.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Creative_History_FB.sql", "name": "Stg_Creative_History_FB", "resource_type": "model", "alias": "Stg_Creative_History_FB", "checksum": {"name": "sha256", "checksum": "110f20d8937d2f4c7ba9666d30de606b065c21bc118fa4cbf3ec2632f735a12b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Creative_History_FB.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IOS,\nNULL AS creative_id,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPAD,\nNULL AS OBJECT_STORY_LINK_DATA_DESCRIPTION,\nNULL AS TEMPLATE_APP_LINK_SPEC_IOS,\nNULL AS TITLE,\nNULL AS TEMPLATE_LINK,\nNULL AS VIDEO_CALL_TO_ACTION_VALUE_LINK,\nNULL AS ACTOR_ID,\nNULL AS OBJECT_STORY_LINK_DATA_CAPTION,\nNULL AS OBJECT_URL,\nNULL AS _FIVETRAN_ID,\nNULL AS EFFECTIVE_INSTAGRAM_STORY_ID,\nNULL AS PAGE_MESSAGE,\nNULL AS CAROUSEL_AD_LINK,\nNULL AS ASSET_FEED_SPEC_LINK_URLS,\nNULL AS OBJECT_STORY_ID,\nNULL AS CALL_TO_ACTION_TYPE,\nNULL AS USE_PAGE_ACTOR_OVERRIDE,\nNULL AS IMAGE_URL,\nNULL AS INSTAGRAM_PERMALINK_URL,\nNULL AS creative_name,\nNULL AS TEMPLATE_CHILD_ATTACHMENTS,\nNULL AS PAGE_LINK,\nNULL AS TEMPLATE_MESSAGE,\nNULL AS TEMPLATE_APP_LINK_SPEC_IPHONE,\nNULL AS TEMPLATE_PAGE_LINK,\nNULL AS OBJECT_STORY_LINK_DATA_LINK,\nNULL AS OBJECT_ID,\nNULL AS TEMPLATE_APP_LINK_SPEC_ANDROID,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_ANDROID,\nNULL AS EFFECTIVE_OBJECT_STORY_ID,\nNULL AS PRODUCT_SET_ID,\nNULL AS IMAGE_FILE,\nNULL AS BODY,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPHONE,\nNULL AS STATUS,\nNULL AS OBJECT_STORY_LINK_DATA_MESSAGE,\nNULL AS THUMBNAIL_URL,\nNULL AS TEMPLATE_DESCRIPTION,\nNULL AS VIDEO_ID,\nNULL AS INSTAGRAM_STORY_ID,\nNULL AS OBJECT_TYPE,\nNULL AS LINK_OG_ID,\nNULL AS BRANDED_CONTENT_SPONSOR_PAGE_ID,\nNULL AS TEMPLATE_CAPTION,\nNULL AS TEMPLATE_URL,\nNULL AS ACCOUNT_ID,\nNULL AS IMAGE_HASH,\nNULL AS LINK_URL,\nNULL AS APPLINK_TREATMENT,\nNULL AS TEMPLATE_APP_LINK_SPEC_IPAD,\nNULL AS INSTAGRAM_ACTOR_ID,\nNULL AS OBJECT_STORY_LINK_DATA_CHILD_ATTACHMENTS,\nNULL AS URL_TAGS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IOS,\nNULL AS creative_id,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPAD,\nNULL AS OBJECT_STORY_LINK_DATA_DESCRIPTION,\nNULL AS TEMPLATE_APP_LINK_SPEC_IOS,\nNULL AS TITLE,\nNULL AS TEMPLATE_LINK,\nNULL AS VIDEO_CALL_TO_ACTION_VALUE_LINK,\nNULL AS ACTOR_ID,\nNULL AS OBJECT_STORY_LINK_DATA_CAPTION,\nNULL AS OBJECT_URL,\nNULL AS _FIVETRAN_ID,\nNULL AS EFFECTIVE_INSTAGRAM_STORY_ID,\nNULL AS PAGE_MESSAGE,\nNULL AS CAROUSEL_AD_LINK,\nNULL AS ASSET_FEED_SPEC_LINK_URLS,\nNULL AS OBJECT_STORY_ID,\nNULL AS CALL_TO_ACTION_TYPE,\nNULL AS USE_PAGE_ACTOR_OVERRIDE,\nNULL AS IMAGE_URL,\nNULL AS INSTAGRAM_PERMALINK_URL,\nNULL AS creative_name,\nNULL AS TEMPLATE_CHILD_ATTACHMENTS,\nNULL AS PAGE_LINK,\nNULL AS TEMPLATE_MESSAGE,\nNULL AS TEMPLATE_APP_LINK_SPEC_IPHONE,\nNULL AS TEMPLATE_PAGE_LINK,\nNULL AS OBJECT_STORY_LINK_DATA_LINK,\nNULL AS OBJECT_ID,\nNULL AS TEMPLATE_APP_LINK_SPEC_ANDROID,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_ANDROID,\nNULL AS EFFECTIVE_OBJECT_STORY_ID,\nNULL AS PRODUCT_SET_ID,\nNULL AS IMAGE_FILE,\nNULL AS BODY,\nNULL AS OBJECT_STORY_LINK_DATA_APP_LINK_SPEC_IPHONE,\nNULL AS STATUS,\nNULL AS OBJECT_STORY_LINK_DATA_MESSAGE,\nNULL AS THUMBNAIL_URL,\nNULL AS TEMPLATE_DESCRIPTION,\nNULL AS VIDEO_ID,\nNULL AS INSTAGRAM_STORY_ID,\nNULL AS OBJECT_TYPE,\nNULL AS LINK_OG_ID,\nNULL AS BRANDED_CONTENT_SPONSOR_PAGE_ID,\nNULL AS TEMPLATE_CAPTION,\nNULL AS TEMPLATE_URL,\nNULL AS ACCOUNT_ID,\nNULL AS IMAGE_HASH,\nNULL AS LINK_URL,\nNULL AS APPLINK_TREATMENT,\nNULL AS TEMPLATE_APP_LINK_SPEC_IPAD,\nNULL AS INSTAGRAM_ACTOR_ID,\nNULL AS OBJECT_STORY_LINK_DATA_CHILD_ATTACHMENTS,\nNULL AS URL_TAGS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5758767127990723, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:49.341846Z", "completed_at": "2021-05-19T00:53:50.596977Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:50.597289Z", "completed_at": "2021-05-19T00:53:51.496323Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Engagement_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT WHERE Engagement_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Engagement_ID,\r\n        ID as Source_ID,\r\n        PORTAL_ID,\r\n        ACTIVE,\r\n        OWNER_ID,\r\n        TYPE,\r\n        ACTIVITY_TYPE,\r\n        CREATED_AT,\r\n        LAST_UPDATED,\r\n        TIMESTAMP,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS Engagement_ID,\r\n        null  AS Source_ID,\r\n        null  AS PORTAL_ID,\r\n        null  AS ACTIVE,\r\n        null  AS OWNER_ID,\r\n        null  AS TYPE,\r\n        null  AS ACTIVITY_TYPE,\r\n        null  AS CREATED_AT,\r\n        null  AS LAST_UPDATED,\r\n        null  AS TIMESTAMP,\r\n        null  AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement"], "unique_id": "model.sales_dataflo.Stg_Engagement", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement.sql", "name": "Stg_Engagement", "resource_type": "model", "alias": "Stg_Engagement", "checksum": {"name": "sha256", "checksum": "632ee3a31cc7ebd46a3af2930c931f0b746cbb058d3a029364fce0400d8a7df1"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT WHERE Engagement_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Engagement_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_ID,\n        ID as Source_ID,\n        PORTAL_ID,\n        ACTIVE,\n        OWNER_ID,\n        TYPE,\n        ACTIVITY_TYPE,\n        CREATED_AT,\n        LAST_UPDATED,\n        TIMESTAMP,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_ID,\n        ID as Source_ID,\n        PORTAL_ID,\n        ACTIVE,\n        OWNER_ID,\n        TYPE,\n        ACTIVITY_TYPE,\n        CREATED_AT,\n        LAST_UPDATED,\n        TIMESTAMP,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT\n     \n    \n"}, "error": null, "status": "SUCCESS 4374", "execution_time": 5.70154881477356, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:51.920272Z", "completed_at": "2021-05-19T00:53:53.338533Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:53.338854Z", "completed_at": "2021-05-19T00:53:57.189574Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_EVENTS_OVERVIEW WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %}  \r\n    \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        EVENT_CATEGORY,\r\n        EVENT_VALUE,\r\n        TOTAL_EVENTS,\r\n        SESSIONS_WITH_EVENT,\r\n        EVENTS_PER_SESSION_WITH_EVENT,\r\n        AVG_EVENT_VALUE,\r\n        UNIQUE_EVENTS,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_EVENTS_OVERVIEW_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.EVENTS_OVERVIEW\r\n    {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as EVENT_CATEGORY,\r\n        null as EVENT_VALUE,\r\n        null as TOTAL_EVENTS,\r\n        null as SESSIONS_WITH_EVENT,\r\n        null as EVENTS_PER_SESSION_WITH_EVENT,\r\n        null as AVG_EVENT_VALUE,\r\n        null as UNIQUE_EVENTS\r\n        from dual\r\n\r\n    \r\n        \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Events_Overview"], "unique_id": "model.sales_dataflo.Stg_Events_Overview", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Events_Overview.sql", "original_file_path": "ETL/Stage/GA/Stg_Events_Overview.sql", "name": "Stg_Events_Overview", "resource_type": "model", "alias": "Stg_Events_Overview", "checksum": {"name": "sha256", "checksum": "37e96d198a2856260d8f7cfd9591af262149930b8b8464da8b0913780ea02158"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_EVENTS_OVERVIEW WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Events_Overview.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n   \n    \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        EVENT_CATEGORY,\n        EVENT_VALUE,\n        TOTAL_EVENTS,\n        SESSIONS_WITH_EVENT,\n        EVENTS_PER_SESSION_WITH_EVENT,\n        AVG_EVENT_VALUE,\n        UNIQUE_EVENTS,\n        'GA_DATAFLO_22042021' as Source_type,\n        'D_EVENTS_OVERVIEW_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.EVENTS_OVERVIEW\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n   \n    \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        EVENT_CATEGORY,\n        EVENT_VALUE,\n        TOTAL_EVENTS,\n        SESSIONS_WITH_EVENT,\n        EVENTS_PER_SESSION_WITH_EVENT,\n        AVG_EVENT_VALUE,\n        UNIQUE_EVENTS,\n        'GA_DATAFLO_22042021' as Source_type,\n        'D_EVENTS_OVERVIEW_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.EVENTS_OVERVIEW\n    \n    \n"}, "error": null, "status": "SUCCESS 296", "execution_time": 5.701035022735596, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:53:57.624387Z", "completed_at": "2021-05-19T00:53:59.055384Z"}, {"name": "execute", "started_at": "2021-05-19T00:53:59.055678Z", "completed_at": "2021-05-19T00:54:02.893040Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_GOAL_CONVERSIONS WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        GOAL_COMPLETION_LOCATION,\r\n        GOAL_PREVIOUS_STEP_1,\r\n        GOAL_PREVIOUS_STEP_2,\r\n        GOAL_PREVIOUS_STEP_3,\r\n        GOAL_VALUE_ALL,\r\n        GOAL_COMPLETIONS_ALL,\r\n        GOAL_STARTS_ALL,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        GOAL_ABANDON_RATE_ALL,\r\n        GOAL_ABANDONS_ALL,\r\n        GOAL_VALUE_PER_SESSION,        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_GOAL_CONVERSIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.GOAL_CONVERSIONS\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n                {% elif  entity_typ == 'X'  %}  \r\n                select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as GOAL_COMPLETION_LOCATION,\r\n        null as GOAL_PREVIOUS_STEP_1,\r\n        null as GOAL_PREVIOUS_STEP_2,\r\n        null as GOAL_PREVIOUS_STEP_3,\r\n        null as GOAL_VALUE_ALL,\r\n        null as GOAL_COMPLETIONS_ALL,\r\n        null as GOAL_STARTS_ALL,\r\n        null as GOAL_CONVERSION_RATE_ALL,\r\n        null as GOAL_ABANDON_RATE_ALL,\r\n        null as GOAL_ABANDONS_ALL,\r\n        null as GOAL_VALUE_PER_SESSION\r\n        from dual\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Goal_Conversions"], "unique_id": "model.sales_dataflo.Stg_Goal_Conversions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Goal_Conversions.sql", "original_file_path": "ETL/Stage/GA/Stg_Goal_Conversions.sql", "name": "Stg_Goal_Conversions", "resource_type": "model", "alias": "Stg_Goal_Conversions", "checksum": {"name": "sha256", "checksum": "7b49c1c27e63ebb0f2e0a99a62deb5f92ce577c49039fb87cb86b37912a1e957"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_GOAL_CONVERSIONS WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Goal_Conversions.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        GOAL_COMPLETION_LOCATION,\n        GOAL_PREVIOUS_STEP_1,\n        GOAL_PREVIOUS_STEP_2,\n        GOAL_PREVIOUS_STEP_3,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDON_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_GOAL_CONVERSIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.GOAL_CONVERSIONS\n          \n                \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        GOAL_COMPLETION_LOCATION,\n        GOAL_PREVIOUS_STEP_1,\n        GOAL_PREVIOUS_STEP_2,\n        GOAL_PREVIOUS_STEP_3,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDON_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_GOAL_CONVERSIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.GOAL_CONVERSIONS\n          \n                \n"}, "error": null, "status": "SUCCESS 2934", "execution_time": 5.617675065994263, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:03.328016Z", "completed_at": "2021-05-19T00:54:04.591734Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:04.592027Z", "completed_at": "2021-05-19T00:54:08.513311Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PAGE_TRACKING WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        PAGE_TITLE,\r\n        LANDING_PAGE_PATH,\r\n        PAGE_PATH,\r\n        EXIT_PAGE_PATH,\r\n        PAGE_VALUE,\r\n        EXIT_RATE,\r\n        TIME_ON_PAGE,\r\n        PAGEVIEWS_PER_SESSION,\r\n        UNIQUE_PAGEVIEWS,\r\n        ENTRANCE_RATE,\r\n\r\n        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_TRACKING_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PAGE_TRACKING\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n        {% elif  entity_typ == 'X'  %} \r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as PAGE_TITLE,\r\n        null as LANDING_PAGE_PATH,\r\n        null as PAGE_PATH,\r\n        null as EXIT_PAGE_PATH,\r\n        null as PAGE_VALUE,\r\n        null as EXIT_RATE,\r\n        null as TIME_ON_PAGE,\r\n        null as PAGEVIEWS_PER_SESSION,\r\n        null as UNIQUE_PAGEVIEWS,\r\n        null as ENTRANCE_RATE\r\n        from dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Page_Tracking"], "unique_id": "model.sales_dataflo.Stg_Page_Tracking", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Page_Tracking.sql", "original_file_path": "ETL/Stage/GA/Stg_Page_Tracking.sql", "name": "Stg_Page_Tracking", "resource_type": "model", "alias": "Stg_Page_Tracking", "checksum": {"name": "sha256", "checksum": "1a65225e62243aebb4310216c36dc787f486d4406446f1267330cea7fa96b4b1"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PAGE_TRACKING WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Page_Tracking.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        LANDING_PAGE_PATH,\n        PAGE_PATH,\n        EXIT_PAGE_PATH,\n        PAGE_VALUE,\n        EXIT_RATE,\n        TIME_ON_PAGE,\n        PAGEVIEWS_PER_SESSION,\n        UNIQUE_PAGEVIEWS,\n        ENTRANCE_RATE,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_PAGE_TRACKING_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.PAGE_TRACKING\n            \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        LANDING_PAGE_PATH,\n        PAGE_PATH,\n        EXIT_PAGE_PATH,\n        PAGE_VALUE,\n        EXIT_RATE,\n        TIME_ON_PAGE,\n        PAGEVIEWS_PER_SESSION,\n        UNIQUE_PAGEVIEWS,\n        ENTRANCE_RATE,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_PAGE_TRACKING_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.PAGE_TRACKING\n            \n        \n"}, "error": null, "status": "SUCCESS 2255", "execution_time": 5.656189203262329, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:09.299349Z", "completed_at": "2021-05-19T00:54:10.706661Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:10.706988Z", "completed_at": "2021-05-19T00:54:14.526581Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_SESSION WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        SESSION_DURATION_BUCKET,\r\n        USER_TYPE,\r\n        HITS,\r\n        SESSIONS,\r\n        SESSIONS_PER_USER,\r\n        AVG_SESSION_DURATION,\r\n        BOUNCES,\r\n        SESSION_DURATION,\r\n        BOUNCE_RATE,\r\n\r\n        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_SESSION_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.SESSION\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as SESSION_DURATION_BUCKET,\r\n        null as USER_TYPE,\r\n        null as HITS,\r\n        null as SESSIONS,\r\n        null as SESSIONS_PER_USER,\r\n        null as AVG_SESSION_DURATION,\r\n        null as BOUNCES,\r\n        null as SESSION_DURATION,\r\n        null as BOUNCE_RATE\r\n        from dual       \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Session"], "unique_id": "model.sales_dataflo.Stg_Session", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Session.sql", "original_file_path": "ETL/Stage/GA/Stg_Session.sql", "name": "Stg_Session", "resource_type": "model", "alias": "Stg_Session", "checksum": {"name": "sha256", "checksum": "a8889da0fb412f161480a92fc527e9386d031007ca4f535b5a87fa5d3fe85445"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_SESSION WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Session.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        SESSION_DURATION_BUCKET,\n        USER_TYPE,\n        HITS,\n        SESSIONS,\n        SESSIONS_PER_USER,\n        AVG_SESSION_DURATION,\n        BOUNCES,\n        SESSION_DURATION,\n        BOUNCE_RATE,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_SESSION_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.SESSION\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        SESSION_DURATION_BUCKET,\n        USER_TYPE,\n        HITS,\n        SESSIONS,\n        SESSIONS_PER_USER,\n        AVG_SESSION_DURATION,\n        BOUNCES,\n        SESSION_DURATION,\n        BOUNCE_RATE,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_SESSION_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.SESSION\n           \n        \n"}, "error": null, "status": "SUCCESS 1226", "execution_time": 5.623878717422485, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:14.957999Z", "completed_at": "2021-05-19T00:54:16.398024Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:16.398358Z", "completed_at": "2021-05-19T00:54:20.156106Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GSC' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GSC'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('COUNTRY','DATE','DEVICE') }}  AS Site_Rept_ID,\r\n        COUNTRY,\r\n        DATE,\r\n        DEVICE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.SITE_REPORT_BY_SITE\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null as Site_Rept_ID,\r\n        NULL AS COUNTRY,\r\n        NULL as DATE,\r\n        NULL as DEVICE,\r\n        NULL as SEARCH_TYPE,\r\n        NULL as SITE,\r\n        NULL as CLICKS,\r\n        NULL as IMPRESSIONS,\r\n        NULL as CTR,\r\n        NULL as POSITION,\r\n        NULL as _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GSC", "Stg_Site_Report_By_Site"], "unique_id": "model.sales_dataflo.Stg_Site_Report_By_Site", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GSC/Stg_Site_Report_By_Site.sql", "original_file_path": "ETL/Stage/GSC/Stg_Site_Report_By_Site.sql", "name": "Stg_Site_Report_By_Site", "resource_type": "model", "alias": "Stg_Site_Report_By_Site", "checksum": {"name": "sha256", "checksum": "8877ec2a7d4f183a6a81efb431407995e792b04be88e16cf692491505d78cfa4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GSC/Stg_Site_Report_By_Site.sql", "deferred": false, "compiled_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(DEVICE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Site_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.SITE_REPORT_BY_SITE\n         \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(DEVICE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Site_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.SITE_REPORT_BY_SITE\n         \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.584351062774658, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:20.584691Z", "completed_at": "2021-05-19T00:54:21.845339Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:21.845717Z", "completed_at": "2021-05-19T00:54:22.746384Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_SOCIAL_MEDIA_ACQUISITIONS WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        SOCIAL_NETWORK,\r\n        SESSIONS,\r\n        NEW_USERS,\r\n        AVG_SESSION_DURATION,\r\n        TRANSACTION_REVENUE,\r\n        PAGEVIEWS_PER_SESSION,\r\n        TRANSACTIONS,\r\n        BOUNCE_RATE,\r\n        PAGEVIEWS,\r\n        PERCENT_NEW_SESSIONS,\r\n        TRANSACTIONS_PER_SESSION,\r\n       \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_SOCIAL_MEDIA_ACQUISITIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.SOCIAL_MEDIA_ACQUISITIONS\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %}\r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as SOCIAL_NETWORK,\r\n        null as SESSIONS,\r\n        null as NEW_USERS,\r\n        null as AVG_SESSION_DURATION,\r\n        null as TRANSACTION_REVENUE,\r\n        null as PAGEVIEWS_PER_SESSION,\r\n        null as TRANSACTIONS,\r\n        null as BOUNCE_RATE,\r\n        null as PAGEVIEWS,\r\n        null as PERCENT_NEW_SESSIONS,\r\n        null as TRANSACTIONS_PER_SESSION\r\n        from dual        \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Social_Media_Acquisitions"], "unique_id": "model.sales_dataflo.Stg_Social_Media_Acquisitions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Social_Media_Acquisitions.sql", "original_file_path": "ETL/Stage/GA/Stg_Social_Media_Acquisitions.sql", "name": "Stg_Social_Media_Acquisitions", "resource_type": "model", "alias": "Stg_Social_Media_Acquisitions", "checksum": {"name": "sha256", "checksum": "9604a9f1664d23aa4aa050065c9e9afd6eab174f2c2c4771b8d468817f3d2417"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_SOCIAL_MEDIA_ACQUISITIONS WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Social_Media_Acquisitions.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        SOCIAL_NETWORK,\n        SESSIONS,\n        NEW_USERS,\n        AVG_SESSION_DURATION,\n        TRANSACTION_REVENUE,\n        PAGEVIEWS_PER_SESSION,\n        TRANSACTIONS,\n        BOUNCE_RATE,\n        PAGEVIEWS,\n        PERCENT_NEW_SESSIONS,\n        TRANSACTIONS_PER_SESSION,\n       \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.SOCIAL_MEDIA_ACQUISITIONS\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        SOCIAL_NETWORK,\n        SESSIONS,\n        NEW_USERS,\n        AVG_SESSION_DURATION,\n        TRANSACTION_REVENUE,\n        PAGEVIEWS_PER_SESSION,\n        TRANSACTIONS,\n        BOUNCE_RATE,\n        PAGEVIEWS,\n        PERCENT_NEW_SESSIONS,\n        TRANSACTIONS_PER_SESSION,\n       \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.SOCIAL_MEDIA_ACQUISITIONS\n           \n        \n"}, "error": null, "status": "SUCCESS 323", "execution_time": 5.5397443771362305, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:23.171850Z", "completed_at": "2021-05-19T00:54:24.628083Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:24.628409Z", "completed_at": "2021-05-19T00:54:28.276109Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ADWORDS_KEYWORD WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        KEYWORD,\r\n        GOAL_VALUE_ALL,\r\n        SESSIONS,\r\n        GOAL_COMPLETIONS_ALL,\r\n        PAGEVIEWS_PER_SESSION,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        USERS,\r\n        BOUNCE_RATE,\r\n        AD_CLICKS,\r\n        AD_COST,\r\n        CPC,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_ADWORDS_KEYWORD_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.ADWORDS_KEYWORD\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as KEYWORD,\r\n        null as GOAL_VALUE_ALL,\r\n        null as SESSIONS,\r\n        null as GOAL_COMPLETIONS_ALL,\r\n        null as PAGEVIEWS_PER_SESSION,\r\n        null as GOAL_CONVERSION_RATE_ALL,\r\n        null as USERS,\r\n        null as BOUNCE_RATE,\r\n        null as AD_CLICKS,\r\n        null as AD_COST,\r\n        null as CPC\r\n        from dual\r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Adwords_Keyword"], "unique_id": "model.sales_dataflo.Stg_Adwords_Keyword", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Adwords_Keyword.sql", "original_file_path": "ETL/Stage/GA/Stg_Adwords_Keyword.sql", "name": "Stg_Adwords_Keyword", "resource_type": "model", "alias": "Stg_Adwords_Keyword", "checksum": {"name": "sha256", "checksum": "48733b0a265b45879a734b527813a5507e54a7bb3e5e530917165a9cdd81acae"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ADWORDS_KEYWORD WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Adwords_Keyword.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        KEYWORD,\n        GOAL_VALUE_ALL,\n        SESSIONS,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        AD_CLICKS,\n        AD_COST,\n        CPC,\n        'GA_DATAFLO_22042021' as Source_type,\n        'D_ADWORDS_KEYWORD_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.ADWORDS_KEYWORD\n          \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        KEYWORD,\n        GOAL_VALUE_ALL,\n        SESSIONS,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        AD_CLICKS,\n        AD_COST,\n        CPC,\n        'GA_DATAFLO_22042021' as Source_type,\n        'D_ADWORDS_KEYWORD_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.ADWORDS_KEYWORD\n          \n        \n"}, "error": null, "status": "SUCCESS 23676", "execution_time": 6.061026573181152, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:28.715853Z", "completed_at": "2021-05-19T00:54:30.151579Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:30.151857Z", "completed_at": "2021-05-19T00:54:34.341556Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('AD_ID') }}  AS BASIC_ID,\r\nAD_ID,\r\nCPM,\r\nDATE,\r\nADSET_NAME,\r\nAD_NAME,\r\nSPEND,\r\n_FIVETRAN_ID,\r\nFREQUENCY,\r\nREACH,\r\nCPC,\r\nINLINE_LINK_CLICKS,\r\nCTR,\r\nACCOUNT_ID,\r\nIMPRESSIONS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_AD\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS AD_ID,\r\nNULL AS CPM,\r\nNULL AS DATE,\r\nNULL AS ADSET_NAME,\r\nNULL AS AD_NAME,\r\nNULL AS SPEND,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS FREQUENCY,\r\nNULL AS REACH,\r\nNULL AS CPC,\r\nNULL AS INLINE_LINK_CLICKS,\r\nNULL AS CTR,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS IMPRESSIONS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Ad"], "unique_id": "model.sales_dataflo.Stg_Basic_Ad", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Ad.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad.sql", "name": "Stg_Basic_Ad", "resource_type": "model", "alias": "Stg_Basic_Ad", "checksum": {"name": "sha256", "checksum": "6e3d90c4b9866faaccbe42b74560fcbfe3bb7aacea0040060c33ca4844dcbd54"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS AD_ID,\nNULL AS CPM,\nNULL AS DATE,\nNULL AS ADSET_NAME,\nNULL AS AD_NAME,\nNULL AS SPEND,\nNULL AS _FIVETRAN_ID,\nNULL AS FREQUENCY,\nNULL AS REACH,\nNULL AS CPC,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CTR,\nNULL AS ACCOUNT_ID,\nNULL AS IMPRESSIONS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS AD_ID,\nNULL AS CPM,\nNULL AS DATE,\nNULL AS ADSET_NAME,\nNULL AS AD_NAME,\nNULL AS SPEND,\nNULL AS _FIVETRAN_ID,\nNULL AS FREQUENCY,\nNULL AS REACH,\nNULL AS CPC,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CTR,\nNULL AS ACCOUNT_ID,\nNULL AS IMPRESSIONS,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5579400062561035, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:34.779346Z", "completed_at": "2021-05-19T00:54:36.027240Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:36.027539Z", "completed_at": "2021-05-19T00:54:36.916708Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_GEO_NETWORK WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        CONTINENT,\r\n        COUNTRY,\r\n        CITY,\r\n        METRO,\r\n        REGION,\r\n        NETWORK_LOCATION,\r\n        SESSIONS,\r\n        USERS,\r\n\r\n        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_GEO_NETWORK_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.GEO_NETWORK\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}        \r\n    \r\n    {% elif  entity_typ == 'X'  %}    \r\n    select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as CONTINENT,\r\n        null as COUNTRY,\r\n        null as CITY,\r\n        null as METRO,\r\n        null as REGION,\r\n        null as NETWORK_LOCATION,\r\n        null as SESSIONS,\r\n        null as USERS\r\n        from dual\r\n        {% endif %}\r\n\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Geo_Network"], "unique_id": "model.sales_dataflo.Stg_Geo_Network", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Geo_Network.sql", "original_file_path": "ETL/Stage/GA/Stg_Geo_Network.sql", "name": "Stg_Geo_Network", "resource_type": "model", "alias": "Stg_Geo_Network", "checksum": {"name": "sha256", "checksum": "d144f6df42330271ceb8cf8177ddf5a861d5b24cc1c6a3e63836ad4e27d1443b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_GEO_NETWORK WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Geo_Network.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        CONTINENT,\n        COUNTRY,\n        CITY,\n        METRO,\n        REGION,\n        NETWORK_LOCATION,\n        SESSIONS,\n        USERS,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_GEO_NETWORK_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.GEO_NETWORK\n                  \n    \n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        CONTINENT,\n        COUNTRY,\n        CITY,\n        METRO,\n        REGION,\n        NETWORK_LOCATION,\n        SESSIONS,\n        USERS,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_GEO_NETWORK_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.GEO_NETWORK\n                  \n    \n    \n\n"}, "error": null, "status": "SUCCESS 1203", "execution_time": 5.504480838775635, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:37.339923Z", "completed_at": "2021-05-19T00:54:38.572214Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:38.572576Z", "completed_at": "2021-05-19T00:54:42.416687Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GSC' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GSC'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('COUNTRY','DATE','DEVICE','KEYWORD') }}  AS Site_Rept_ID,\r\n        COUNTRY,\r\n        DATE,\r\n        DEVICE,\r\n        KEYWORD,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.KEYWORD_SITE_REPORT_BY_SITE\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null as Site_Rept_ID,\r\n        NULL AS COUNTRY,\r\n        NULL as DATE,\r\n        NULL as DEVICE,\r\n        NULL as KEYWORD,\r\n        NULL as SEARCH_TYPE,\r\n        NULL as SITE,\r\n        NULL as CLICKS,\r\n        NULL as IMPRESSIONS,\r\n        NULL as CTR,\r\n        NULL as POSITION,\r\n        NULL as _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GSC", "Stg_Keyword_Site_Report_By_Site"], "unique_id": "model.sales_dataflo.Stg_Keyword_Site_Report_By_Site", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GSC/Stg_Keyword_Site_Report_By_Site.sql", "original_file_path": "ETL/Stage/GSC/Stg_Keyword_Site_Report_By_Site.sql", "name": "Stg_Keyword_Site_Report_By_Site", "resource_type": "model", "alias": "Stg_Keyword_Site_Report_By_Site", "checksum": {"name": "sha256", "checksum": "a26d5ac20d4296dd5c48285aa2b1220da3184028243d2a3358436b7fb217fd7d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GSC/Stg_Keyword_Site_Report_By_Site.sql", "deferred": false, "compiled_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(DEVICE as \n    varchar\n), '') || '-' || coalesce(cast(KEYWORD as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Site_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        KEYWORD,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.KEYWORD_SITE_REPORT_BY_SITE\n         \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(DEVICE as \n    varchar\n), '') || '-' || coalesce(cast(KEYWORD as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Site_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        KEYWORD,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_SITE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.KEYWORD_SITE_REPORT_BY_SITE\n         \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.770874261856079, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:42.848599Z", "completed_at": "2021-05-19T00:54:44.290713Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:44.291019Z", "completed_at": "2021-05-19T00:54:45.194883Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GSC' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GSC'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('COUNTRY','DATE','PAGE') }}  AS Page_Rept_ID,\r\n        COUNTRY,\r\n        DATE,\r\n        DEVICE,\r\n        PAGE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PAGE_REPORT\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS Page_Rept_ID,\r\n       NULL AS COUNTRY,\r\n       NULL AS DATE,\r\n       NULL AS DEVICE,\r\n       NULL AS PAGE,\r\n       NULL AS SEARCH_TYPE,\r\n       NULL AS SITE,\r\n       NULL AS CLICKS,\r\n       NULL AS IMPRESSIONS,\r\n       NULL AS CTR,\r\n       NULL AS POSITION,\r\n       NULL AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GSC", "Stg_Page_Report"], "unique_id": "model.sales_dataflo.Stg_Page_Report", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GSC/Stg_Page_Report.sql", "original_file_path": "ETL/Stage/GSC/Stg_Page_Report.sql", "name": "Stg_Page_Report", "resource_type": "model", "alias": "Stg_Page_Report", "checksum": {"name": "sha256", "checksum": "fba744766d7d3b26b90f4948134f0529e5e4d21c7186242baef556956249eeda"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GSC/Stg_Page_Report.sql", "deferred": false, "compiled_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(PAGE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Page_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.PAGE_REPORT\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(PAGE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Page_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.PAGE_REPORT\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7471134662628174, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:45.621898Z", "completed_at": "2021-05-19T00:54:47.045551Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:47.045861Z", "completed_at": "2021-05-19T00:54:47.944505Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PLATFORM_DEVICE WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        MOBILE_DEVICE_BRANDING,\r\n        DEVICE_CATEGORY,\r\n        MOBILE_DEVICE_MODEL,\r\n        MOBILE_INPUT_SELECTOR,\r\n        OPERATING_SYSTEM,\r\n        DATA_SOURCE,\r\n        GOAL_VALUE_ALL,\r\n        GOAL_COMPLETIONS_ALL,\r\n        GOAL_STARTS_ALL,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        GOAL_ABANDONS_ALL,\r\n        GOAL_VALUE_PER_SESSION,\r\n\r\n        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PLATFORM_DEVICE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PLATFORM_DEVICE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as MOBILE_DEVICE_BRANDING,\r\n        null as DEVICE_CATEGORY,\r\n        null as MOBILE_DEVICE_MODEL,\r\n        null as MOBILE_INPUT_SELECTOR,\r\n        null as OPERATING_SYSTEM,\r\n        null as DATA_SOURCE,\r\n        null as GOAL_VALUE_ALL,\r\n        null as GOAL_COMPLETIONS_ALL,\r\n        null as GOAL_STARTS_ALL,\r\n        null as GOAL_CONVERSION_RATE_ALL,\r\n        null as GOAL_ABANDONS_ALL,\r\n        null as GOAL_VALUE_PER_SESSION\r\n        from dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Platform_Device"], "unique_id": "model.sales_dataflo.Stg_Platform_Device", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Platform_Device.sql", "original_file_path": "ETL/Stage/GA/Stg_Platform_Device.sql", "name": "Stg_Platform_Device", "resource_type": "model", "alias": "Stg_Platform_Device", "checksum": {"name": "sha256", "checksum": "98eeff079bdb1e2ceabb8037f6b661c5fb257a87f92ac9d1719dff6ff448ddc8"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PLATFORM_DEVICE WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Platform_Device.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        MOBILE_DEVICE_BRANDING,\n        DEVICE_CATEGORY,\n        MOBILE_DEVICE_MODEL,\n        MOBILE_INPUT_SELECTOR,\n        OPERATING_SYSTEM,\n        DATA_SOURCE,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_PLATFORM_DEVICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.PLATFORM_DEVICE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        MOBILE_DEVICE_BRANDING,\n        DEVICE_CATEGORY,\n        MOBILE_DEVICE_MODEL,\n        MOBILE_INPUT_SELECTOR,\n        OPERATING_SYSTEM,\n        DATA_SOURCE,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n\n        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_PLATFORM_DEVICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.PLATFORM_DEVICE\n           \n        \n"}, "error": null, "status": "SUCCESS 300", "execution_time": 5.694624185562134, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:48.371587Z", "completed_at": "2021-05-19T00:54:49.612416Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:49.612685Z", "completed_at": "2021-05-19T00:54:53.634456Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_TRAFFIC WHERE ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID','PROFILE','DATE') }}  AS ID,\r\n        DATE,\r\n        PROFILE,\r\n        PAGE_TITLE,\r\n        PAGEVIEWS,\r\n        AVG_TIME_ON_PAGE,\r\n        PAGE_VALUE,\r\n        UNIQUE_PAGEVIEWS,\r\n        EXIT_RATE,\r\n        ENTRANCES,\r\n        USERS,\r\n        BOUNCE_RATE,        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.traffic\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}  \r\n        {% elif  entity_typ == 'X'  %}  \r\n        select\r\n        null as DATE,\r\n        null as PROFILE,\r\n        null as PAGE_TITLE,\r\n        null as PAGEVIEWS,\r\n        null as AVG_TIME_ON_PAGE,\r\n        null as PAGE_VALUE,\r\n        null as UNIQUE_PAGEVIEWS,\r\n        null as EXIT_RATE,\r\n        null as ENTRANCES,\r\n        null as USERS,\r\n        null as BOUNCE_RATE\r\n        from dual     \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GA", "Stg_Traffic"], "unique_id": "model.sales_dataflo.Stg_Traffic", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GA/Stg_Traffic.sql", "original_file_path": "ETL/Stage/GA/Stg_Traffic.sql", "name": "Stg_Traffic", "resource_type": "model", "alias": "Stg_Traffic", "checksum": {"name": "sha256", "checksum": "335d227313eedd5b57f85ab654b3259fbe20b82dec294f85001af61452061591"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_TRAFFIC WHERE ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GA/Stg_Traffic.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        PAGEVIEWS,\n        AVG_TIME_ON_PAGE,\n        PAGE_VALUE,\n        UNIQUE_PAGEVIEWS,\n        EXIT_RATE,\n        ENTRANCES,\n        USERS,\n        BOUNCE_RATE,        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.traffic\n            \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '') || '-' || coalesce(cast(PROFILE as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        PAGEVIEWS,\n        AVG_TIME_ON_PAGE,\n        PAGE_VALUE,\n        UNIQUE_PAGEVIEWS,\n        EXIT_RATE,\n        ENTRANCES,\n        USERS,\n        BOUNCE_RATE,        \n        'GA_DATAFLO_22042021' as Source_type,\n        'D_TRAFFIC_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_DATAFLO_22042021.traffic\n            \n        \n"}, "error": null, "status": "SUCCESS 1142", "execution_time": 5.486370801925659, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:54.068915Z", "completed_at": "2021-05-19T00:54:55.376539Z"}, {"name": "execute", "started_at": "2021-05-19T00:54:55.376833Z", "completed_at": "2021-05-19T00:54:59.119228Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GSC' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GSC'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('COUNTRY','DATE','PAGE') }}  AS Page_Rept_ID,\r\n        COUNTRY,\r\n        DATE,\r\n        DEVICE,\r\n        KEYWORD,\r\n        PAGE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.KEYWORD_PAGE_REPORT\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS Page_Rept_ID,\r\n       NULL AS COUNTRY,\r\n       NULL AS DATE,\r\n       NULL AS DEVICE,\r\n       NULL AS KEYWORD,\r\n       NULL AS PAGE,\r\n       NULL AS SEARCH_TYPE,\r\n       NULL AS SITE,\r\n       NULL AS CLICKS,\r\n       NULL AS IMPRESSIONS,\r\n       NULL AS CTR,\r\n       NULL AS POSITION,\r\n       NULL AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "GSC", "Stg_Keyword_Page_Report"], "unique_id": "model.sales_dataflo.Stg_Keyword_Page_Report", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/GSC/Stg_Keyword_Page_Report.sql", "original_file_path": "ETL/Stage/GSC/Stg_Keyword_Page_Report.sql", "name": "Stg_Keyword_Page_Report", "resource_type": "model", "alias": "Stg_Keyword_Page_Report", "checksum": {"name": "sha256", "checksum": "a564989606abb2c4834823f015ba780cd2f77b742d6a355eec9cbfce5a21b33c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/GSC/Stg_Keyword_Page_Report.sql", "deferred": false, "compiled_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(PAGE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Page_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        KEYWORD,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.KEYWORD_PAGE_REPORT\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(COUNTRY as \n    varchar\n), '') || '-' || coalesce(cast(DATE as \n    varchar\n), '') || '-' || coalesce(cast(PAGE as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Page_Rept_ID,\n        COUNTRY,\n        DATE,\n        DEVICE,\n        KEYWORD,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        'GSC_ANANDLIVE_14052021' as Source_type,\n        'D_PAGE_REPORT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GSC_ANANDLIVE_14052021.KEYWORD_PAGE_REPORT\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7621281147003174, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:54:59.559205Z", "completed_at": "2021-05-19T00:55:01.011267Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:01.011588Z", "completed_at": "2021-05-19T00:55:01.898623Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'SF' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Opportunity_Calc_id',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_OPPORTUNITY_HISTORY WHERE Opportunity_Calc_id IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}   \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Opportunity_Calc_id,\r\n        ID as Source_ID,        \r\n        OPPORTUNITY_ID,\r\n        CREATED_BY_ID,\r\n        CREATED_DATE,\r\n        STAGE_NAME,\r\n        AMOUNT,\r\n        EXPECTED_REVENUE,\r\n        CLOSE_DATE,\r\n        PROBABILITY,\r\n        FORECAST_CATEGORY,\r\n        SYSTEM_MODSTAMP,\r\n        IS_DELETED,\r\n        PREV_AMOUNT,\r\n        PREV_CLOSE_DATE,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_OPPORTUNITY_HISTORY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.OPPORTUNITY_HISTORY \r\n           {% if not loop.last %}\r\n            UNION ALL\r\n           {% endif %}  \r\n{% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as Stage_id,\r\n        null as  Source_ID,\r\n        null as MASTER_LABEL,\r\n        null as API_NAME,\r\n        null as IS_ACTIVE,\r\n        null as SORT_ORDER,\r\n        null as IS_CLOSED,\r\n        null as IS_WON,\r\n        null as FORECAST_CATEGORY,\r\n        null as FORECAST_CATEGORY_NAME,\r\n        null as DEFAULT_PROBABILITY,\r\n        null as DESCRIPTION,\r\n        null as CREATED_BY_ID,\r\n        null as CREATED_DATE,\r\n        null as LAST_MODIFIED_BY_ID,\r\n        null as LAST_MODIFIED_DATE,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3   \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "SF", "Stg_Opportunity_History"], "unique_id": "model.sales_dataflo.Stg_Opportunity_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/SF/Stg_Opportunity_History.sql", "original_file_path": "ETL/Stage/SF/Stg_Opportunity_History.sql", "name": "Stg_Opportunity_History", "resource_type": "model", "alias": "Stg_Opportunity_History", "checksum": {"name": "sha256", "checksum": "b2e8e416ac77688d4652e02a58e8f3ddcd1c8c0855d8db0eddd9999d6335ac57"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_OPPORTUNITY_HISTORY WHERE Opportunity_Calc_id IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Opportunity_Calc_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/SF/Stg_Opportunity_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Opportunity_Calc_id,\n        ID as Source_ID,        \n        OPPORTUNITY_ID,\n        CREATED_BY_ID,\n        CREATED_DATE,\n        STAGE_NAME,\n        AMOUNT,\n        EXPECTED_REVENUE,\n        CLOSE_DATE,\n        PROBABILITY,\n        FORECAST_CATEGORY,\n        SYSTEM_MODSTAMP,\n        IS_DELETED,\n        PREV_AMOUNT,\n        PREV_CLOSE_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITY_HISTORY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.OPPORTUNITY_HISTORY \n             \n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Opportunity_Calc_id,\n        ID as Source_ID,        \n        OPPORTUNITY_ID,\n        CREATED_BY_ID,\n        CREATED_DATE,\n        STAGE_NAME,\n        AMOUNT,\n        EXPECTED_REVENUE,\n        CLOSE_DATE,\n        PROBABILITY,\n        FORECAST_CATEGORY,\n        SYSTEM_MODSTAMP,\n        IS_DELETED,\n        PREV_AMOUNT,\n        PREV_CLOSE_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'SF_RKLIVE_06012021' as Source_type,\n        'D_OPPORTUNITY_HISTORY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SF_RKLIVE_06012021.OPPORTUNITY_HISTORY \n             \n\n"}, "error": null, "status": "SUCCESS 279742", "execution_time": 11.971506357192993, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:02.324642Z", "completed_at": "2021-05-19T00:55:03.738009Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:03.738305Z", "completed_at": "2021-05-19T00:55:13.861447Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nselect *from (\r\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 9 metric_category_id,'Awareness' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 10 metric_category_id,'Basic' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 11 metric_category_id,'Engagement' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 12 metric_category_id,'Analysis' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 13 metric_category_id,'Cost' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 14 metric_category_id,'Conversions' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\n)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Metrics_Category"], "unique_id": "model.sales_dataflo.Dim_Metrics_Category", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Metrics_Category.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Metrics_Category.sql", "name": "Dim_Metrics_Category", "resource_type": "model", "alias": "Dim_Metrics_Category", "checksum": {"name": "sha256", "checksum": "10248991999a17fef5d694693649c34c53307e2eef78b0dd287ad6a76d666523"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Metrics_Category.sql", "deferred": false, "compiled_sql": "\n\nselect *from (\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 metric_category_id,'Awareness' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 metric_category_id,'Basic' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 metric_category_id,'Engagement' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 metric_category_id,'Analysis' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 metric_category_id,'Cost' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 metric_category_id,'Conversions' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect *from (\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 metric_category_id,'Awareness' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 metric_category_id,'Basic' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 metric_category_id,'Engagement' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 metric_category_id,'Analysis' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 metric_category_id,'Cost' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 metric_category_id,'Conversions' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.9653382301330566, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:14.298661Z", "completed_at": "2021-05-19T00:55:14.331587Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:14.331913Z", "completed_at": "2021-05-19T00:55:16.840666Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS ACC_ID,\r\n        TEST_ACCOUNT,\r\n        DATE_TIMEZONE,\r\n        ID,\r\n        ACCOUNT_LABEL_ID,\r\n        ACCOUNT_LABEL_NAME,\r\n        CURRENCY_CODE,\r\n        _FIVETRAN_SYNCED,\r\n        MANAGER_CUSTOMER_ID,\r\n        SEQUENCE_ID,\r\n        NAME,\r\n        CAN_MANAGE_CLIENTS,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.ACCOUNT\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       Null As TEST_ACCOUNT,\r\nNull As DATE_TIMEZONE,\r\nNull As ID,\r\nNull As ACCOUNT_LABEL_ID,\r\nNull As ACCOUNT_LABEL_NAME,\r\nNull As CURRENCY_CODE,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As MANAGER_CUSTOMER_ID,\r\nNull As SEQUENCE_ID,\r\nNull As NAME,\r\nNull As CAN_MANAGE_CLIENTS,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Account_GA"], "unique_id": "model.sales_dataflo.Stg_Account_GA", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Account_GA.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Account_GA.sql", "name": "Stg_Account_GA", "resource_type": "model", "alias": "Stg_Account_GA", "checksum": {"name": "sha256", "checksum": "a9befde07f235da85f4109b336ed745bd0e29f8c76ecfb80cacc5d82c3d061c9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Account_GA.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n        TEST_ACCOUNT,\n        DATE_TIMEZONE,\n        ID,\n        ACCOUNT_LABEL_ID,\n        ACCOUNT_LABEL_NAME,\n        CURRENCY_CODE,\n        _FIVETRAN_SYNCED,\n        MANAGER_CUSTOMER_ID,\n        SEQUENCE_ID,\n        NAME,\n        CAN_MANAGE_CLIENTS,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.ACCOUNT\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n        TEST_ACCOUNT,\n        DATE_TIMEZONE,\n        ID,\n        ACCOUNT_LABEL_ID,\n        ACCOUNT_LABEL_NAME,\n        CURRENCY_CODE,\n        _FIVETRAN_SYNCED,\n        MANAGER_CUSTOMER_ID,\n        SEQUENCE_ID,\n        NAME,\n        CAN_MANAGE_CLIENTS,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.ACCOUNT\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.749451160430908, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:17.266526Z", "completed_at": "2021-05-19T00:55:18.686958Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:18.687341Z", "completed_at": "2021-05-19T00:55:19.595209Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ID,\r\n       DATE,\r\nCUSTOMER_ID,\r\n_FIVETRAN_ID,\r\n_FIVETRAN_SYNCED,\r\nALL_CONVERSIONS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.ACCOUNT_PERFORMANCE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null As DATE,\r\nNull As CUSTOMER_ID,\r\nNull As _FIVETRAN_ID,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As ALL_CONVERSIONS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Account_Performance"], "unique_id": "model.sales_dataflo.Stg_Account_Performance", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Account_Performance.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Account_Performance.sql", "name": "Stg_Account_Performance", "resource_type": "model", "alias": "Stg_Account_Performance", "checksum": {"name": "sha256", "checksum": "27126e3cd9554b4441719058fa1dcb0083af62dde1bca67cea8ec40570855d63"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Account_Performance.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n       DATE,\nCUSTOMER_ID,\n_FIVETRAN_ID,\n_FIVETRAN_SYNCED,\nALL_CONVERSIONS,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.ACCOUNT_PERFORMANCE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n       DATE,\nCUSTOMER_ID,\n_FIVETRAN_ID,\n_FIVETRAN_SYNCED,\nALL_CONVERSIONS,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.ACCOUNT_PERFORMANCE\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5837137699127197, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:20.018505Z", "completed_at": "2021-05-19T00:55:21.251376Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:21.251693Z", "completed_at": "2021-05-19T00:55:22.174594Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~ \" where DATASOURCE_TYPE = 'LI_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'LI_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('CAMPAIGN_ID','DAY') }}  AS ID,\r\n       LEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\r\nVIDEO_COMPLETIONS,\r\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nVIRAL_FULL_SCREEN_PLAYS,\r\nVIRAL_SHARES,\r\nAD_UNIT_CLICKS,\r\nVIRAL_CARD_CLICKS,\r\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nVIRAL_IMPRESSIONS,\r\nEXTERNAL_WEBSITE_CONVERSIONS,\r\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\r\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nCAMPAIGN_ID,\r\nVIRAL_TOTAL_ENGAGEMENTS,\r\nOPENS,\r\nOTHER_ENGAGEMENTS,\r\nVIRAL_VIDEO_VIEWS,\r\nCARD_IMPRESSIONS,\r\nCLICKS,\r\nVIRAL_COMMENTS,\r\nCOMMENTS,\r\nTEXT_URL_CLICKS,\r\nTOTAL_ENGAGEMENTS,\r\nVIDEO_MIDPOINT_COMPLETIONS,\r\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nACTION_CLICKS,\r\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nVIRAL_FOLLOWS,\r\nVIRAL_OTHER_ENGAGEMENTS,\r\nCOST_IN_USD,\r\nDAY,\r\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\r\nVIDEO_STARTS,\r\nVIRAL_LIKES,\r\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nVIRAL_LANDING_PAGE_CLICKS,\r\nCOMMENT_LIKES,\r\nCOMPANY_PAGE_CLICKS,\r\nIMPRESSIONS,\r\nCOST_IN_LOCAL_CURRENCY,\r\nFOLLOWS,\r\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\r\nVIRAL_CARD_IMPRESSIONS,\r\nSHARES,\r\nVIRAL_VIDEO_STARTS,\r\nONE_CLICK_LEAD_FORM_OPENS,\r\nLANDING_PAGE_CLICKS,\r\nVIRAL_VIDEO_COMPLETIONS,\r\nCARD_CLICKS,\r\nVIRAL_COMPANY_PAGE_CLICKS,\r\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\r\nFULL_SCREEN_PLAYS,\r\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nVIDEO_VIEWS,\r\nVIRAL_CLICKS,\r\nVIRAL_COMMENT_LIKES,\r\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\r\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\r\nVIRAL_ONE_CLICK_LEADS,\r\nLIKES,\r\nONE_CLICK_LEADS,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}. AD_ANALYTICS_BY_CAMPAIGN\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS LEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\r\nNULL AS VIDEO_COMPLETIONS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nNULL AS VIRAL_FULL_SCREEN_PLAYS,\r\nNULL AS VIRAL_SHARES,\r\nNULL AS AD_UNIT_CLICKS,\r\nNULL AS VIRAL_CARD_CLICKS,\r\nNULL AS EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\r\nNULL AS VIRAL_IMPRESSIONS,\r\nNULL AS EXTERNAL_WEBSITE_CONVERSIONS,\r\nNULL AS CONVERSION_VALUE_IN_LOCAL_CURRENCY,\r\nNULL AS VIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nNULL AS CAMPAIGN_ID,\r\nNULL AS VIRAL_TOTAL_ENGAGEMENTS,\r\nNULL AS OPENS,\r\nNULL AS OTHER_ENGAGEMENTS,\r\nNULL AS VIRAL_VIDEO_VIEWS,\r\nNULL AS CARD_IMPRESSIONS,\r\nNULL AS CLICKS,\r\nNULL AS VIRAL_COMMENTS,\r\nNULL AS COMMENTS,\r\nNULL AS TEXT_URL_CLICKS,\r\nNULL AS TOTAL_ENGAGEMENTS,\r\nNULL AS VIDEO_MIDPOINT_COMPLETIONS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nNULL AS ACTION_CLICKS,\r\nNULL AS EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\r\nNULL AS VIRAL_FOLLOWS,\r\nNULL AS VIRAL_OTHER_ENGAGEMENTS,\r\nNULL AS COST_IN_USD,\r\nNULL AS DAY,\r\nNULL AS VIRAL_ONE_CLICK_LEAD_FORM_OPENS,\r\nNULL AS VIDEO_STARTS,\r\nNULL AS VIRAL_LIKES,\r\nNULL AS VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nNULL AS VIRAL_LANDING_PAGE_CLICKS,\r\nNULL AS COMMENT_LIKES,\r\nNULL AS COMPANY_PAGE_CLICKS,\r\nNULL AS IMPRESSIONS,\r\nNULL AS COST_IN_LOCAL_CURRENCY,\r\nNULL AS FOLLOWS,\r\nNULL AS LEAD_GENERATION_MAIL_INTERESTED_CLICKS,\r\nNULL AS VIRAL_CARD_IMPRESSIONS,\r\nNULL AS SHARES,\r\nNULL AS VIRAL_VIDEO_STARTS,\r\nNULL AS ONE_CLICK_LEAD_FORM_OPENS,\r\nNULL AS LANDING_PAGE_CLICKS,\r\nNULL AS VIRAL_VIDEO_COMPLETIONS,\r\nNULL AS CARD_CLICKS,\r\nNULL AS VIRAL_COMPANY_PAGE_CLICKS,\r\nNULL AS VIRAL_VIDEO_MIDPOINT_COMPLETIONS,\r\nNULL AS FULL_SCREEN_PLAYS,\r\nNULL AS VIDEO_FIRST_QUARTILE_COMPLETIONS,\r\nNULL AS VIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\r\nNULL AS VIDEO_VIEWS,\r\nNULL AS VIRAL_CLICKS,\r\nNULL AS VIRAL_COMMENT_LIKES,\r\nNULL AS APPROXIMATE_UNIQUE_IMPRESSIONS,\r\nNULL AS VIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\r\nNULL AS VIRAL_ONE_CLICK_LEADS,\r\nNULL AS LIKES,\r\nNULL AS ONE_CLICK_LEADS,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "LI_Ads", "Stg_Ad_Analytics_By_Campagin"], "unique_id": "model.sales_dataflo.Stg_Ad_Analytics_By_Campagin", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Campagin.sql", "original_file_path": "ETL/Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Campagin.sql", "name": "Stg_Ad_Analytics_By_Campagin", "resource_type": "model", "alias": "Stg_Ad_Analytics_By_Campagin", "checksum": {"name": "sha256", "checksum": "033de7f4410fc65aa99a58c6e77cffd64f6aad18dc4483a48b50cd451946c975"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/LI_Ads/Stg_Ad_Analytics_By_Campagin.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(CAMPAIGN_ID as \n    varchar\n), '') || '-' || coalesce(cast(DAY as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n       LEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\nVIDEO_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_FULL_SCREEN_PLAYS,\nVIRAL_SHARES,\nAD_UNIT_CLICKS,\nVIRAL_CARD_CLICKS,\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_IMPRESSIONS,\nEXTERNAL_WEBSITE_CONVERSIONS,\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\nCAMPAIGN_ID,\nVIRAL_TOTAL_ENGAGEMENTS,\nOPENS,\nOTHER_ENGAGEMENTS,\nVIRAL_VIDEO_VIEWS,\nCARD_IMPRESSIONS,\nCLICKS,\nVIRAL_COMMENTS,\nCOMMENTS,\nTEXT_URL_CLICKS,\nTOTAL_ENGAGEMENTS,\nVIDEO_MIDPOINT_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nACTION_CLICKS,\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nVIRAL_FOLLOWS,\nVIRAL_OTHER_ENGAGEMENTS,\nCOST_IN_USD,\nDAY,\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\nVIDEO_STARTS,\nVIRAL_LIKES,\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIRAL_LANDING_PAGE_CLICKS,\nCOMMENT_LIKES,\nCOMPANY_PAGE_CLICKS,\nIMPRESSIONS,\nCOST_IN_LOCAL_CURRENCY,\nFOLLOWS,\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\nVIRAL_CARD_IMPRESSIONS,\nSHARES,\nVIRAL_VIDEO_STARTS,\nONE_CLICK_LEAD_FORM_OPENS,\nLANDING_PAGE_CLICKS,\nVIRAL_VIDEO_COMPLETIONS,\nCARD_CLICKS,\nVIRAL_COMPANY_PAGE_CLICKS,\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\nFULL_SCREEN_PLAYS,\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIDEO_VIEWS,\nVIRAL_CLICKS,\nVIRAL_COMMENT_LIKES,\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\nVIRAL_ONE_CLICK_LEADS,\nLIKES,\nONE_CLICK_LEADS,\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021. AD_ANALYTICS_BY_CAMPAIGN\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(CAMPAIGN_ID as \n    varchar\n), '') || '-' || coalesce(cast(DAY as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n       LEAD_GENERATION_MAIL_CONTACT_INFO_SHARES,\nVIDEO_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_FULL_SCREEN_PLAYS,\nVIRAL_SHARES,\nAD_UNIT_CLICKS,\nVIRAL_CARD_CLICKS,\nEXTERNAL_WEBSITE_POST_CLICK_CONVERSIONS,\nVIRAL_IMPRESSIONS,\nEXTERNAL_WEBSITE_CONVERSIONS,\nCONVERSION_VALUE_IN_LOCAL_CURRENCY,\nVIRAL_VIDEO_FIRST_QUARTILE_COMPLETIONS,\nCAMPAIGN_ID,\nVIRAL_TOTAL_ENGAGEMENTS,\nOPENS,\nOTHER_ENGAGEMENTS,\nVIRAL_VIDEO_VIEWS,\nCARD_IMPRESSIONS,\nCLICKS,\nVIRAL_COMMENTS,\nCOMMENTS,\nTEXT_URL_CLICKS,\nTOTAL_ENGAGEMENTS,\nVIDEO_MIDPOINT_COMPLETIONS,\nVIRAL_EXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nACTION_CLICKS,\nEXTERNAL_WEBSITE_POST_VIEW_CONVERSIONS,\nVIRAL_FOLLOWS,\nVIRAL_OTHER_ENGAGEMENTS,\nCOST_IN_USD,\nDAY,\nVIRAL_ONE_CLICK_LEAD_FORM_OPENS,\nVIDEO_STARTS,\nVIRAL_LIKES,\nVIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIRAL_LANDING_PAGE_CLICKS,\nCOMMENT_LIKES,\nCOMPANY_PAGE_CLICKS,\nIMPRESSIONS,\nCOST_IN_LOCAL_CURRENCY,\nFOLLOWS,\nLEAD_GENERATION_MAIL_INTERESTED_CLICKS,\nVIRAL_CARD_IMPRESSIONS,\nSHARES,\nVIRAL_VIDEO_STARTS,\nONE_CLICK_LEAD_FORM_OPENS,\nLANDING_PAGE_CLICKS,\nVIRAL_VIDEO_COMPLETIONS,\nCARD_CLICKS,\nVIRAL_COMPANY_PAGE_CLICKS,\nVIRAL_VIDEO_MIDPOINT_COMPLETIONS,\nFULL_SCREEN_PLAYS,\nVIDEO_FIRST_QUARTILE_COMPLETIONS,\nVIRAL_VIDEO_THIRD_QUARTILE_COMPLETIONS,\nVIDEO_VIEWS,\nVIRAL_CLICKS,\nVIRAL_COMMENT_LIKES,\nAPPROXIMATE_UNIQUE_IMPRESSIONS,\nVIRAL_EXTERNAL_WEBSITE_CONVERSIONS,\nVIRAL_ONE_CLICK_LEADS,\nLIKES,\nONE_CLICK_LEADS,\n        'LI_ADS_DATAFLO_07042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM LI_ADS_DATAFLO_07042021. AD_ANALYTICS_BY_CAMPAIGN\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.646507978439331, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:22.604779Z", "completed_at": "2021-05-19T00:55:23.901572Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:23.901880Z", "completed_at": "2021-05-19T00:55:24.825458Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('AD_ID') }}  AS ADC_ID,\r\n        POST_OBJECT,\r\nOFFSITE_PIXEL,\r\nOFFER_CREATOR,\r\nPAGE_PARENT,\r\nACTION_TYPE,\r\nPAGE,\r\nEVENT_CREATOR,\r\nEVENT_TYPE,\r\nINDEX,\r\nQUESTION,\r\nAPPLICATION,\r\nDATASET,\r\nOBJECT_DOMAIN,\r\nOBJECT,\r\nPOST_OBJECT_WALL,\r\nAD_ID,\r\nLEADGEN,\r\nEVENT,\r\nQUESTION_CREATOR,\r\nCREATIVE,\r\nRESPONSE,\r\nPOST,\r\nFB_PIXEL,\r\nPOST_WALL,\r\nOFFER,\r\nSUBTYPE,\r\nAD_UPDATED_TIME,\r\nFB_PIXEL_EVENT,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_CONVERSION\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS PAGE,\r\nNULL AS EVENT_CREATOR,\r\nNULL AS EVENT_TYPE,\r\nNULL AS INDEX,\r\nNULL AS QUESTION,\r\nNULL AS APPLICATION,\r\nNULL AS DATASET,\r\nNULL AS OBJECT_DOMAIN,\r\nNULL AS OBJECT,\r\nNULL AS POST_OBJECT_WALL,\r\nNULL AS AD_ID,\r\nNULL AS LEADGEN,\r\nNULL AS EVENT,\r\nNULL AS QUESTION_CREATOR,\r\nNULL AS CREATIVE,\r\nNULL AS RESPONSE,\r\nNULL AS POST,\r\nNULL AS FB_PIXEL,\r\nNULL AS POST_WALL,\r\nNULL AS OFFER,\r\nNULL AS SUBTYPE,\r\nNULL AS AD_UPDATED_TIME,\r\nNULL AS FB_PIXEL_EVENT,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Ad_Conversion"], "unique_id": "model.sales_dataflo.Stg_Ad_Conversion", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Ad_Conversion.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Ad_Conversion.sql", "name": "Stg_Ad_Conversion", "resource_type": "model", "alias": "Stg_Ad_Conversion", "checksum": {"name": "sha256", "checksum": "23fd87267649fc524891b205ac9dca9f2618b07172c17354c8e1ffad1cf0470e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Ad_Conversion.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS PAGE,\nNULL AS EVENT_CREATOR,\nNULL AS EVENT_TYPE,\nNULL AS INDEX,\nNULL AS QUESTION,\nNULL AS APPLICATION,\nNULL AS DATASET,\nNULL AS OBJECT_DOMAIN,\nNULL AS OBJECT,\nNULL AS POST_OBJECT_WALL,\nNULL AS AD_ID,\nNULL AS LEADGEN,\nNULL AS EVENT,\nNULL AS QUESTION_CREATOR,\nNULL AS CREATIVE,\nNULL AS RESPONSE,\nNULL AS POST,\nNULL AS FB_PIXEL,\nNULL AS POST_WALL,\nNULL AS OFFER,\nNULL AS SUBTYPE,\nNULL AS AD_UPDATED_TIME,\nNULL AS FB_PIXEL_EVENT,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS PAGE,\nNULL AS EVENT_CREATOR,\nNULL AS EVENT_TYPE,\nNULL AS INDEX,\nNULL AS QUESTION,\nNULL AS APPLICATION,\nNULL AS DATASET,\nNULL AS OBJECT_DOMAIN,\nNULL AS OBJECT,\nNULL AS POST_OBJECT_WALL,\nNULL AS AD_ID,\nNULL AS LEADGEN,\nNULL AS EVENT,\nNULL AS QUESTION_CREATOR,\nNULL AS CREATIVE,\nNULL AS RESPONSE,\nNULL AS POST,\nNULL AS FB_PIXEL,\nNULL AS POST_WALL,\nNULL AS OFFER,\nNULL AS SUBTYPE,\nNULL AS AD_UPDATED_TIME,\nNULL AS FB_PIXEL_EVENT,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.529876708984375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:25.253895Z", "completed_at": "2021-05-19T00:55:26.484447Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:26.484771Z", "completed_at": "2021-05-19T00:55:27.362868Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('AD_ID','AD_GROUP_ID') }}  AS ID,\r\n  _FIVETRAN_SYNCED,\r\nAD_ID,\r\n AD_GROUP_ID,\r\nSEQUENCE_ID,\r\nURL,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_FINAL_URL_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       Null As _FIVETRAN_SYNCED,\r\nNull As AD_ID,\r\nNull As AD_GROUP_ID,\r\nNull As SEQUENCE_ID,\r\nNull As URL,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Ad_Final_Url_History"], "unique_id": "model.sales_dataflo.Stg_Ad_Final_Url_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Ad_Final_Url_History.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Ad_Final_Url_History.sql", "name": "Stg_Ad_Final_Url_History", "resource_type": "model", "alias": "Stg_Ad_Final_Url_History", "checksum": {"name": "sha256", "checksum": "547ee3ef2ffaf3230bf51d02ca2cef6c1204c7d6519d35ae02ccbf9196773c3c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Ad_Final_Url_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(AD_ID as \n    varchar\n), '') || '-' || coalesce(cast(AD_GROUP_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n  _FIVETRAN_SYNCED,\nAD_ID,\n AD_GROUP_ID,\nSEQUENCE_ID,\nURL,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_FINAL_URL_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(AD_ID as \n    varchar\n), '') || '-' || coalesce(cast(AD_GROUP_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ID,\n  _FIVETRAN_SYNCED,\nAD_ID,\n AD_GROUP_ID,\nSEQUENCE_ID,\nURL,\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_FINAL_URL_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.771470308303833, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:27.787361Z", "completed_at": "2021-05-19T00:55:29.226911Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:29.227214Z", "completed_at": "2021-05-19T00:55:30.130140Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS AGCH_ID,\r\n        BIDDING_STRATEGY_SCHEME_TYPE,\r\nPRODUCT_CANONICAL_CONDITION,\r\nBIDDING_STRATEGY_NAME,\r\nID,\r\nPRODUCT_CHANNEL,\r\nINCOME_RANGE_TYPE,\r\nPRODUCT_CUSTOM_ATTRIBUTE_VALUE,\r\nPRODUCT_TYPE,\r\nBIDDING_STRATEGY_TARGET_ROAS,\r\nPRODUCT_OFFER_ID,\r\nPRODUCT_ADWORDS_LABEL,\r\nSYSTEM_SERVING_STATUS,\r\nUSER_INTEREST_ID,\r\nVIDEO_ID,\r\nVIDEO_NAME,\r\nBIDDING_STRATEGY_TARGET_CPA,\r\nBID_MODIFIER,\r\nAD_GROUP_ID,\r\nBIDDING_STRATEGY_BID_CEILING,\r\nCRITERION_USE,\r\nCUSTOM_AFFINITY_ID,\r\nBIDDING_STRATEGY_BID_MODIFIER,\r\nPRODUCT_TYPE_FULL,\r\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\r\nUSER_INTEREST_PARENT_ID,\r\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\r\nUSER_INTEREST_NAME,\r\nPRODUCT_LEGACY_CONDITION,\r\nKEYWORD_MATCH_TYPE,\r\nAD_GROUP_CRITERION_TYPE,\r\nBIDDING_STRATEGY_TYPE,\r\nPRODUCT_CUSTOM_ATTRIBUTE_TYPE,\r\nUSER_LIST_MEMBERSHIP_STATUS,\r\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\r\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\r\nTRACKING_URL_TEMPLATE,\r\nPARTITION_TYPE,\r\nPARENT_TYPE,\r\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\r\nBIDDING_STRATEGY_SOURCE,\r\nBIDDING_STRATEGY_BID_FLOOR,\r\nBIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\r\nCHANNEL_NAME,\r\nCUSTOM_INTENT_ID,\r\nAPP_ID,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_GROUP_CRITERION_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null As BIDDING_STRATEGY_SCHEME_TYPE,\r\nNull As PRODUCT_CANONICAL_CONDITION,\r\nNull As BIDDING_STRATEGY_NAME,\r\nNull As ID,\r\nNull As PRODUCT_CHANNEL,\r\nNull As INCOME_RANGE_TYPE,\r\nNull As PRODUCT_CUSTOM_ATTRIBUTE_VALUE,\r\nNull As PRODUCT_TYPE,\r\nNull As BIDDING_STRATEGY_TARGET_ROAS,\r\nNull As PRODUCT_OFFER_ID,\r\nNull As PRODUCT_ADWORDS_LABEL,\r\nNull As SYSTEM_SERVING_STATUS,\r\nNull As USER_INTEREST_ID,\r\nNull As VIDEO_ID,\r\nNull As VIDEO_NAME,\r\nNull As BIDDING_STRATEGY_TARGET_CPA,\r\nNull As BID_MODIFIER,\r\nNull As AD_GROUP_ID,\r\nNull As BIDDING_STRATEGY_BID_CEILING,\r\nNull As CRITERION_USE,\r\nNull As CUSTOM_AFFINITY_ID,\r\nNull As BIDDING_STRATEGY_BID_MODIFIER,\r\nNull As PRODUCT_TYPE_FULL,\r\nNull As BIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\r\nNull As USER_INTEREST_PARENT_ID,\r\nNull As BIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\r\nNull As USER_INTEREST_NAME,\r\nNull As PRODUCT_LEGACY_CONDITION,\r\nNull As KEYWORD_MATCH_TYPE,\r\nNull As AD_GROUP_CRITERION_TYPE,\r\nNull As BIDDING_STRATEGY_TYPE,\r\nNull As PRODUCT_CUSTOM_ATTRIBUTE_TYPE,\r\nNull As USER_LIST_MEMBERSHIP_STATUS,\r\nNull As BIDDING_STRATEGY_COMPETITOR_DOMAIN,\r\nNull As BIDDING_STRATEGY_CPC_BID_AMOUNT,\r\nNull As TRACKING_URL_TEMPLATE,\r\nNull As PARTITION_TYPE,\r\nNull As PARENT_TYPE,\r\nNull As USER_LIST_ELIGIBLE_FOR_SEARCH,\r\nNull As BIDDING_STRATEGY_SOURCE,\r\nNull As BIDDING_STRATEGY_BID_FLOOR,\r\nNull As BIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\r\nNull As CHANNEL_NAME,\r\nNull As CUSTOM_INTENT_ID,\r\nNull As APP_ID,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Ad_Group_Creation_History"], "unique_id": "model.sales_dataflo.Stg_Ad_Group_Creation_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Ad_Group_Creation_History.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Ad_Group_Creation_History.sql", "name": "Stg_Ad_Group_Creation_History", "resource_type": "model", "alias": "Stg_Ad_Group_Creation_History", "checksum": {"name": "sha256", "checksum": "b8e15a76f40b12724ba4b8e61cd660cfaf9974a51334245be9e87450d9e2ef4d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Ad_Group_Creation_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS AGCH_ID,\n        BIDDING_STRATEGY_SCHEME_TYPE,\nPRODUCT_CANONICAL_CONDITION,\nBIDDING_STRATEGY_NAME,\nID,\nPRODUCT_CHANNEL,\nINCOME_RANGE_TYPE,\nPRODUCT_CUSTOM_ATTRIBUTE_VALUE,\nPRODUCT_TYPE,\nBIDDING_STRATEGY_TARGET_ROAS,\nPRODUCT_OFFER_ID,\nPRODUCT_ADWORDS_LABEL,\nSYSTEM_SERVING_STATUS,\nUSER_INTEREST_ID,\nVIDEO_ID,\nVIDEO_NAME,\nBIDDING_STRATEGY_TARGET_CPA,\nBID_MODIFIER,\nAD_GROUP_ID,\nBIDDING_STRATEGY_BID_CEILING,\nCRITERION_USE,\nCUSTOM_AFFINITY_ID,\nBIDDING_STRATEGY_BID_MODIFIER,\nPRODUCT_TYPE_FULL,\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\nUSER_INTEREST_PARENT_ID,\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\nUSER_INTEREST_NAME,\nPRODUCT_LEGACY_CONDITION,\nKEYWORD_MATCH_TYPE,\nAD_GROUP_CRITERION_TYPE,\nBIDDING_STRATEGY_TYPE,\nPRODUCT_CUSTOM_ATTRIBUTE_TYPE,\nUSER_LIST_MEMBERSHIP_STATUS,\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\nTRACKING_URL_TEMPLATE,\nPARTITION_TYPE,\nPARENT_TYPE,\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\nBIDDING_STRATEGY_SOURCE,\nBIDDING_STRATEGY_BID_FLOOR,\nBIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\nCHANNEL_NAME,\nCUSTOM_INTENT_ID,\nAPP_ID,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_GROUP_CRITERION_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS AGCH_ID,\n        BIDDING_STRATEGY_SCHEME_TYPE,\nPRODUCT_CANONICAL_CONDITION,\nBIDDING_STRATEGY_NAME,\nID,\nPRODUCT_CHANNEL,\nINCOME_RANGE_TYPE,\nPRODUCT_CUSTOM_ATTRIBUTE_VALUE,\nPRODUCT_TYPE,\nBIDDING_STRATEGY_TARGET_ROAS,\nPRODUCT_OFFER_ID,\nPRODUCT_ADWORDS_LABEL,\nSYSTEM_SERVING_STATUS,\nUSER_INTEREST_ID,\nVIDEO_ID,\nVIDEO_NAME,\nBIDDING_STRATEGY_TARGET_CPA,\nBID_MODIFIER,\nAD_GROUP_ID,\nBIDDING_STRATEGY_BID_CEILING,\nCRITERION_USE,\nCUSTOM_AFFINITY_ID,\nBIDDING_STRATEGY_BID_MODIFIER,\nPRODUCT_TYPE_FULL,\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\nUSER_INTEREST_PARENT_ID,\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\nUSER_INTEREST_NAME,\nPRODUCT_LEGACY_CONDITION,\nKEYWORD_MATCH_TYPE,\nAD_GROUP_CRITERION_TYPE,\nBIDDING_STRATEGY_TYPE,\nPRODUCT_CUSTOM_ATTRIBUTE_TYPE,\nUSER_LIST_MEMBERSHIP_STATUS,\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\nTRACKING_URL_TEMPLATE,\nPARTITION_TYPE,\nPARENT_TYPE,\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\nBIDDING_STRATEGY_SOURCE,\nBIDDING_STRATEGY_BID_FLOOR,\nBIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\nCHANNEL_NAME,\nCUSTOM_INTENT_ID,\nAPP_ID,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_GROUP_CRITERION_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.6097075939178467, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:30.561410Z", "completed_at": "2021-05-19T00:55:31.834809Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:31.835126Z", "completed_at": "2021-05-19T00:55:32.747172Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS AGH_ID,\r\n       BIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\r\nAD_GROUP_TYPE,\r\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\r\nUPDATED_AT,\r\nBASE_CAMPAIGN_ID,\r\nBIDDING_STRATEGY_ID,\r\nCAMPAIGN_ID,\r\nID,\r\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\r\nFINAL_URL_SUFFIX,\r\nBIDDING_STRATEGY_BID_MODIFIER,\r\nBASE_AD_GROUP_ID,\r\n_FIVETRAN_SYNCED,\r\nBIDDING_STRATEGY_ENHANCED_CPC_ENABLED,\r\nBIDDING_STRATEGY_RAISE_BID_WHEN_LOW_QUALITY_SCORE,\r\nBIDDING_STRATEGY_CPM_BID_AMOUNT,\r\nBIDDING_STRATEGY_BID_FLOOR,\r\nBIDDING_STRATEGY_BID_CEILING,\r\nBIDDING_STRATEGY_BID_CHANGES_FOR_RAISES_ONLY,\r\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\r\nBIDDING_STRATEGY_TARGET_OUTRANK_SHARE,\r\nBIDDING_STRATEGY_CPA_BID_AMOUNT,\r\nNAME,\r\nTRACKING_URL_TEMPLATE,\r\nBIDDING_STRATEGY_TARGET_ROAS,\r\nBIDDING_STRATEGY_TARGET_CPA,\r\nBIDDING_STRATEGY_VIEWABLE_CPM_ENABLED,\r\nCONTENT_BID_CRITERION_TYPE_GROUP,\r\nSTATUS,\r\nBIDDING_STRATEGY_MAX_CPC_BID_CEILING,\r\nBIDDING_STRATEGY_STRATEGY_GOAL,\r\nBIDDING_STRATEGY_SPEND_TARGET,\r\nAD_GROUP_ROTATION_MODE,\r\nCAMPAIGN_NAME,\r\nBIDDING_STRATEGY_SCHEME_TYPE,\r\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\r\nBIDDING_STRATEGY_SOURCE,\r\nBIDDING_STRATEGY_TYPE,\r\nBIDDING_STRATEGY_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.AD_GROUP_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null As BIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\r\nNull As AD_GROUP_TYPE,\r\nNull As BIDDING_STRATEGY_CPC_BID_AMOUNT,\r\nNull As UPDATED_AT,\r\nNull As BASE_CAMPAIGN_ID,\r\nNull As BIDDING_STRATEGY_ID,\r\nNull As CAMPAIGN_ID,\r\nNull As ID,\r\nNull As BIDDING_STRATEGY_COMPETITOR_DOMAIN,\r\nNull As FINAL_URL_SUFFIX,\r\nNull As BIDDING_STRATEGY_BID_MODIFIER,\r\nNull As BASE_AD_GROUP_ID,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As BIDDING_STRATEGY_ENHANCED_CPC_ENABLED,\r\nNull As BIDDING_STRATEGY_RAISE_BID_WHEN_LOW_QUALITY_SCORE,\r\nNull As BIDDING_STRATEGY_CPM_BID_AMOUNT,\r\nNull As BIDDING_STRATEGY_BID_FLOOR,\r\nNull As BIDDING_STRATEGY_BID_CEILING,\r\nNull As BIDDING_STRATEGY_BID_CHANGES_FOR_RAISES_ONLY,\r\nNull As BIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\r\nNull As BIDDING_STRATEGY_TARGET_OUTRANK_SHARE,\r\nNull As BIDDING_STRATEGY_CPA_BID_AMOUNT,\r\nNull As NAME,\r\nNull As TRACKING_URL_TEMPLATE,\r\nNull As BIDDING_STRATEGY_TARGET_ROAS,\r\nNull As BIDDING_STRATEGY_TARGET_CPA,\r\nNull As BIDDING_STRATEGY_VIEWABLE_CPM_ENABLED,\r\nNull As CONTENT_BID_CRITERION_TYPE_GROUP,\r\nNull As STATUS,\r\nNull As BIDDING_STRATEGY_MAX_CPC_BID_CEILING,\r\nNull As BIDDING_STRATEGY_STRATEGY_GOAL,\r\nNull As BIDDING_STRATEGY_SPEND_TARGET,\r\nNull As AD_GROUP_ROTATION_MODE,\r\nNull As CAMPAIGN_NAME,\r\nNull As BIDDING_STRATEGY_SCHEME_TYPE,\r\nNull As BIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\r\nNull As BIDDING_STRATEGY_SOURCE,\r\nNull As BIDDING_STRATEGY_TYPE,\r\nNull As BIDDING_STRATEGY_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Ad_Group_History"], "unique_id": "model.sales_dataflo.Stg_Ad_Group_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Ad_Group_History.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Ad_Group_History.sql", "name": "Stg_Ad_Group_History", "resource_type": "model", "alias": "Stg_Ad_Group_History", "checksum": {"name": "sha256", "checksum": "29377f398627a003432d0ed8eb98e1b0629d4c798e76a86a30f0c0d156f4e6b0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Ad_Group_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS AGH_ID,\n       BIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\nAD_GROUP_TYPE,\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\nUPDATED_AT,\nBASE_CAMPAIGN_ID,\nBIDDING_STRATEGY_ID,\nCAMPAIGN_ID,\nID,\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\nFINAL_URL_SUFFIX,\nBIDDING_STRATEGY_BID_MODIFIER,\nBASE_AD_GROUP_ID,\n_FIVETRAN_SYNCED,\nBIDDING_STRATEGY_ENHANCED_CPC_ENABLED,\nBIDDING_STRATEGY_RAISE_BID_WHEN_LOW_QUALITY_SCORE,\nBIDDING_STRATEGY_CPM_BID_AMOUNT,\nBIDDING_STRATEGY_BID_FLOOR,\nBIDDING_STRATEGY_BID_CEILING,\nBIDDING_STRATEGY_BID_CHANGES_FOR_RAISES_ONLY,\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\nBIDDING_STRATEGY_TARGET_OUTRANK_SHARE,\nBIDDING_STRATEGY_CPA_BID_AMOUNT,\nNAME,\nTRACKING_URL_TEMPLATE,\nBIDDING_STRATEGY_TARGET_ROAS,\nBIDDING_STRATEGY_TARGET_CPA,\nBIDDING_STRATEGY_VIEWABLE_CPM_ENABLED,\nCONTENT_BID_CRITERION_TYPE_GROUP,\nSTATUS,\nBIDDING_STRATEGY_MAX_CPC_BID_CEILING,\nBIDDING_STRATEGY_STRATEGY_GOAL,\nBIDDING_STRATEGY_SPEND_TARGET,\nAD_GROUP_ROTATION_MODE,\nCAMPAIGN_NAME,\nBIDDING_STRATEGY_SCHEME_TYPE,\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\nBIDDING_STRATEGY_SOURCE,\nBIDDING_STRATEGY_TYPE,\nBIDDING_STRATEGY_NAME,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_GROUP_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS AGH_ID,\n       BIDDING_STRATEGY_MAX_CPC_BID_FLOOR,\nAD_GROUP_TYPE,\nBIDDING_STRATEGY_CPC_BID_AMOUNT,\nUPDATED_AT,\nBASE_CAMPAIGN_ID,\nBIDDING_STRATEGY_ID,\nCAMPAIGN_ID,\nID,\nBIDDING_STRATEGY_COMPETITOR_DOMAIN,\nFINAL_URL_SUFFIX,\nBIDDING_STRATEGY_BID_MODIFIER,\nBASE_AD_GROUP_ID,\n_FIVETRAN_SYNCED,\nBIDDING_STRATEGY_ENHANCED_CPC_ENABLED,\nBIDDING_STRATEGY_RAISE_BID_WHEN_LOW_QUALITY_SCORE,\nBIDDING_STRATEGY_CPM_BID_AMOUNT,\nBIDDING_STRATEGY_BID_FLOOR,\nBIDDING_STRATEGY_BID_CEILING,\nBIDDING_STRATEGY_BID_CHANGES_FOR_RAISES_ONLY,\nBIDDING_STRATEGY_RAISE_BID_WHEN_BUDGET_CONSTRAINED,\nBIDDING_STRATEGY_TARGET_OUTRANK_SHARE,\nBIDDING_STRATEGY_CPA_BID_AMOUNT,\nNAME,\nTRACKING_URL_TEMPLATE,\nBIDDING_STRATEGY_TARGET_ROAS,\nBIDDING_STRATEGY_TARGET_CPA,\nBIDDING_STRATEGY_VIEWABLE_CPM_ENABLED,\nCONTENT_BID_CRITERION_TYPE_GROUP,\nSTATUS,\nBIDDING_STRATEGY_MAX_CPC_BID_CEILING,\nBIDDING_STRATEGY_STRATEGY_GOAL,\nBIDDING_STRATEGY_SPEND_TARGET,\nAD_GROUP_ROTATION_MODE,\nCAMPAIGN_NAME,\nBIDDING_STRATEGY_SCHEME_TYPE,\nBIDDING_STRATEGY_TARGET_ROAS_OVERRIDE,\nBIDDING_STRATEGY_SOURCE,\nBIDDING_STRATEGY_TYPE,\nBIDDING_STRATEGY_NAME,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.AD_GROUP_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.8036208152770996, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:33.173672Z", "completed_at": "2021-05-19T00:55:34.639285Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:34.639590Z", "completed_at": "2021-05-19T00:55:35.548408Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'BALANCE_TRANSACTION_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_BALANCE_TRANSACTION WHERE BALANCE_TRANSACTION_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS BALANCE_TRANSACTION_ID,\r\n        ID as Source_ID,\r\n        CONNECTED_ACCOUNT_ID,\r\n        AMOUNT,\r\n        AVAILABLE_ON,\r\n        CREATED,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        EXCHANGE_RATE,\r\n        FEE,\r\n        NET,\r\n        SOURCE,\r\n        STATUS,\r\n        TYPE,\r\n        PAYOUT_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BALANCE_TRANSACTION\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as BALANCE_TRANSACTION_ID,\r\n        null as Source_ID,\r\n        null as CONNECTED_ACCOUNT_ID,\r\n        null as AMOUNT,\r\n        null as AVAILABLE_ON,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as EXCHANGE_RATE,\r\n        null as FEE,\r\n        null as NET,\r\n        null as SOURCE,\r\n        null as STATUS,\r\n        null as TYPE,\r\n        null as PAYOUT_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Balance_Transaction"], "unique_id": "model.sales_dataflo.Stg_Balance_Transaction", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Balance_Transaction.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Balance_Transaction.sql", "name": "Stg_Balance_Transaction", "resource_type": "model", "alias": "Stg_Balance_Transaction", "checksum": {"name": "sha256", "checksum": "259b3bf2060b2d9275554ae7f120834e4abfe803617b7f010d8babb449026468"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_BALANCE_TRANSACTION WHERE BALANCE_TRANSACTION_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "BALANCE_TRANSACTION_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Balance_Transaction.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS BALANCE_TRANSACTION_ID,\n        ID as Source_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        AVAILABLE_ON,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        EXCHANGE_RATE,\n        FEE,\n        NET,\n        SOURCE,\n        STATUS,\n        TYPE,\n        PAYOUT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.BALANCE_TRANSACTION\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS BALANCE_TRANSACTION_ID,\n        ID as Source_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        AVAILABLE_ON,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        EXCHANGE_RATE,\n        FEE,\n        NET,\n        SOURCE,\n        STATUS,\n        TYPE,\n        PAYOUT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.BALANCE_TRANSACTION\n         \n    \n"}, "error": null, "status": "SUCCESS 219", "execution_time": 5.576104402542114, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:35.981019Z", "completed_at": "2021-05-19T00:55:37.240215Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:37.240516Z", "completed_at": "2021-05-19T00:55:41.112350Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('AD_ID') }}  AS ID,\r\n       _1_D_VIEW,\r\nACTION_TYPE,\r\nAD_ID,\r\nINDEX,\r\nDATE,\r\n_FIVETRAN_ID,\r\n_7_D_CLICK,\r\nVALUE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_AD_ACTIONS\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n          NULL AS _1_D_VIEW,\r\n        NULL AS ACTION_TYPE,\r\nNULL AS AD_ID,\r\nNULL AS INDEX,\r\nNULL AS DATE,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS _7_D_CLICK,\r\nNULL AS VALUE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Ad_Actions"], "unique_id": "model.sales_dataflo.Stg_Basic_Ad_Actions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Ad_Actions.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Actions.sql", "name": "Stg_Basic_Ad_Actions", "resource_type": "model", "alias": "Stg_Basic_Ad_Actions", "checksum": {"name": "sha256", "checksum": "8d83cd2093836a4a0f8656920301ad9461fa8ef721f146c76ae044ac25256593"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Actions.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n          NULL AS _1_D_VIEW,\n        NULL AS ACTION_TYPE,\nNULL AS AD_ID,\nNULL AS INDEX,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\nNULL AS _7_D_CLICK,\nNULL AS VALUE,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n          NULL AS _1_D_VIEW,\n        NULL AS ACTION_TYPE,\nNULL AS AD_ID,\nNULL AS INDEX,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\nNULL AS _7_D_CLICK,\nNULL AS VALUE,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.592362880706787, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:41.559628Z", "completed_at": "2021-05-19T00:55:42.811846Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:42.812144Z", "completed_at": "2021-05-19T00:55:43.727727Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ID,\r\n        _FIVETRAN_ID,\r\nAD_ID,\r\n_7_D_CLICK,\r\nDATE,\r\nINDEX,\r\n_1_D_VIEW,\r\nVALUE,\r\nACTION_TYPE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_AD_COST_PER_ACTION_TYPE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n      NULL AS _FIVETRAN_ID,\r\nNULL AS AD_ID,\r\nNULL AS _7_D_CLICK,\r\nNULL AS DATE,\r\nNULL AS INDEX,\r\nNULL AS _1_D_VIEW,\r\nNULL AS VALUE,\r\nNULL AS ACTION_TYPE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Ad_Cost_Per_Action_Type"], "unique_id": "model.sales_dataflo.Stg_Basic_Ad_Cost_Per_Action_Type", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Ad_Cost_Per_Action_Type.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Cost_Per_Action_Type.sql", "name": "Stg_Basic_Ad_Cost_Per_Action_Type", "resource_type": "model", "alias": "Stg_Basic_Ad_Cost_Per_Action_Type", "checksum": {"name": "sha256", "checksum": "aeaa3920412c962ff38cef788d3ae3fd8ec46af247ee3b418b32cfbff12639c1"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Cost_Per_Action_Type.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n      NULL AS _FIVETRAN_ID,\nNULL AS AD_ID,\nNULL AS _7_D_CLICK,\nNULL AS DATE,\nNULL AS INDEX,\nNULL AS _1_D_VIEW,\nNULL AS VALUE,\nNULL AS ACTION_TYPE,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n      NULL AS _FIVETRAN_ID,\nNULL AS AD_ID,\nNULL AS _7_D_CLICK,\nNULL AS DATE,\nNULL AS INDEX,\nNULL AS _1_D_VIEW,\nNULL AS VALUE,\nNULL AS ACTION_TYPE,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.846914052963257, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:44.154635Z", "completed_at": "2021-05-19T00:55:45.684571Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:45.684860Z", "completed_at": "2021-05-19T00:55:46.575300Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ADSET_ID') }}  AS ID,\r\n        CAMPAIGN_NAME,\r\nCPM,\r\nACCOUNT_ID,\r\nINLINE_LINK_CLICKS,\r\nCTR,\r\nSPEND,\r\nIMPRESSIONS,\r\nDATE,\r\nREACH,\r\n_FIVETRAN_ID,\r\nADSET_NAME,\r\nCPC,\r\nADSET_ID,\r\nFREQUENCY,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_AD_SET\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS CAMPAIGN_NAME,\r\nNULL AS CPM,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS INLINE_LINK_CLICKS,\r\nNULL AS CTR,\r\nNULL AS SPEND,\r\nNULL AS IMPRESSIONS,\r\nNULL AS DATE,\r\nNULL AS REACH,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS ADSET_NAME,\r\nNULL AS CPC,\r\nNULL AS ADSET_ID,\r\nNULL AS FREQUENCY,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Ad_Set"], "unique_id": "model.sales_dataflo.Stg_Basic_Ad_Set", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Ad_Set.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Set.sql", "name": "Stg_Basic_Ad_Set", "resource_type": "model", "alias": "Stg_Basic_Ad_Set", "checksum": {"name": "sha256", "checksum": "b49d1b5292743e0bf309ae1e862b798800e78246c81dfd160a576fe4e42129d2"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Ad_Set.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS CAMPAIGN_NAME,\nNULL AS CPM,\nNULL AS ACCOUNT_ID,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CTR,\nNULL AS SPEND,\nNULL AS IMPRESSIONS,\nNULL AS DATE,\nNULL AS REACH,\nNULL AS _FIVETRAN_ID,\nNULL AS ADSET_NAME,\nNULL AS CPC,\nNULL AS ADSET_ID,\nNULL AS FREQUENCY,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS CAMPAIGN_NAME,\nNULL AS CPM,\nNULL AS ACCOUNT_ID,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CTR,\nNULL AS SPEND,\nNULL AS IMPRESSIONS,\nNULL AS DATE,\nNULL AS REACH,\nNULL AS _FIVETRAN_ID,\nNULL AS ADSET_NAME,\nNULL AS CPC,\nNULL AS ADSET_ID,\nNULL AS FREQUENCY,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5600385665893555, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:47.004106Z", "completed_at": "2021-05-19T00:55:48.247621Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:48.247901Z", "completed_at": "2021-05-19T00:55:49.138771Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ID,\r\n        CAMPAIGN_ID,\r\nCTR,\r\nINLINE_LINK_CLICKS,\r\nCAMPAIGN_NAME,\r\nFREQUENCY,\r\nCPM,\r\n_FIVETRAN_ID,\r\nSPEND,\r\nDATE,\r\nACCOUNT_ID,\r\nIMPRESSIONS,\r\nCPC,\r\nREACH,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_CAMPAIGN\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS CAMPAIGN_ID,\r\nNULL AS CTR,\r\nNULL AS INLINE_LINK_CLICKS,\r\nNULL AS CAMPAIGN_NAME,\r\nNULL AS FREQUENCY,\r\nNULL AS CPM,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS SPEND,\r\nNULL AS DATE,\r\nNULL AS ACCOUNT_ID,\r\nNULL AS IMPRESSIONS,\r\nNULL AS CPC,\r\nNULL AS REACH,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Campaign"], "unique_id": "model.sales_dataflo.Stg_Basic_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Campaign.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign.sql", "name": "Stg_Basic_Campaign", "resource_type": "model", "alias": "Stg_Basic_Campaign", "checksum": {"name": "sha256", "checksum": "750f6c1a02110c8d95ab98969b72e299763580c25d13ddf2f84c0da103f29f9b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS CAMPAIGN_ID,\nNULL AS CTR,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CAMPAIGN_NAME,\nNULL AS FREQUENCY,\nNULL AS CPM,\nNULL AS _FIVETRAN_ID,\nNULL AS SPEND,\nNULL AS DATE,\nNULL AS ACCOUNT_ID,\nNULL AS IMPRESSIONS,\nNULL AS CPC,\nNULL AS REACH,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS CAMPAIGN_ID,\nNULL AS CTR,\nNULL AS INLINE_LINK_CLICKS,\nNULL AS CAMPAIGN_NAME,\nNULL AS FREQUENCY,\nNULL AS CPM,\nNULL AS _FIVETRAN_ID,\nNULL AS SPEND,\nNULL AS DATE,\nNULL AS ACCOUNT_ID,\nNULL AS IMPRESSIONS,\nNULL AS CPC,\nNULL AS REACH,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7371461391448975, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:49.566651Z", "completed_at": "2021-05-19T00:55:50.974650Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:50.974985Z", "completed_at": "2021-05-19T00:55:51.867512Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ID,\r\n        _7_D_CLICK,\r\n_1_D_VIEW,\r\nCAMPAIGN_ID,\r\nACTION_TYPE,\r\nINDEX,\r\nVALUE,\r\nDATE,\r\n_FIVETRAN_ID,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_CAMPAIGN_ACTIONS\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        NULL AS _7_D_CLICK,\r\nNULL AS _1_D_VIEW,\r\nNULL AS CAMPAIGN_ID,\r\nNULL AS ACTION_TYPE,\r\nNULL AS INDEX,\r\nNULL AS VALUE,\r\nNULL AS DATE,\r\nNULL AS _FIVETRAN_ID,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Campaign_Actions"], "unique_id": "model.sales_dataflo.Stg_Basic_Campaign_Actions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Campaign_Actions.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign_Actions.sql", "name": "Stg_Basic_Campaign_Actions", "resource_type": "model", "alias": "Stg_Basic_Campaign_Actions", "checksum": {"name": "sha256", "checksum": "6bfd421b81a95f395505795dfd3a93e6073babb29615aa1ef79917154c108949"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign_Actions.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS _7_D_CLICK,\nNULL AS _1_D_VIEW,\nNULL AS CAMPAIGN_ID,\nNULL AS ACTION_TYPE,\nNULL AS INDEX,\nNULL AS VALUE,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n        NULL AS _7_D_CLICK,\nNULL AS _1_D_VIEW,\nNULL AS CAMPAIGN_ID,\nNULL AS ACTION_TYPE,\nNULL AS INDEX,\nNULL AS VALUE,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.572218418121338, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:52.306523Z", "completed_at": "2021-05-19T00:55:53.558013Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:53.558403Z", "completed_at": "2021-05-19T00:55:54.454640Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'FB_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'FB_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('CAMPAIGN_ID') }}  AS ID,\r\n       CAMPAIGN_ID,\r\n _1_D_VIEW,\r\n DATE,\r\n _FIVETRAN_ID,\r\n INDEX,\r\n ACTION_TYPE,\r\n _7_D_CLICK,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.BASIC_CAMPAIGN_COST_PER_ACTION_TYPE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       NULL AS VALUE,\r\nNULL AS CAMPAIGN_ID,\r\nNULL AS _1_D_VIEW,\r\nNULL AS DATE,\r\nNULL AS _FIVETRAN_ID,\r\nNULL AS INDEX,\r\nNULL AS ACTION_TYPE,\r\nNULL AS _7_D_CLICK,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "FB_Ads", "Stg_Basic_Campaign_Cost_Per_Action_Type"], "unique_id": "model.sales_dataflo.Stg_Basic_Campaign_Cost_Per_Action_Type", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/FB_Ads/Stg_Basic_Campaign_Cost_Per_Action_Type.sql", "original_file_path": "ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign_Cost_Per_Action_Type.sql", "name": "Stg_Basic_Campaign_Cost_Per_Action_Type", "resource_type": "model", "alias": "Stg_Basic_Campaign_Cost_Per_Action_Type", "checksum": {"name": "sha256", "checksum": "dc09e6af12023634bbfb3170b78378b6647a3830865c5023317a946754da6573"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/FB_Ads/Stg_Basic_Campaign_Cost_Per_Action_Type.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n       NULL AS VALUE,\nNULL AS CAMPAIGN_ID,\nNULL AS _1_D_VIEW,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\nNULL AS INDEX,\nNULL AS ACTION_TYPE,\nNULL AS _7_D_CLICK,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n\n\n  \n         select\n       NULL AS VALUE,\nNULL AS CAMPAIGN_ID,\nNULL AS _1_D_VIEW,\nNULL AS DATE,\nNULL AS _FIVETRAN_ID,\nNULL AS INDEX,\nNULL AS ACTION_TYPE,\nNULL AS _7_D_CLICK,\n\n        '' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM dual     \n\n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.7828378677368164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:54.881363Z", "completed_at": "2021-05-19T00:55:56.328436Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:56.328915Z", "completed_at": "2021-05-19T00:55:57.239066Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('_FIVETRAN_ID') }}  AS ACC_ID,\r\n       AD_GROUP_ID,\r\n\r\nCLICKS,\r\nEXTERNAL_CUSTOMER_ID,\r\nAD_GROUP_STATUS,\r\nCAMPAIGN_STATUS,\r\nACCOUNT_DESCRIPTIVE_NAME,\r\nGCL_ID,\r\nAD_GROUP_NAME,\r\nCAMPAIGN_ID,\r\n_FIVETRAN_ID,\r\nCRITERIA_ID,\r\nCAMPAIGN_NAME,\r\nDATE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CLICK_PERFORMANCE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n       Null As AD_GROUP_ID,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As CUSTOMER_ID,\r\nNull As CLICKS,\r\nNull As EXTERNAL_CUSTOMER_ID,\r\nNull As AD_GROUP_STATUS,\r\nNull As CAMPAIGN_STATUS,\r\nNull As ACCOUNT_DESCRIPTIVE_NAME,\r\nNull As GCL_ID,\r\nNull As AD_GROUP_NAME,\r\nNull As CAMPAIGN_ID,\r\nNull As _FIVETRAN_ID,\r\nNull As CRITERIA_ID,\r\nNull As CAMPAIGN_NAME,\r\nNull As DATE,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_CLICK_PERFORMANCE"], "unique_id": "model.sales_dataflo.Stg_CLICK_PERFORMANCE", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_CLICK_PERFORMANCE.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_CLICK_PERFORMANCE.sql", "name": "Stg_CLICK_PERFORMANCE", "resource_type": "model", "alias": "Stg_CLICK_PERFORMANCE", "checksum": {"name": "sha256", "checksum": "1825a1148af173b0839aa04c53d2efd1caa5c120f3f49126c01bb046cbb1d100"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_CLICK_PERFORMANCE.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n       AD_GROUP_ID,\n\nCLICKS,\nEXTERNAL_CUSTOMER_ID,\nAD_GROUP_STATUS,\nCAMPAIGN_STATUS,\nACCOUNT_DESCRIPTIVE_NAME,\nGCL_ID,\nAD_GROUP_NAME,\nCAMPAIGN_ID,\n_FIVETRAN_ID,\nCRITERIA_ID,\nCAMPAIGN_NAME,\nDATE,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CLICK_PERFORMANCE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(_FIVETRAN_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n       AD_GROUP_ID,\n\nCLICKS,\nEXTERNAL_CUSTOMER_ID,\nAD_GROUP_STATUS,\nCAMPAIGN_STATUS,\nACCOUNT_DESCRIPTIVE_NAME,\nGCL_ID,\nAD_GROUP_NAME,\nCAMPAIGN_ID,\n_FIVETRAN_ID,\nCRITERIA_ID,\nCAMPAIGN_NAME,\nDATE,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CLICK_PERFORMANCE\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5906026363372803, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:55:57.666701Z", "completed_at": "2021-05-19T00:55:58.942270Z"}, {"name": "execute", "started_at": "2021-05-19T00:55:58.942649Z", "completed_at": "2021-05-19T00:55:59.831677Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS ACC_ID,\r\n       CAMPAIGN_STATUS,\r\n_FIVETRAN_SYNCED,\r\nACCOUNT_DESCRIPTIVE_NAME,\r\n_FIVETRAN_ID,\r\nAD_GROUP_STATUS,\r\nAD_GROUP_NAME,\r\nDATE,\r\nCAMPAIGN_ID,\r\nEXTERNAL_CUSTOMER_ID,\r\nCRITERIA,\r\nAD_GROUP_ID,\r\nCUSTOMER_ID,\r\nID,\r\nCRITERIA_TYPE,\r\nCOST,\r\nCAMPAIGN_NAME,\r\nIMPRESSIONS,\r\nCLICKS,\r\nCRITERIA_DESTINATION_URL,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CRITERIA_PERFORMANCE\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n      Null As CAMPAIGN_STATUS,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As ACCOUNT_DESCRIPTIVE_NAME,\r\nNull As _FIVETRAN_ID,\r\nNull As AD_GROUP_STATUS,\r\nNull As AD_GROUP_NAME,\r\nNull As DATE,\r\nNull As CAMPAIGN_ID,\r\nNull As EXTERNAL_CUSTOMER_ID,\r\nNull As CRITERIA,\r\nNull As AD_GROUP_ID,\r\nNull As CUSTOMER_ID,\r\nNull As ID,\r\nNull As CRITERIA_TYPE,\r\nNull As COST,\r\nNull As CAMPAIGN_NAME,\r\nNull As IMPRESSIONS,\r\nNull As CLICKS,\r\nNull As CRITERIA_DESTINATION_URL,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_CRITERIA_PERFORMANCE"], "unique_id": "model.sales_dataflo.Stg_CRITERIA_PERFORMANCE", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_CRITERIA_PERFORMANCE.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_CRITERIA_PERFORMANCE.sql", "name": "Stg_CRITERIA_PERFORMANCE", "resource_type": "model", "alias": "Stg_CRITERIA_PERFORMANCE", "checksum": {"name": "sha256", "checksum": "813cf0bf79be613abe7fb45d2500a24b4aeb556e4ed988be379f00a86daf6a4d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_CRITERIA_PERFORMANCE.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n       CAMPAIGN_STATUS,\n_FIVETRAN_SYNCED,\nACCOUNT_DESCRIPTIVE_NAME,\n_FIVETRAN_ID,\nAD_GROUP_STATUS,\nAD_GROUP_NAME,\nDATE,\nCAMPAIGN_ID,\nEXTERNAL_CUSTOMER_ID,\nCRITERIA,\nAD_GROUP_ID,\nCUSTOMER_ID,\nID,\nCRITERIA_TYPE,\nCOST,\nCAMPAIGN_NAME,\nIMPRESSIONS,\nCLICKS,\nCRITERIA_DESTINATION_URL,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CRITERIA_PERFORMANCE\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ACC_ID,\n       CAMPAIGN_STATUS,\n_FIVETRAN_SYNCED,\nACCOUNT_DESCRIPTIVE_NAME,\n_FIVETRAN_ID,\nAD_GROUP_STATUS,\nAD_GROUP_NAME,\nDATE,\nCAMPAIGN_ID,\nEXTERNAL_CUSTOMER_ID,\nCRITERIA,\nAD_GROUP_ID,\nCUSTOMER_ID,\nID,\nCRITERIA_TYPE,\nCOST,\nCAMPAIGN_NAME,\nIMPRESSIONS,\nCLICKS,\nCRITERIA_DESTINATION_URL,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CRITERIA_PERFORMANCE\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.619136095046997, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:00.261165Z", "completed_at": "2021-05-19T00:56:01.540872Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:01.541262Z", "completed_at": "2021-05-19T00:56:02.451569Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE = 'GA_ADS' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'GA_ADS'  %} \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CCH_ID,\r\n       CARRIER_COUNTRY_CODE,\r\nPROXIMITY_ADDRESS_STREET_ADDRESS_2,\r\nMOBILE_APP_CATEGORY_ID,\r\nAD_SCHEDULE_START_MINUTE,\r\nOPERATING_SYSTEM_NAME,\r\nMOBILE_DEVICE_MANUFACTURER_NAME,\r\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\r\nMOBILE_APPLICATION_APP_ID,\r\nPROXIMITY_GEO_POINT_LATITUDE_IN_MICRO_DEGREES,\r\nYOUTUBE_VIDEO_ID,\r\nPARENT_TYPE,\r\nUSER_LIST_ID,\r\nGENDER_TYPE,\r\nMOBILE_APPLICATION_DISPLAY_NAME,\r\nYOUTUBE_VIDEO_NAME,\r\nVERTICAL_PATH,\r\nPLATFORM_NAME,\r\nKEYWORD_TEXT,\r\nPROXIMITY_RADIUS_DISTANCE_UNITS,\r\nPROXIMITY_CITY_NAME,\r\nPROXIMITY_RADIUS_IN_UNITS,\r\nPLACEMENT_URL,\r\nVERTICAL_ID,\r\nLANGUAGE_CODE,\r\nYOUTUBE_CHANNEL_NAME,\r\n_FIVETRAN_SYNCED,\r\nMOBILE_DEVICE_OPERATING_SYSTEM_NAME,\r\nLOCATION_TARGETING_STATUS,\r\nCAMPAIGN_CRITERION_STATUS,\r\nUSER_INTEREST_ID,\r\nINCOME_RANGE_TYPE,\r\nUSER_INTEREST_PARENT_ID,\r\nPROXIMITY_COUNTRY_CODE,\r\nKEYWORD_MATCH_TYPE,\r\nPROXIMITY_POSTAL_CODE,\r\nMOBILE_DEVICE_NAME,\r\nYOUTUBE_CHANNEL_ID,\r\nUSER_INTEREST_NAME,\r\nMOBILE_DEVICE_TYPE,\r\nVERTICAL_PARENT_ID,\r\nLANGUAGE_NAME,\r\nAD_SCHEDULE_END_MINUTE,\r\nIS_NEGATIVE,\r\nAGE_RANGE_TYPE,\r\nCONTENT_LABEL_TYPE,\r\nOPERATING_SYSTEM_OPERATOR_TYPE,\r\nPROXIMITY_ADDRESS_STREET_ADDRESS,\r\nOPERATING_SYSTEM_OS_MAJOR_VERSION,\r\nAD_SCHEDULE_END_HOUR,\r\nCAMPAIGN_CRITERION_TYPE,\r\nCARRIER_NAME,\r\nBASE_CAMPAIGN_ID,\r\nAD_SCHEDULE_START_HOUR,\r\nUPDATED_AT,\r\nBID_MODIFIER,\r\nCRITERION_TYPE,\r\nPROXIMITY_PROVINCE_NAME,\r\nOPERATING_SYSTEM_OS_MINOR_VERSION,\r\nUSER_LIST_ELIGIBLE_FOR_DISPLAY,\r\nLOCATION_DISPLAY_TYPE,\r\nAD_SCHEDULE_DAY_OF_WEEK,\r\nID,\r\nLOCATION_PARENT_LOCATIONS,\r\nIP_BLOCK_IP_ADDRESS,\r\nLOCATION_NAME,\r\nPROXIMITY_GEO_POINT_LONGITUDE_IN_MICRO_DEGREES,\r\nUSER_LIST_MEMBERSHIP_STATUS,\r\nUSER_LIST_NAME,\r\nPROXIMITY_PROVINCE_CODE,\r\nCAMPAIGN_ID,\r\nMOBILE_APP_DISPLAY_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CAMPAIGN_CRITERION_HISTORY\r\n          {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %} \r\n        {% elif  entity_typ == 'X'  %} \r\n         select\r\n        Null As CARRIER_COUNTRY_CODE,\r\nNull As PROXIMITY_ADDRESS_STREET_ADDRESS_2,\r\nNull As MOBILE_APP_CATEGORY_ID,\r\nNull As AD_SCHEDULE_START_MINUTE,\r\nNull As OPERATING_SYSTEM_NAME,\r\nNull As MOBILE_DEVICE_MANUFACTURER_NAME,\r\nNull As USER_LIST_ELIGIBLE_FOR_SEARCH,\r\nNull As MOBILE_APPLICATION_APP_ID,\r\nNull As PROXIMITY_GEO_POINT_LATITUDE_IN_MICRO_DEGREES,\r\nNull As YOUTUBE_VIDEO_ID,\r\nNull As PARENT_TYPE,\r\nNull As USER_LIST_ID,\r\nNull As GENDER_TYPE,\r\nNull As MOBILE_APPLICATION_DISPLAY_NAME,\r\nNull As YOUTUBE_VIDEO_NAME,\r\nNull As VERTICAL_PATH,\r\nNull As PLATFORM_NAME,\r\nNull As KEYWORD_TEXT,\r\nNull As PROXIMITY_RADIUS_DISTANCE_UNITS,\r\nNull As PROXIMITY_CITY_NAME,\r\nNull As PROXIMITY_RADIUS_IN_UNITS,\r\nNull As PLACEMENT_URL,\r\nNull As VERTICAL_ID,\r\nNull As LANGUAGE_CODE,\r\nNull As YOUTUBE_CHANNEL_NAME,\r\nNull As _FIVETRAN_SYNCED,\r\nNull As MOBILE_DEVICE_OPERATING_SYSTEM_NAME,\r\nNull As LOCATION_TARGETING_STATUS,\r\nNull As CAMPAIGN_CRITERION_STATUS,\r\nNull As USER_INTEREST_ID,\r\nNull As INCOME_RANGE_TYPE,\r\nNull As USER_INTEREST_PARENT_ID,\r\nNull As PROXIMITY_COUNTRY_CODE,\r\nNull As KEYWORD_MATCH_TYPE,\r\nNull As PROXIMITY_POSTAL_CODE,\r\nNull As MOBILE_DEVICE_NAME,\r\nNull As YOUTUBE_CHANNEL_ID,\r\nNull As USER_INTEREST_NAME,\r\nNull As MOBILE_DEVICE_TYPE,\r\nNull As VERTICAL_PARENT_ID,\r\nNull As LANGUAGE_NAME,\r\nNull As AD_SCHEDULE_END_MINUTE,\r\nNull As IS_NEGATIVE,\r\nNull As AGE_RANGE_TYPE,\r\nNull As CONTENT_LABEL_TYPE,\r\nNull As OPERATING_SYSTEM_OPERATOR_TYPE,\r\nNull As PROXIMITY_ADDRESS_STREET_ADDRESS,\r\nNull As OPERATING_SYSTEM_OS_MAJOR_VERSION,\r\nNull As AD_SCHEDULE_END_HOUR,\r\nNull As CAMPAIGN_CRITERION_TYPE,\r\nNull As CARRIER_NAME,\r\nNull As BASE_CAMPAIGN_ID,\r\nNull As AD_SCHEDULE_START_HOUR,\r\nNull As UPDATED_AT,\r\nNull As BID_MODIFIER,\r\nNull As CRITERION_TYPE,\r\nNull As PROXIMITY_PROVINCE_NAME,\r\nNull As OPERATING_SYSTEM_OS_MINOR_VERSION,\r\nNull As USER_LIST_ELIGIBLE_FOR_DISPLAY,\r\nNull As LOCATION_DISPLAY_TYPE,\r\nNull As AD_SCHEDULE_DAY_OF_WEEK,\r\nNull As ID,\r\nNull As LOCATION_PARENT_LOCATIONS,\r\nNull As IP_BLOCK_IP_ADDRESS,\r\nNull As LOCATION_NAME,\r\nNull As PROXIMITY_GEO_POINT_LONGITUDE_IN_MICRO_DEGREES,\r\nNull As USER_LIST_MEMBERSHIP_STATUS,\r\nNull As USER_LIST_NAME,\r\nNull As PROXIMITY_PROVINCE_CODE,\r\nNull As CAMPAIGN_ID,\r\nNull As MOBILE_APP_DISPLAY_NAME,\r\n\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual     \r\n\r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Ads", "GA_Ads", "Stg_Campaign_Creation_History"], "unique_id": "model.sales_dataflo.Stg_Campaign_Creation_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Ads/GA_Ads/Stg_Campaign_Creation_History.sql", "original_file_path": "ETL/Stage/Ads/GA_Ads/Stg_Campaign_Creation_History.sql", "name": "Stg_Campaign_Creation_History", "resource_type": "model", "alias": "Stg_Campaign_Creation_History", "checksum": {"name": "sha256", "checksum": "43d66b04ce13f8a13424d922d8372d6db78e441dfe5510db18cd3c815b8d4167"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Ads/GA_Ads/Stg_Campaign_Creation_History.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CCH_ID,\n       CARRIER_COUNTRY_CODE,\nPROXIMITY_ADDRESS_STREET_ADDRESS_2,\nMOBILE_APP_CATEGORY_ID,\nAD_SCHEDULE_START_MINUTE,\nOPERATING_SYSTEM_NAME,\nMOBILE_DEVICE_MANUFACTURER_NAME,\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\nMOBILE_APPLICATION_APP_ID,\nPROXIMITY_GEO_POINT_LATITUDE_IN_MICRO_DEGREES,\nYOUTUBE_VIDEO_ID,\nPARENT_TYPE,\nUSER_LIST_ID,\nGENDER_TYPE,\nMOBILE_APPLICATION_DISPLAY_NAME,\nYOUTUBE_VIDEO_NAME,\nVERTICAL_PATH,\nPLATFORM_NAME,\nKEYWORD_TEXT,\nPROXIMITY_RADIUS_DISTANCE_UNITS,\nPROXIMITY_CITY_NAME,\nPROXIMITY_RADIUS_IN_UNITS,\nPLACEMENT_URL,\nVERTICAL_ID,\nLANGUAGE_CODE,\nYOUTUBE_CHANNEL_NAME,\n_FIVETRAN_SYNCED,\nMOBILE_DEVICE_OPERATING_SYSTEM_NAME,\nLOCATION_TARGETING_STATUS,\nCAMPAIGN_CRITERION_STATUS,\nUSER_INTEREST_ID,\nINCOME_RANGE_TYPE,\nUSER_INTEREST_PARENT_ID,\nPROXIMITY_COUNTRY_CODE,\nKEYWORD_MATCH_TYPE,\nPROXIMITY_POSTAL_CODE,\nMOBILE_DEVICE_NAME,\nYOUTUBE_CHANNEL_ID,\nUSER_INTEREST_NAME,\nMOBILE_DEVICE_TYPE,\nVERTICAL_PARENT_ID,\nLANGUAGE_NAME,\nAD_SCHEDULE_END_MINUTE,\nIS_NEGATIVE,\nAGE_RANGE_TYPE,\nCONTENT_LABEL_TYPE,\nOPERATING_SYSTEM_OPERATOR_TYPE,\nPROXIMITY_ADDRESS_STREET_ADDRESS,\nOPERATING_SYSTEM_OS_MAJOR_VERSION,\nAD_SCHEDULE_END_HOUR,\nCAMPAIGN_CRITERION_TYPE,\nCARRIER_NAME,\nBASE_CAMPAIGN_ID,\nAD_SCHEDULE_START_HOUR,\nUPDATED_AT,\nBID_MODIFIER,\nCRITERION_TYPE,\nPROXIMITY_PROVINCE_NAME,\nOPERATING_SYSTEM_OS_MINOR_VERSION,\nUSER_LIST_ELIGIBLE_FOR_DISPLAY,\nLOCATION_DISPLAY_TYPE,\nAD_SCHEDULE_DAY_OF_WEEK,\nID,\nLOCATION_PARENT_LOCATIONS,\nIP_BLOCK_IP_ADDRESS,\nLOCATION_NAME,\nPROXIMITY_GEO_POINT_LONGITUDE_IN_MICRO_DEGREES,\nUSER_LIST_MEMBERSHIP_STATUS,\nUSER_LIST_NAME,\nPROXIMITY_PROVINCE_CODE,\nCAMPAIGN_ID,\nMOBILE_APP_DISPLAY_NAME,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CAMPAIGN_CRITERION_HISTORY\n           \n        \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n \n\n\n\n  \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CCH_ID,\n       CARRIER_COUNTRY_CODE,\nPROXIMITY_ADDRESS_STREET_ADDRESS_2,\nMOBILE_APP_CATEGORY_ID,\nAD_SCHEDULE_START_MINUTE,\nOPERATING_SYSTEM_NAME,\nMOBILE_DEVICE_MANUFACTURER_NAME,\nUSER_LIST_ELIGIBLE_FOR_SEARCH,\nMOBILE_APPLICATION_APP_ID,\nPROXIMITY_GEO_POINT_LATITUDE_IN_MICRO_DEGREES,\nYOUTUBE_VIDEO_ID,\nPARENT_TYPE,\nUSER_LIST_ID,\nGENDER_TYPE,\nMOBILE_APPLICATION_DISPLAY_NAME,\nYOUTUBE_VIDEO_NAME,\nVERTICAL_PATH,\nPLATFORM_NAME,\nKEYWORD_TEXT,\nPROXIMITY_RADIUS_DISTANCE_UNITS,\nPROXIMITY_CITY_NAME,\nPROXIMITY_RADIUS_IN_UNITS,\nPLACEMENT_URL,\nVERTICAL_ID,\nLANGUAGE_CODE,\nYOUTUBE_CHANNEL_NAME,\n_FIVETRAN_SYNCED,\nMOBILE_DEVICE_OPERATING_SYSTEM_NAME,\nLOCATION_TARGETING_STATUS,\nCAMPAIGN_CRITERION_STATUS,\nUSER_INTEREST_ID,\nINCOME_RANGE_TYPE,\nUSER_INTEREST_PARENT_ID,\nPROXIMITY_COUNTRY_CODE,\nKEYWORD_MATCH_TYPE,\nPROXIMITY_POSTAL_CODE,\nMOBILE_DEVICE_NAME,\nYOUTUBE_CHANNEL_ID,\nUSER_INTEREST_NAME,\nMOBILE_DEVICE_TYPE,\nVERTICAL_PARENT_ID,\nLANGUAGE_NAME,\nAD_SCHEDULE_END_MINUTE,\nIS_NEGATIVE,\nAGE_RANGE_TYPE,\nCONTENT_LABEL_TYPE,\nOPERATING_SYSTEM_OPERATOR_TYPE,\nPROXIMITY_ADDRESS_STREET_ADDRESS,\nOPERATING_SYSTEM_OS_MAJOR_VERSION,\nAD_SCHEDULE_END_HOUR,\nCAMPAIGN_CRITERION_TYPE,\nCARRIER_NAME,\nBASE_CAMPAIGN_ID,\nAD_SCHEDULE_START_HOUR,\nUPDATED_AT,\nBID_MODIFIER,\nCRITERION_TYPE,\nPROXIMITY_PROVINCE_NAME,\nOPERATING_SYSTEM_OS_MINOR_VERSION,\nUSER_LIST_ELIGIBLE_FOR_DISPLAY,\nLOCATION_DISPLAY_TYPE,\nAD_SCHEDULE_DAY_OF_WEEK,\nID,\nLOCATION_PARENT_LOCATIONS,\nIP_BLOCK_IP_ADDRESS,\nLOCATION_NAME,\nPROXIMITY_GEO_POINT_LONGITUDE_IN_MICRO_DEGREES,\nUSER_LIST_MEMBERSHIP_STATUS,\nUSER_LIST_NAME,\nPROXIMITY_PROVINCE_CODE,\nCAMPAIGN_ID,\nMOBILE_APP_DISPLAY_NAME,\n\n        'GA_ADS_JAYANLIVE_01042021' as Source_type,\n        'D_BASIC_AD_ACTIONS_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM GA_ADS_JAYANLIVE_01042021.CAMPAIGN_CRITERION_HISTORY\n           \n        \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.651834487915039, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:03.006982Z", "completed_at": "2021-05-19T00:56:04.304565Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:04.304871Z", "completed_at": "2021-05-19T00:56:05.234127Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'CHARGE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CHARGE WHERE CHARGE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CHARGE_ID,\r\n        ID as SOURCE_CHARGE_ID,\r\n        CONNECTED_ACCOUNT_ID,\r\n        AMOUNT,\r\n        AMOUNT_REFUNDED,\r\n        APPLICATION,\r\n        APPLICATION_FEE_AMOUNT,\r\n        CALCULATED_STATEMENT_DESCRIPTOR,\r\n        CAPTURED,\r\n        CREATED,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        DESTINATION,\r\n        FAILURE_CODE,\r\n        FAILURE_MESSAGE,\r\n        FRAUD_DETAILS_USER_REPORT,\r\n        FRAUD_DETAILS_STRIPE_REPORT,\r\n        LIVEMODE,\r\n        ON_BEHALF_OF,\r\n        OUTCOME_NETWORK_STATUS,\r\n        OUTCOME_REASON,\r\n        OUTCOME_RISK_LEVEL,\r\n        OUTCOME_RISK_SCORE,\r\n        OUTCOME_SELLER_MESSAGE,\r\n        OUTCOME_TYPE,\r\n        PAID,\r\n        RECEIPT_EMAIL,\r\n        RECEIPT_NUMBER,\r\n        RECEIPT_URL,\r\n        REFUNDED,\r\n        SHIPPING_ADDRESS_CITY,\r\n        SHIPPING_ADDRESS_COUNTRY,\r\n        SHIPPING_ADDRESS_LINE_1,\r\n        SHIPPING_ADDRESS_LINE_2,\r\n        SHIPPING_ADDRESS_POSTAL_CODE,\r\n        SHIPPING_ADDRESS_STATE,\r\n        SHIPPING_CARRIER,\r\n        SHIPPING_NAME,\r\n        SHIPPING_PHONE,\r\n        SHIPPING_TRACKING_NUMBER,\r\n        CARD_ID,\r\n        BANK_ACCOUNT_ID,\r\n        SOURCE_ID,\r\n        SOURCE_TRANSFER,\r\n        STATEMENT_DESCRIPTOR,\r\n        STATUS,\r\n        TRANSFER_DATA_DESTINATION,\r\n        TRANSFER_GROUP,\r\n        BALANCE_TRANSACTION_ID,\r\n        CUSTOMER_ID,\r\n        INVOICE_ID,\r\n        METADATA,\r\n        PAYMENT_INTENT_ID,\r\n        PAYMENT_METHOD_ID,\r\n        TRANSFER_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_CHARGE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CHARGE\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as CHARGE_ID,\r\n        null as SOURCE_CHARGE_ID,\r\n        null as CONNECTED_ACCOUNT_ID,\r\n        null as AMOUNT,\r\n        null as AMOUNT_REFUNDED,\r\n        null as APPLICATION,\r\n        null as APPLICATION_FEE_AMOUNT,\r\n        null as CALCULATED_STATEMENT_DESCRIPTOR,\r\n        null as CAPTURED,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as DESTINATION,\r\n        null as FAILURE_CODE,\r\n        null as FAILURE_MESSAGE,\r\n        null as FRAUD_DETAILS_USER_REPORT,\r\n        null as FRAUD_DETAILS_STRIPE_REPORT,\r\n        null as LIVEMODE,\r\n        null as ON_BEHALF_OF,\r\n        null as OUTCOME_NETWORK_STATUS,\r\n        null as OUTCOME_REASON,\r\n        null as OUTCOME_RISK_LEVEL,\r\n        null as OUTCOME_RISK_SCORE,\r\n        null as OUTCOME_SELLER_MESSAGE,\r\n        null as OUTCOME_TYPE,\r\n        null as PAID,\r\n        null as RECEIPT_EMAIL,\r\n        null as RECEIPT_NUMBER,\r\n        null as RECEIPT_URL,\r\n        null as REFUNDED,\r\n        null as SHIPPING_ADDRESS_CITY,\r\n        null as SHIPPING_ADDRESS_COUNTRY,\r\n        null as SHIPPING_ADDRESS_LINE_1,\r\n        null as SHIPPING_ADDRESS_LINE_2,\r\n        null as SHIPPING_ADDRESS_POSTAL_CODE,\r\n        null as SHIPPING_ADDRESS_STATE,\r\n        null as SHIPPING_CARRIER,\r\n        null as SHIPPING_NAME,\r\n        null as SHIPPING_PHONE,\r\n        null as SHIPPING_TRACKING_NUMBER,\r\n        null as CARD_ID,\r\n        null as BANK_ACCOUNT_ID,\r\n        null as SOURCE_ID,\r\n        null as SOURCE_TRANSFER,\r\n        null as STATEMENT_DESCRIPTOR,\r\n        null as STATUS,\r\n        null as TRANSFER_DATA_DESTINATION,\r\n        null as TRANSFER_GROUP,\r\n        null as BALANCE_TRANSACTION_ID,\r\n        null as CUSTOMER_ID,\r\n        null as INVOICE_ID,\r\n        null as METADATA,\r\n        null as PAYMENT_INTENT_ID,\r\n        null as PAYMENT_METHOD_ID,\r\n        null as TRANSFER_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Charge"], "unique_id": "model.sales_dataflo.Stg_Charge", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Charge.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Charge.sql", "name": "Stg_Charge", "resource_type": "model", "alias": "Stg_Charge", "checksum": {"name": "sha256", "checksum": "34453a8e59f391c9692f3bf47a24337661464c3d4732c26ca1cf7d4cd5efcf51"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CHARGE WHERE CHARGE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "CHARGE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Charge.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CHARGE_ID,\n        ID as SOURCE_CHARGE_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        AMOUNT_REFUNDED,\n        APPLICATION,\n        APPLICATION_FEE_AMOUNT,\n        CALCULATED_STATEMENT_DESCRIPTOR,\n        CAPTURED,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        DESTINATION,\n        FAILURE_CODE,\n        FAILURE_MESSAGE,\n        FRAUD_DETAILS_USER_REPORT,\n        FRAUD_DETAILS_STRIPE_REPORT,\n        LIVEMODE,\n        ON_BEHALF_OF,\n        OUTCOME_NETWORK_STATUS,\n        OUTCOME_REASON,\n        OUTCOME_RISK_LEVEL,\n        OUTCOME_RISK_SCORE,\n        OUTCOME_SELLER_MESSAGE,\n        OUTCOME_TYPE,\n        PAID,\n        RECEIPT_EMAIL,\n        RECEIPT_NUMBER,\n        RECEIPT_URL,\n        REFUNDED,\n        SHIPPING_ADDRESS_CITY,\n        SHIPPING_ADDRESS_COUNTRY,\n        SHIPPING_ADDRESS_LINE_1,\n        SHIPPING_ADDRESS_LINE_2,\n        SHIPPING_ADDRESS_POSTAL_CODE,\n        SHIPPING_ADDRESS_STATE,\n        SHIPPING_CARRIER,\n        SHIPPING_NAME,\n        SHIPPING_PHONE,\n        SHIPPING_TRACKING_NUMBER,\n        CARD_ID,\n        BANK_ACCOUNT_ID,\n        SOURCE_ID,\n        SOURCE_TRANSFER,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TRANSFER_DATA_DESTINATION,\n        TRANSFER_GROUP,\n        BALANCE_TRANSACTION_ID,\n        CUSTOMER_ID,\n        INVOICE_ID,\n        METADATA,\n        PAYMENT_INTENT_ID,\n        PAYMENT_METHOD_ID,\n        TRANSFER_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_CHARGE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.CHARGE\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CHARGE_ID,\n        ID as SOURCE_CHARGE_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        AMOUNT_REFUNDED,\n        APPLICATION,\n        APPLICATION_FEE_AMOUNT,\n        CALCULATED_STATEMENT_DESCRIPTOR,\n        CAPTURED,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        DESTINATION,\n        FAILURE_CODE,\n        FAILURE_MESSAGE,\n        FRAUD_DETAILS_USER_REPORT,\n        FRAUD_DETAILS_STRIPE_REPORT,\n        LIVEMODE,\n        ON_BEHALF_OF,\n        OUTCOME_NETWORK_STATUS,\n        OUTCOME_REASON,\n        OUTCOME_RISK_LEVEL,\n        OUTCOME_RISK_SCORE,\n        OUTCOME_SELLER_MESSAGE,\n        OUTCOME_TYPE,\n        PAID,\n        RECEIPT_EMAIL,\n        RECEIPT_NUMBER,\n        RECEIPT_URL,\n        REFUNDED,\n        SHIPPING_ADDRESS_CITY,\n        SHIPPING_ADDRESS_COUNTRY,\n        SHIPPING_ADDRESS_LINE_1,\n        SHIPPING_ADDRESS_LINE_2,\n        SHIPPING_ADDRESS_POSTAL_CODE,\n        SHIPPING_ADDRESS_STATE,\n        SHIPPING_CARRIER,\n        SHIPPING_NAME,\n        SHIPPING_PHONE,\n        SHIPPING_TRACKING_NUMBER,\n        CARD_ID,\n        BANK_ACCOUNT_ID,\n        SOURCE_ID,\n        SOURCE_TRANSFER,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TRANSFER_DATA_DESTINATION,\n        TRANSFER_GROUP,\n        BALANCE_TRANSACTION_ID,\n        CUSTOMER_ID,\n        INVOICE_ID,\n        METADATA,\n        PAYMENT_INTENT_ID,\n        PAYMENT_METHOD_ID,\n        TRANSFER_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_CHARGE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.CHARGE\n         \n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.9384329319000244, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:05.661402Z", "completed_at": "2021-05-19T00:56:07.110196Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:07.110632Z", "completed_at": "2021-05-19T00:56:09.169207Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Account_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_COMPANY WHERE ACCOUNT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Account_ID,\r\n        ID as Source_ID,\r\n        PORTAL_ID,\r\n        IS_DELETED,\r\n        _FIVETRAN_SYNCED,\r\n        PROPERTY_NUM_ASSOCIATED_CONTACTS,\r\n        PROPERTY_ZIP,\r\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\r\n        PROPERTY_STATE,\r\n        PROPERTY_HS_NUM_CONTACTS_WITH_BUYING_ROLES,\r\n        PROPERTY_NAME,\r\n        PROPERTY_LINKEDINBIO,\r\n        PROPERTY_HS_LASTMODIFIEDDATE,\r\n        PROPERTY_FOUNDED_YEAR,\r\n        PROPERTY_COUNTRY,\r\n        PROPERTY_TIMEZONE,\r\n        PROPERTY_TOTAL_MONEY_RAISED,\r\n        PROPERTY_CITY,\r\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\r\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\r\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\r\n        PROPERTY_HS_NUM_DECISION_MAKERS,\r\n        PROPERTY_HS_NUM_OPEN_DEALS,\r\n        PROPERTY_DOMAIN,\r\n        PROPERTY_HS_NUM_BLOCKERS,\r\n        PROPERTY_WEBSITE,\r\n        PROPERTY_FACEBOOK_COMPANY_PAGE,\r\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\r\n        PROPERTY_HS_ANALYTICS_SOURCE,\r\n        PROPERTY_ADDRESS,\r\n        PROPERTY_LINKEDIN_COMPANY_PAGE,\r\n        PROPERTY_HS_TOTAL_DEAL_VALUE,\r\n        PROPERTY_HS_TARGET_ACCOUNT_PROBABILITY,\r\n        PROPERTY_IS_PUBLIC,\r\n        PROPERTY_TWITTERHANDLE,\r\n        PROPERTY_PHONE,\r\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        PROPERTY_HUBSPOT_OWNER_ID,\r\n        PROPERTY_HS_ALL_OWNER_IDS,\r\n        PROPERTY_ADDRESS_2,\r\n        PROPERTY_DESCRIPTION,\r\n        PROPERTY_CREATEDATE,\r\n        PROPERTY_INDUSTRY,\r\n        PROPERTY_ANNUALREVENUE,\r\n        PROPERTY_FIRST_CONTACT_CREATEDATE,\r\n        PROPERTY_WEB_TECHNOLOGIES,\r\n        PROPERTY_NUMBEROFEMPLOYEES,\r\n        PROPERTY_HS_NUM_CHILD_COMPANIES,\r\n        null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.Company\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null as Account_ID,\r\n        null as Source_ID,\r\n        null as PORTAL_ID,\r\n        null as IS_DELETED,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as PROPERTY_NUM_ASSOCIATED_CONTACTS,\r\n        null as PROPERTY_ZIP,\r\n        null as PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\r\n        null as PROPERTY_STATE,\r\n        null as PROPERTY_HS_NUM_CONTACTS_WITH_BUYING_ROLES,\r\n        null as PROPERTY_NAME,\r\n        null as PROPERTY_LINKEDINBIO,\r\n        null as PROPERTY_HS_LASTMODIFIEDDATE,\r\n        null as PROPERTY_FOUNDED_YEAR,\r\n        null as PROPERTY_COUNTRY,\r\n        null as PROPERTY_TIMEZONE,\r\n        null as PROPERTY_TOTAL_MONEY_RAISED,\r\n        null as PROPERTY_CITY,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\r\n        null as PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\r\n        null as PROPERTY_HS_NUM_DECISION_MAKERS,\r\n        null as PROPERTY_HS_NUM_OPEN_DEALS,\r\n        null as PROPERTY_DOMAIN,\r\n        null as PROPERTY_HS_NUM_BLOCKERS,\r\n        null as PROPERTY_WEBSITE,\r\n        null as PROPERTY_FACEBOOK_COMPANY_PAGE,\r\n        null as PROPERTY_HS_ANALYTICS_NUM_VISITS,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE,\r\n        null as PROPERTY_ADDRESS,\r\n        null as PROPERTY_LINKEDIN_COMPANY_PAGE,\r\n        null as PROPERTY_HS_TOTAL_DEAL_VALUE,\r\n        null as PROPERTY_HS_TARGET_ACCOUNT_PROBABILITY,\r\n        null as PROPERTY_IS_PUBLIC,\r\n        null as PROPERTY_TWITTERHANDLE,\r\n        null as PROPERTY_PHONE,\r\n        null as PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        null as PROPERTY_HUBSPOT_OWNER_ID,\r\n        null as PROPERTY_HS_ALL_OWNER_IDS,\r\n        null as PROPERTY_ADDRESS_2,\r\n        null as PROPERTY_DESCRIPTION,\r\n        null as PROPERTY_CREATEDATE,\r\n        null as PROPERTY_INDUSTRY,\r\n        null as PROPERTY_ANNUALREVENUE,\r\n        null as PROPERTY_FIRST_CONTACT_CREATEDATE,\r\n        null as PROPERTY_WEB_TECHNOLOGIES,\r\n        null as PROPERTY_NUMBEROFEMPLOYEES,\r\n        null as PROPERTY_HS_NUM_CHILD_COMPANIES,\r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n        null as CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3    \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Company"], "unique_id": "model.sales_dataflo.Stg_Company", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Company.sql", "original_file_path": "ETL/Stage/HS/Stg_Company.sql", "name": "Stg_Company", "resource_type": "model", "alias": "Stg_Company", "checksum": {"name": "sha256", "checksum": "2d2451c729dfc400645fe20ecbcc362f8a9c8ab721eff904b323a85990c90466"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_COMPANY WHERE ACCOUNT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Account_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Company.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        ID as Source_ID,\n        PORTAL_ID,\n        IS_DELETED,\n        _FIVETRAN_SYNCED,\n        PROPERTY_NUM_ASSOCIATED_CONTACTS,\n        PROPERTY_ZIP,\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\n        PROPERTY_STATE,\n        PROPERTY_HS_NUM_CONTACTS_WITH_BUYING_ROLES,\n        PROPERTY_NAME,\n        PROPERTY_LINKEDINBIO,\n        PROPERTY_HS_LASTMODIFIEDDATE,\n        PROPERTY_FOUNDED_YEAR,\n        PROPERTY_COUNTRY,\n        PROPERTY_TIMEZONE,\n        PROPERTY_TOTAL_MONEY_RAISED,\n        PROPERTY_CITY,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\n        PROPERTY_HS_NUM_DECISION_MAKERS,\n        PROPERTY_HS_NUM_OPEN_DEALS,\n        PROPERTY_DOMAIN,\n        PROPERTY_HS_NUM_BLOCKERS,\n        PROPERTY_WEBSITE,\n        PROPERTY_FACEBOOK_COMPANY_PAGE,\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\n        PROPERTY_HS_ANALYTICS_SOURCE,\n        PROPERTY_ADDRESS,\n        PROPERTY_LINKEDIN_COMPANY_PAGE,\n        PROPERTY_HS_TOTAL_DEAL_VALUE,\n        PROPERTY_HS_TARGET_ACCOUNT_PROBABILITY,\n        PROPERTY_IS_PUBLIC,\n        PROPERTY_TWITTERHANDLE,\n        PROPERTY_PHONE,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_HUBSPOT_OWNER_ID,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        PROPERTY_ADDRESS_2,\n        PROPERTY_DESCRIPTION,\n        PROPERTY_CREATEDATE,\n        PROPERTY_INDUSTRY,\n        PROPERTY_ANNUALREVENUE,\n        PROPERTY_FIRST_CONTACT_CREATEDATE,\n        PROPERTY_WEB_TECHNOLOGIES,\n        PROPERTY_NUMBEROFEMPLOYEES,\n        PROPERTY_HS_NUM_CHILD_COMPANIES,\n        null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Company\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        ID as Source_ID,\n        PORTAL_ID,\n        IS_DELETED,\n        _FIVETRAN_SYNCED,\n        PROPERTY_NUM_ASSOCIATED_CONTACTS,\n        PROPERTY_ZIP,\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\n        PROPERTY_STATE,\n        PROPERTY_HS_NUM_CONTACTS_WITH_BUYING_ROLES,\n        PROPERTY_NAME,\n        PROPERTY_LINKEDINBIO,\n        PROPERTY_HS_LASTMODIFIEDDATE,\n        PROPERTY_FOUNDED_YEAR,\n        PROPERTY_COUNTRY,\n        PROPERTY_TIMEZONE,\n        PROPERTY_TOTAL_MONEY_RAISED,\n        PROPERTY_CITY,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\n        PROPERTY_HS_NUM_DECISION_MAKERS,\n        PROPERTY_HS_NUM_OPEN_DEALS,\n        PROPERTY_DOMAIN,\n        PROPERTY_HS_NUM_BLOCKERS,\n        PROPERTY_WEBSITE,\n        PROPERTY_FACEBOOK_COMPANY_PAGE,\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\n        PROPERTY_HS_ANALYTICS_SOURCE,\n        PROPERTY_ADDRESS,\n        PROPERTY_LINKEDIN_COMPANY_PAGE,\n        PROPERTY_HS_TOTAL_DEAL_VALUE,\n        PROPERTY_HS_TARGET_ACCOUNT_PROBABILITY,\n        PROPERTY_IS_PUBLIC,\n        PROPERTY_TWITTERHANDLE,\n        PROPERTY_PHONE,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_HUBSPOT_OWNER_ID,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        PROPERTY_ADDRESS_2,\n        PROPERTY_DESCRIPTION,\n        PROPERTY_CREATEDATE,\n        PROPERTY_INDUSTRY,\n        PROPERTY_ANNUALREVENUE,\n        PROPERTY_FIRST_CONTACT_CREATEDATE,\n        PROPERTY_WEB_TECHNOLOGIES,\n        PROPERTY_NUMBEROFEMPLOYEES,\n        PROPERTY_HS_NUM_CHILD_COMPANIES,\n        null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Company\n     \n    \n"}, "error": null, "status": "SUCCESS 4966", "execution_time": 6.610270738601685, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:09.602501Z", "completed_at": "2021-05-19T00:56:11.042276Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:11.042569Z", "completed_at": "2021-05-19T00:56:15.785203Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false             \r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Contact_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CONTACT_HS WHERE CONTACT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %}     \r\n   select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Contact_ID,\r\n        ID as Source_ID,\r\n        CANONICAL_VID,\r\n        MERGED_VIDS,\r\n        PROFILE_URL,\r\n        _FIVETRAN_DELETED,\r\n        PROPERTY_COMPANY_SIZE,\r\n        PROPERTY_DATE_OF_BIRTH,\r\n        PROPERTY_DEGREE,\r\n        PROPERTY_FIELD_OF_STUDY,\r\n        PROPERTY_GENDER,\r\n        PROPERTY_GRADUATION_DATE,\r\n        PROPERTY_HS_ANALYTICS_FIRST_TOUCH_CONVERTING_CAMPAIGN,\r\n        PROPERTY_HS_ANALYTICS_LAST_TOUCH_CONVERTING_CAMPAIGN,\r\n        PROPERTY_HS_AVATAR_FILEMANAGER_KEY,\r\n        PROPERTY_HS_BUYING_ROLE,\r\n        PROPERTY_HS_CONTENT_MEMBERSHIP_NOTES,\r\n        PROPERTY_HS_CONTENT_MEMBERSHIP_REGISTRATION_DOMAIN_SENT_TO,\r\n        PROPERTY_HS_CONTENT_MEMBERSHIP_STATUS,\r\n        PROPERTY_HS_CONVERSATIONS_VISITOR_EMAIL,\r\n        PROPERTY_HS_EMAIL_CUSTOMER_QUARANTINED_REASON,\r\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON,\r\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON_ENUM,\r\n        PROPERTY_HS_EMAIL_QUARANTINED_REASON,\r\n        PROPERTY_HS_EMAILCONFIRMATIONSTATUS,\r\n        PROPERTY_HS_FACEBOOK_CLICK_ID,\r\n        PROPERTY_HS_FACEBOOKID,\r\n        PROPERTY_HS_FEEDBACK_LAST_NPS_FOLLOW_UP,\r\n        PROPERTY_HS_FEEDBACK_LAST_NPS_RATING,\r\n        PROPERTY_HS_GOOGLE_CLICK_ID,\r\n        PROPERTY_HS_GOOGLEPLUSID,\r\n        PROPERTY_HS_IP_TIMEZONE,\r\n        PROPERTY_HS_LEAD_STATUS,\r\n        PROPERTY_HS_LEGAL_BASIS,\r\n        PROPERTY_HS_LINKEDINID,\r\n        PROPERTY_HS_MARKETABLE_REASON_ID,\r\n        PROPERTY_HS_MARKETABLE_REASON_TYPE,\r\n        PROPERTY_HS_MARKETABLE_STATUS,\r\n        PROPERTY_HS_MARKETABLE_UNTIL_RENEWAL,\r\n        PROPERTY_HS_MERGED_OBJECT_IDS,\r\n        PROPERTY_HS_PREDICTIVESCORINGTIER,\r\n        PROPERTY_HS_TESTPURGE,\r\n        PROPERTY_HS_TESTROLLBACK,\r\n        PROPERTY_HS_TWITTERID,\r\n        PROPERTY_HS_USER_IDS_OF_ALL_OWNERS,\r\n        PROPERTY_IP_CITY,\r\n        PROPERTY_IP_COUNTRY,\r\n        PROPERTY_IP_COUNTRY_CODE,\r\n        PROPERTY_IP_LATLON,\r\n        PROPERTY_IP_STATE,\r\n        PROPERTY_IP_STATE_CODE,\r\n        PROPERTY_IP_ZIPCODE,\r\n        PROPERTY_JOB_FUNCTION,\r\n        PROPERTY_MARITAL_STATUS,\r\n        PROPERTY_MILITARY_STATUS,\r\n        PROPERTY_RELATIONSHIP_STATUS,\r\n        PROPERTY_SCHOOL,\r\n        PROPERTY_SENIORITY,\r\n        PROPERTY_START_DATE,\r\n        PROPERTY_WORK_EMAIL,\r\n        PROPERTY_FIRSTNAME,\r\n        PROPERTY_HS_ANALYTICS_FIRST_URL,\r\n        PROPERTY_TWITTERHANDLE,\r\n        PROPERTY_CURRENTLYINWORKFLOW,\r\n        PROPERTY_HS_ANALYTICS_LAST_URL,\r\n        PROPERTY_LASTNAME,\r\n        PROPERTY_SALUTATION,\r\n        PROPERTY_TWITTERPROFILEPHOTO,\r\n        PROPERTY_EMAIL,\r\n        PROPERTY_HS_PERSONA,\r\n        PROPERTY_MOBILEPHONE,\r\n        PROPERTY_PHONE,\r\n        PROPERTY_FAX,\r\n        PROPERTY_HS_EMAIL_LAST_EMAIL_NAME,\r\n        PROPERTY_ADDRESS,\r\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_CAMPAIGN,\r\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_MEDIUM,\r\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_SOURCE,\r\n        PROPERTY_HUBSPOT_OWNER_ID,\r\n        PROPERTY_OWNEREMAIL,\r\n        PROPERTY_OWNERNAME,\r\n        PROPERTY_CITY,\r\n        PROPERTY_HUBSPOT_TEAM_ID,\r\n        PROPERTY_LINKEDINBIO,\r\n        PROPERTY_TWITTERBIO,\r\n        PROPERTY_HS_ALL_OWNER_IDS,\r\n        PROPERTY_STATE,\r\n        PROPERTY_HS_ALL_TEAM_IDS,\r\n        PROPERTY_HS_ANALYTICS_SOURCE,\r\n        PROPERTY_ZIP,\r\n        PROPERTY_COUNTRY,\r\n        PROPERTY_HS_ALL_ACCESSIBLE_TEAM_IDS,\r\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\r\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\r\n        PROPERTY_HS_LANGUAGE,\r\n        PROPERTY_HS_ANALYTICS_FIRST_REFERRER,\r\n        PROPERTY_JOBTITLE,\r\n        PROPERTY_PHOTO,\r\n        PROPERTY_HS_ANALYTICS_LAST_REFERRER,\r\n        PROPERTY_MESSAGE,\r\n        PROPERTY_LIFECYCLESTAGE,\r\n        PROPERTY_COMPANY,\r\n        PROPERTY_WEBSITE,\r\n        PROPERTY_NUMEMPLOYEES,\r\n        PROPERTY_ANNUALREVENUE,\r\n        PROPERTY_INDUSTRY,\r\n        PROPERTY_HS_PREDICTIVECONTACTSCOREBUCKET,\r\n        PROPERTY_HS_ANALYTICS_REVENUE,\r\n        PROPERTY_HS_IS_UNWORKED,\r\n        PROPERTY_HS_ANALYTICS_AVERAGE_PAGE_VIEWS,\r\n        PROPERTY_ASSOCIATEDCOMPANYID,\r\n        PROPERTY_HS_ANALYTICS_NUM_EVENT_COMPLETIONS,\r\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\r\n        PROPERTY_HS_SOCIAL_FACEBOOK_CLICKS,\r\n        PROPERTY_HS_SOCIAL_GOOGLE_PLUS_CLICKS,\r\n        PROPERTY_HS_SOCIAL_LINKEDIN_CLICKS,\r\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\r\n        PROPERTY_LASTMODIFIEDDATE,\r\n        PROPERTY_HS_SOCIAL_NUM_BROADCAST_CLICKS,\r\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\r\n        PROPERTY_HS_LIFECYCLESTAGE_LEAD_DATE,\r\n        PROPERTY_CREATEDATE,\r\n        PROPERTY_HS_SOCIAL_TWITTER_CLICKS,\r\n        PROPERTY_HS_COUNT_IS_WORKED,\r\n        PROPERTY_HS_COUNT_IS_UNWORKED,\r\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        PROPERTY_HS_LIFECYCLESTAGE_SUBSCRIBER_DATE,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3,        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.Contact\r\n    {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as Contact_ID,\r\n        null as  Source_ID,\r\n        null as CANONICAL_VID,\r\n        null as MERGED_VIDS,\r\n        null as PROFILE_URL,\r\n        null as _FIVETRAN_DELETED,\r\n        null as PROPERTY_COMPANY_SIZE,\r\n        null as PROPERTY_DATE_OF_BIRTH,\r\n        null as PROPERTY_DEGREE,\r\n        null as PROPERTY_FIELD_OF_STUDY,\r\n        null as PROPERTY_GENDER,\r\n        null as PROPERTY_GRADUATION_DATE,\r\n        null as PROPERTY_HS_ANALYTICS_FIRST_TOUCH_CONVERTING_CAMPAIGN,\r\n        null as PROPERTY_HS_ANALYTICS_LAST_TOUCH_CONVERTING_CAMPAIGN,\r\n        null as PROPERTY_HS_AVATAR_FILEMANAGER_KEY,\r\n        null as PROPERTY_HS_BUYING_ROLE,\r\n        null as PROPERTY_HS_CONTENT_MEMBERSHIP_NOTES,\r\n        null as PROPERTY_HS_CONTENT_MEMBERSHIP_REGISTRATION_DOMAIN_SENT_TO,\r\n        null as PROPERTY_HS_CONTENT_MEMBERSHIP_STATUS,\r\n        null as PROPERTY_HS_CONVERSATIONS_VISITOR_EMAIL,\r\n        null as PROPERTY_HS_EMAIL_CUSTOMER_QUARANTINED_REASON,\r\n        null as PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON,\r\n        null as PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON_ENUM,\r\n        null as PROPERTY_HS_EMAIL_QUARANTINED_REASON,\r\n        null as PROPERTY_HS_EMAILCONFIRMATIONSTATUS,\r\n        null as PROPERTY_HS_FACEBOOK_CLICK_ID,\r\n        null as PROPERTY_HS_FACEBOOKID,\r\n        null as PROPERTY_HS_FEEDBACK_LAST_NPS_FOLLOW_UP,\r\n        null as PROPERTY_HS_FEEDBACK_LAST_NPS_RATING,\r\n        null as PROPERTY_HS_GOOGLE_CLICK_ID,\r\n        null as PROPERTY_HS_GOOGLEPLUSID,\r\n        null as PROPERTY_HS_IP_TIMEZONE,\r\n        null as PROPERTY_HS_LEAD_STATUS,\r\n        null as PROPERTY_HS_LEGAL_BASIS,\r\n        null as PROPERTY_HS_LINKEDINID,\r\n        null as PROPERTY_HS_MARKETABLE_REASON_ID,\r\n        null as PROPERTY_HS_MARKETABLE_REASON_TYPE,\r\n        null as PROPERTY_HS_MARKETABLE_STATUS,\r\n        null as PROPERTY_HS_MARKETABLE_UNTIL_RENEWAL,\r\n        null as PROPERTY_HS_MERGED_OBJECT_IDS,\r\n        null as PROPERTY_HS_PREDICTIVESCORINGTIER,\r\n        null as PROPERTY_HS_TESTPURGE,\r\n        null as PROPERTY_HS_TESTROLLBACK,\r\n        null as PROPERTY_HS_TWITTERID,\r\n        null as PROPERTY_HS_USER_IDS_OF_ALL_OWNERS,\r\n        null as PROPERTY_IP_CITY,\r\n        null as PROPERTY_IP_COUNTRY,\r\n        null as PROPERTY_IP_COUNTRY_CODE,\r\n        null as PROPERTY_IP_LATLON,\r\n        null as PROPERTY_IP_STATE,\r\n        null as PROPERTY_IP_STATE_CODE,\r\n        null as PROPERTY_IP_ZIPCODE,\r\n        null as PROPERTY_JOB_FUNCTION,\r\n        null as PROPERTY_MARITAL_STATUS,\r\n        null as PROPERTY_MILITARY_STATUS,\r\n        null as PROPERTY_RELATIONSHIP_STATUS,\r\n        null as PROPERTY_SCHOOL,\r\n        null as PROPERTY_SENIORITY,\r\n        null as PROPERTY_START_DATE,\r\n        null as PROPERTY_WORK_EMAIL,\r\n        null as PROPERTY_FIRSTNAME,\r\n        null as PROPERTY_HS_ANALYTICS_FIRST_URL,\r\n        null as PROPERTY_TWITTERHANDLE,\r\n        null as PROPERTY_CURRENTLYINWORKFLOW,\r\n        null as PROPERTY_HS_ANALYTICS_LAST_URL,\r\n        null as PROPERTY_LASTNAME,\r\n        null as PROPERTY_SALUTATION,\r\n        null as PROPERTY_TWITTERPROFILEPHOTO,\r\n        null as PROPERTY_EMAIL,\r\n        null as PROPERTY_HS_PERSONA,\r\n        null as PROPERTY_MOBILEPHONE,\r\n        null as PROPERTY_PHONE,\r\n        null as PROPERTY_FAX,\r\n        null as PROPERTY_HS_EMAIL_LAST_EMAIL_NAME,\r\n        null as PROPERTY_ADDRESS,\r\n        null as PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_CAMPAIGN,\r\n        null as PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_MEDIUM,\r\n        null as PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_SOURCE,\r\n        null as PROPERTY_HUBSPOT_OWNER_ID,\r\n        null as PROPERTY_OWNEREMAIL,\r\n        null as PROPERTY_OWNERNAME,\r\n        null as PROPERTY_CITY,\r\n        null as PROPERTY_HUBSPOT_TEAM_ID,\r\n        null as PROPERTY_LINKEDINBIO,\r\n        null as PROPERTY_TWITTERBIO,\r\n        null as PROPERTY_HS_ALL_OWNER_IDS,\r\n        null as PROPERTY_STATE,\r\n        null as PROPERTY_HS_ALL_TEAM_IDS,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE,\r\n        null as PROPERTY_ZIP,\r\n        null as PROPERTY_COUNTRY,\r\n        null as PROPERTY_HS_ALL_ACCESSIBLE_TEAM_IDS,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\r\n        null as PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\r\n        null as PROPERTY_HS_LANGUAGE,\r\n        null as PROPERTY_HS_ANALYTICS_FIRST_REFERRER,\r\n        null as PROPERTY_JOBTITLE,\r\n        null as PROPERTY_PHOTO,\r\n        null as PROPERTY_HS_ANALYTICS_LAST_REFERRER,\r\n        null as PROPERTY_MESSAGE,\r\n        null as PROPERTY_LIFECYCLESTAGE,\r\n        null as PROPERTY_COMPANY,\r\n        null as PROPERTY_WEBSITE,\r\n        null as PROPERTY_NUMEMPLOYEES,\r\n        null as PROPERTY_ANNUALREVENUE,\r\n        null as PROPERTY_INDUSTRY,\r\n        null as PROPERTY_HS_PREDICTIVECONTACTSCOREBUCKET,\r\n        null as PROPERTY_HS_ANALYTICS_REVENUE,\r\n        null as PROPERTY_HS_IS_UNWORKED,\r\n        null as PROPERTY_HS_ANALYTICS_AVERAGE_PAGE_VIEWS,\r\n        null as PROPERTY_ASSOCIATEDCOMPANYID,\r\n        null as PROPERTY_HS_ANALYTICS_NUM_EVENT_COMPLETIONS,\r\n        null as PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\r\n        null as PROPERTY_HS_SOCIAL_FACEBOOK_CLICKS,\r\n        null as PROPERTY_HS_SOCIAL_GOOGLE_PLUS_CLICKS,\r\n        null as PROPERTY_HS_SOCIAL_LINKEDIN_CLICKS,\r\n        null as PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\r\n        null as PROPERTY_LASTMODIFIEDDATE,\r\n        null as PROPERTY_HS_SOCIAL_NUM_BROADCAST_CLICKS,\r\n        null as PROPERTY_HS_ANALYTICS_NUM_VISITS,\r\n        null as PROPERTY_HS_LIFECYCLESTAGE_LEAD_DATE,\r\n        null as PROPERTY_CREATEDATE,\r\n        null as PROPERTY_HS_SOCIAL_TWITTER_CLICKS,\r\n        null as PROPERTY_HS_COUNT_IS_WORKED,\r\n        null as PROPERTY_HS_COUNT_IS_UNWORKED,\r\n        null as PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\r\n        null as PROPERTY_HS_LIFECYCLESTAGE_SUBSCRIBER_DATE,        \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3    \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Contact_hs"], "unique_id": "model.sales_dataflo.Stg_Contact_hs", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Contact_hs.sql", "original_file_path": "ETL/Stage/HS/Stg_Contact_hs.sql", "name": "Stg_Contact_hs", "resource_type": "model", "alias": "Stg_Contact_hs", "checksum": {"name": "sha256", "checksum": "8275d3c0855b4557e2bb2da001c837ca3d164330df9383a106e380b36ae64e2c"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CONTACT_HS WHERE CONTACT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Contact_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Contact_hs.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n      \n   select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Contact_ID,\n        ID as Source_ID,\n        CANONICAL_VID,\n        MERGED_VIDS,\n        PROFILE_URL,\n        _FIVETRAN_DELETED,\n        PROPERTY_COMPANY_SIZE,\n        PROPERTY_DATE_OF_BIRTH,\n        PROPERTY_DEGREE,\n        PROPERTY_FIELD_OF_STUDY,\n        PROPERTY_GENDER,\n        PROPERTY_GRADUATION_DATE,\n        PROPERTY_HS_ANALYTICS_FIRST_TOUCH_CONVERTING_CAMPAIGN,\n        PROPERTY_HS_ANALYTICS_LAST_TOUCH_CONVERTING_CAMPAIGN,\n        PROPERTY_HS_AVATAR_FILEMANAGER_KEY,\n        PROPERTY_HS_BUYING_ROLE,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_NOTES,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_REGISTRATION_DOMAIN_SENT_TO,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_STATUS,\n        PROPERTY_HS_CONVERSATIONS_VISITOR_EMAIL,\n        PROPERTY_HS_EMAIL_CUSTOMER_QUARANTINED_REASON,\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON,\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON_ENUM,\n        PROPERTY_HS_EMAIL_QUARANTINED_REASON,\n        PROPERTY_HS_EMAILCONFIRMATIONSTATUS,\n        PROPERTY_HS_FACEBOOK_CLICK_ID,\n        PROPERTY_HS_FACEBOOKID,\n        PROPERTY_HS_FEEDBACK_LAST_NPS_FOLLOW_UP,\n        PROPERTY_HS_FEEDBACK_LAST_NPS_RATING,\n        PROPERTY_HS_GOOGLE_CLICK_ID,\n        PROPERTY_HS_GOOGLEPLUSID,\n        PROPERTY_HS_IP_TIMEZONE,\n        PROPERTY_HS_LEAD_STATUS,\n        PROPERTY_HS_LEGAL_BASIS,\n        PROPERTY_HS_LINKEDINID,\n        PROPERTY_HS_MARKETABLE_REASON_ID,\n        PROPERTY_HS_MARKETABLE_REASON_TYPE,\n        PROPERTY_HS_MARKETABLE_STATUS,\n        PROPERTY_HS_MARKETABLE_UNTIL_RENEWAL,\n        PROPERTY_HS_MERGED_OBJECT_IDS,\n        PROPERTY_HS_PREDICTIVESCORINGTIER,\n        PROPERTY_HS_TESTPURGE,\n        PROPERTY_HS_TESTROLLBACK,\n        PROPERTY_HS_TWITTERID,\n        PROPERTY_HS_USER_IDS_OF_ALL_OWNERS,\n        PROPERTY_IP_CITY,\n        PROPERTY_IP_COUNTRY,\n        PROPERTY_IP_COUNTRY_CODE,\n        PROPERTY_IP_LATLON,\n        PROPERTY_IP_STATE,\n        PROPERTY_IP_STATE_CODE,\n        PROPERTY_IP_ZIPCODE,\n        PROPERTY_JOB_FUNCTION,\n        PROPERTY_MARITAL_STATUS,\n        PROPERTY_MILITARY_STATUS,\n        PROPERTY_RELATIONSHIP_STATUS,\n        PROPERTY_SCHOOL,\n        PROPERTY_SENIORITY,\n        PROPERTY_START_DATE,\n        PROPERTY_WORK_EMAIL,\n        PROPERTY_FIRSTNAME,\n        PROPERTY_HS_ANALYTICS_FIRST_URL,\n        PROPERTY_TWITTERHANDLE,\n        PROPERTY_CURRENTLYINWORKFLOW,\n        PROPERTY_HS_ANALYTICS_LAST_URL,\n        PROPERTY_LASTNAME,\n        PROPERTY_SALUTATION,\n        PROPERTY_TWITTERPROFILEPHOTO,\n        PROPERTY_EMAIL,\n        PROPERTY_HS_PERSONA,\n        PROPERTY_MOBILEPHONE,\n        PROPERTY_PHONE,\n        PROPERTY_FAX,\n        PROPERTY_HS_EMAIL_LAST_EMAIL_NAME,\n        PROPERTY_ADDRESS,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_CAMPAIGN,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_MEDIUM,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_SOURCE,\n        PROPERTY_HUBSPOT_OWNER_ID,\n        PROPERTY_OWNEREMAIL,\n        PROPERTY_OWNERNAME,\n        PROPERTY_CITY,\n        PROPERTY_HUBSPOT_TEAM_ID,\n        PROPERTY_LINKEDINBIO,\n        PROPERTY_TWITTERBIO,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        PROPERTY_STATE,\n        PROPERTY_HS_ALL_TEAM_IDS,\n        PROPERTY_HS_ANALYTICS_SOURCE,\n        PROPERTY_ZIP,\n        PROPERTY_COUNTRY,\n        PROPERTY_HS_ALL_ACCESSIBLE_TEAM_IDS,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\n        PROPERTY_HS_LANGUAGE,\n        PROPERTY_HS_ANALYTICS_FIRST_REFERRER,\n        PROPERTY_JOBTITLE,\n        PROPERTY_PHOTO,\n        PROPERTY_HS_ANALYTICS_LAST_REFERRER,\n        PROPERTY_MESSAGE,\n        PROPERTY_LIFECYCLESTAGE,\n        PROPERTY_COMPANY,\n        PROPERTY_WEBSITE,\n        PROPERTY_NUMEMPLOYEES,\n        PROPERTY_ANNUALREVENUE,\n        PROPERTY_INDUSTRY,\n        PROPERTY_HS_PREDICTIVECONTACTSCOREBUCKET,\n        PROPERTY_HS_ANALYTICS_REVENUE,\n        PROPERTY_HS_IS_UNWORKED,\n        PROPERTY_HS_ANALYTICS_AVERAGE_PAGE_VIEWS,\n        PROPERTY_ASSOCIATEDCOMPANYID,\n        PROPERTY_HS_ANALYTICS_NUM_EVENT_COMPLETIONS,\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\n        PROPERTY_HS_SOCIAL_FACEBOOK_CLICKS,\n        PROPERTY_HS_SOCIAL_GOOGLE_PLUS_CLICKS,\n        PROPERTY_HS_SOCIAL_LINKEDIN_CLICKS,\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\n        PROPERTY_LASTMODIFIEDDATE,\n        PROPERTY_HS_SOCIAL_NUM_BROADCAST_CLICKS,\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\n        PROPERTY_HS_LIFECYCLESTAGE_LEAD_DATE,\n        PROPERTY_CREATEDATE,\n        PROPERTY_HS_SOCIAL_TWITTER_CLICKS,\n        PROPERTY_HS_COUNT_IS_WORKED,\n        PROPERTY_HS_COUNT_IS_UNWORKED,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_HS_LIFECYCLESTAGE_SUBSCRIBER_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,        \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Contact\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n      \n   select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Contact_ID,\n        ID as Source_ID,\n        CANONICAL_VID,\n        MERGED_VIDS,\n        PROFILE_URL,\n        _FIVETRAN_DELETED,\n        PROPERTY_COMPANY_SIZE,\n        PROPERTY_DATE_OF_BIRTH,\n        PROPERTY_DEGREE,\n        PROPERTY_FIELD_OF_STUDY,\n        PROPERTY_GENDER,\n        PROPERTY_GRADUATION_DATE,\n        PROPERTY_HS_ANALYTICS_FIRST_TOUCH_CONVERTING_CAMPAIGN,\n        PROPERTY_HS_ANALYTICS_LAST_TOUCH_CONVERTING_CAMPAIGN,\n        PROPERTY_HS_AVATAR_FILEMANAGER_KEY,\n        PROPERTY_HS_BUYING_ROLE,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_NOTES,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_REGISTRATION_DOMAIN_SENT_TO,\n        PROPERTY_HS_CONTENT_MEMBERSHIP_STATUS,\n        PROPERTY_HS_CONVERSATIONS_VISITOR_EMAIL,\n        PROPERTY_HS_EMAIL_CUSTOMER_QUARANTINED_REASON,\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON,\n        PROPERTY_HS_EMAIL_HARD_BOUNCE_REASON_ENUM,\n        PROPERTY_HS_EMAIL_QUARANTINED_REASON,\n        PROPERTY_HS_EMAILCONFIRMATIONSTATUS,\n        PROPERTY_HS_FACEBOOK_CLICK_ID,\n        PROPERTY_HS_FACEBOOKID,\n        PROPERTY_HS_FEEDBACK_LAST_NPS_FOLLOW_UP,\n        PROPERTY_HS_FEEDBACK_LAST_NPS_RATING,\n        PROPERTY_HS_GOOGLE_CLICK_ID,\n        PROPERTY_HS_GOOGLEPLUSID,\n        PROPERTY_HS_IP_TIMEZONE,\n        PROPERTY_HS_LEAD_STATUS,\n        PROPERTY_HS_LEGAL_BASIS,\n        PROPERTY_HS_LINKEDINID,\n        PROPERTY_HS_MARKETABLE_REASON_ID,\n        PROPERTY_HS_MARKETABLE_REASON_TYPE,\n        PROPERTY_HS_MARKETABLE_STATUS,\n        PROPERTY_HS_MARKETABLE_UNTIL_RENEWAL,\n        PROPERTY_HS_MERGED_OBJECT_IDS,\n        PROPERTY_HS_PREDICTIVESCORINGTIER,\n        PROPERTY_HS_TESTPURGE,\n        PROPERTY_HS_TESTROLLBACK,\n        PROPERTY_HS_TWITTERID,\n        PROPERTY_HS_USER_IDS_OF_ALL_OWNERS,\n        PROPERTY_IP_CITY,\n        PROPERTY_IP_COUNTRY,\n        PROPERTY_IP_COUNTRY_CODE,\n        PROPERTY_IP_LATLON,\n        PROPERTY_IP_STATE,\n        PROPERTY_IP_STATE_CODE,\n        PROPERTY_IP_ZIPCODE,\n        PROPERTY_JOB_FUNCTION,\n        PROPERTY_MARITAL_STATUS,\n        PROPERTY_MILITARY_STATUS,\n        PROPERTY_RELATIONSHIP_STATUS,\n        PROPERTY_SCHOOL,\n        PROPERTY_SENIORITY,\n        PROPERTY_START_DATE,\n        PROPERTY_WORK_EMAIL,\n        PROPERTY_FIRSTNAME,\n        PROPERTY_HS_ANALYTICS_FIRST_URL,\n        PROPERTY_TWITTERHANDLE,\n        PROPERTY_CURRENTLYINWORKFLOW,\n        PROPERTY_HS_ANALYTICS_LAST_URL,\n        PROPERTY_LASTNAME,\n        PROPERTY_SALUTATION,\n        PROPERTY_TWITTERPROFILEPHOTO,\n        PROPERTY_EMAIL,\n        PROPERTY_HS_PERSONA,\n        PROPERTY_MOBILEPHONE,\n        PROPERTY_PHONE,\n        PROPERTY_FAX,\n        PROPERTY_HS_EMAIL_LAST_EMAIL_NAME,\n        PROPERTY_ADDRESS,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_CAMPAIGN,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_MEDIUM,\n        PROPERTY_ENGAGEMENTS_LAST_MEETING_BOOKED_SOURCE,\n        PROPERTY_HUBSPOT_OWNER_ID,\n        PROPERTY_OWNEREMAIL,\n        PROPERTY_OWNERNAME,\n        PROPERTY_CITY,\n        PROPERTY_HUBSPOT_TEAM_ID,\n        PROPERTY_LINKEDINBIO,\n        PROPERTY_TWITTERBIO,\n        PROPERTY_HS_ALL_OWNER_IDS,\n        PROPERTY_STATE,\n        PROPERTY_HS_ALL_TEAM_IDS,\n        PROPERTY_HS_ANALYTICS_SOURCE,\n        PROPERTY_ZIP,\n        PROPERTY_COUNTRY,\n        PROPERTY_HS_ALL_ACCESSIBLE_TEAM_IDS,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_1,\n        PROPERTY_HS_ANALYTICS_SOURCE_DATA_2,\n        PROPERTY_HS_LANGUAGE,\n        PROPERTY_HS_ANALYTICS_FIRST_REFERRER,\n        PROPERTY_JOBTITLE,\n        PROPERTY_PHOTO,\n        PROPERTY_HS_ANALYTICS_LAST_REFERRER,\n        PROPERTY_MESSAGE,\n        PROPERTY_LIFECYCLESTAGE,\n        PROPERTY_COMPANY,\n        PROPERTY_WEBSITE,\n        PROPERTY_NUMEMPLOYEES,\n        PROPERTY_ANNUALREVENUE,\n        PROPERTY_INDUSTRY,\n        PROPERTY_HS_PREDICTIVECONTACTSCOREBUCKET,\n        PROPERTY_HS_ANALYTICS_REVENUE,\n        PROPERTY_HS_IS_UNWORKED,\n        PROPERTY_HS_ANALYTICS_AVERAGE_PAGE_VIEWS,\n        PROPERTY_ASSOCIATEDCOMPANYID,\n        PROPERTY_HS_ANALYTICS_NUM_EVENT_COMPLETIONS,\n        PROPERTY_HS_ANALYTICS_FIRST_TIMESTAMP,\n        PROPERTY_HS_SOCIAL_FACEBOOK_CLICKS,\n        PROPERTY_HS_SOCIAL_GOOGLE_PLUS_CLICKS,\n        PROPERTY_HS_SOCIAL_LINKEDIN_CLICKS,\n        PROPERTY_HS_ANALYTICS_NUM_PAGE_VIEWS,\n        PROPERTY_LASTMODIFIEDDATE,\n        PROPERTY_HS_SOCIAL_NUM_BROADCAST_CLICKS,\n        PROPERTY_HS_ANALYTICS_NUM_VISITS,\n        PROPERTY_HS_LIFECYCLESTAGE_LEAD_DATE,\n        PROPERTY_CREATEDATE,\n        PROPERTY_HS_SOCIAL_TWITTER_CLICKS,\n        PROPERTY_HS_COUNT_IS_WORKED,\n        PROPERTY_HS_COUNT_IS_UNWORKED,\n        PROPERTY_HUBSPOT_OWNER_ASSIGNEDDATE,\n        PROPERTY_HS_LIFECYCLESTAGE_SUBSCRIBER_DATE,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3,        \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_CONTACT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.Contact\n    \n    \n"}, "error": null, "status": "SUCCESS 6674", "execution_time": 6.057464838027954, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:16.215335Z", "completed_at": "2021-05-19T00:56:17.491611Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:17.491933Z", "completed_at": "2021-05-19T00:56:21.836067Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'CUSTOMER_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_CUSTOMER WHERE CUSTOMER_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS CUSTOMER_ID,\r\n        ID as SOURCE_CUST_ID,\r\n        ACCOUNT_BALANCE,\r\n        BALANCE,\r\n        CREATED,\r\n        CURRENCY,\r\n        ADDRESS_CITY,\r\n        ADDRESS_COUNTRY,\r\n        ADDRESS_LINE_1,\r\n        ADDRESS_LINE_2,\r\n        ADDRESS_POSTAL_CODE,\r\n        ADDRESS_STATE,\r\n        NAME,\r\n        BANK_ACCOUNT_ID,\r\n        SOURCE_ID,\r\n        DEFAULT_CARD_ID,\r\n        DELINQUENT,\r\n        DESCRIPTION,\r\n        EMAIL,\r\n        PHONE,\r\n        INVOICE_PREFIX,\r\n        INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD,\r\n        INVOICE_SETTINGS_FOOTER,\r\n        LIVEMODE,\r\n        SHIPPING_ADDRESS_CITY,\r\n        SHIPPING_ADDRESS_COUNTRY,\r\n        SHIPPING_ADDRESS_LINE_1,\r\n        SHIPPING_ADDRESS_LINE_2,\r\n        SHIPPING_ADDRESS_POSTAL_CODE,\r\n        SHIPPING_ADDRESS_STATE,\r\n        SHIPPING_CARRIER,\r\n        SHIPPING_NAME,\r\n        SHIPPING_PHONE,\r\n        SHIPPING_TRACKING_NUMBER,\r\n        TAX_INFO_TAX_ID,\r\n        TAX_INFO_TYPE,\r\n        TAX_EXEMPT,\r\n        TAX_INFO_VERIFICATION_STATUS,\r\n        TAX_INFO_VERIFICATION_VERIFIED_NAME,\r\n        IS_DELETED,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_CUSTOMER_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.CUSTOMER\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as CUSTOMER_ID,\r\n        null as SOURCE_CUST_ID,\r\n        null as ACCOUNT_BALANCE,\r\n        null as BALANCE,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as ADDRESS_CITY,\r\n        null as ADDRESS_COUNTRY,\r\n        null as ADDRESS_LINE_1,\r\n        null as ADDRESS_LINE_2,\r\n        null as ADDRESS_POSTAL_CODE,\r\n        null as ADDRESS_STATE,\r\n        null as NAME,\r\n        null as BANK_ACCOUNT_ID,\r\n        null as SOURCE_ID,\r\n        null as DEFAULT_CARD_ID,\r\n        null as DELINQUENT,\r\n        null as DESCRIPTION,\r\n        null as EMAIL,\r\n        null as PHONE,\r\n        null as INVOICE_PREFIX,\r\n        null as INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD,\r\n        null as INVOICE_SETTINGS_FOOTER,\r\n        null as LIVEMODE,\r\n        null as SHIPPING_ADDRESS_CITY,\r\n        null as SHIPPING_ADDRESS_COUNTRY,\r\n        null as SHIPPING_ADDRESS_LINE_1,\r\n        null as SHIPPING_ADDRESS_LINE_2,\r\n        null as SHIPPING_ADDRESS_POSTAL_CODE,\r\n        null as SHIPPING_ADDRESS_STATE,\r\n        null as SHIPPING_CARRIER,\r\n        null as SHIPPING_NAME,\r\n        null as SHIPPING_PHONE,\r\n        null as SHIPPING_TRACKING_NUMBER,\r\n        null as TAX_INFO_TAX_ID,\r\n        null as TAX_INFO_TYPE,\r\n        null as TAX_EXEMPT,\r\n        null as TAX_INFO_VERIFICATION_STATUS,\r\n        null as TAX_INFO_VERIFICATION_VERIFIED_NAME,\r\n        null as IS_DELETED,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Customer"], "unique_id": "model.sales_dataflo.Stg_Customer", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Customer.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Customer.sql", "name": "Stg_Customer", "resource_type": "model", "alias": "Stg_Customer", "checksum": {"name": "sha256", "checksum": "a2ad6ecaf7158b1d22d6528c8350eabe1e7907c86322bca2c31ea7086981e37b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_CUSTOMER WHERE CUSTOMER_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "CUSTOMER_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Customer.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CUSTOMER_ID,\n        ID as SOURCE_CUST_ID,\n        ACCOUNT_BALANCE,\n        BALANCE,\n        CREATED,\n        CURRENCY,\n        ADDRESS_CITY,\n        ADDRESS_COUNTRY,\n        ADDRESS_LINE_1,\n        ADDRESS_LINE_2,\n        ADDRESS_POSTAL_CODE,\n        ADDRESS_STATE,\n        NAME,\n        BANK_ACCOUNT_ID,\n        SOURCE_ID,\n        DEFAULT_CARD_ID,\n        DELINQUENT,\n        DESCRIPTION,\n        EMAIL,\n        PHONE,\n        INVOICE_PREFIX,\n        INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD,\n        INVOICE_SETTINGS_FOOTER,\n        LIVEMODE,\n        SHIPPING_ADDRESS_CITY,\n        SHIPPING_ADDRESS_COUNTRY,\n        SHIPPING_ADDRESS_LINE_1,\n        SHIPPING_ADDRESS_LINE_2,\n        SHIPPING_ADDRESS_POSTAL_CODE,\n        SHIPPING_ADDRESS_STATE,\n        SHIPPING_CARRIER,\n        SHIPPING_NAME,\n        SHIPPING_PHONE,\n        SHIPPING_TRACKING_NUMBER,\n        TAX_INFO_TAX_ID,\n        TAX_INFO_TYPE,\n        TAX_EXEMPT,\n        TAX_INFO_VERIFICATION_STATUS,\n        TAX_INFO_VERIFICATION_VERIFIED_NAME,\n        IS_DELETED,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_CUSTOMER_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.CUSTOMER\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS CUSTOMER_ID,\n        ID as SOURCE_CUST_ID,\n        ACCOUNT_BALANCE,\n        BALANCE,\n        CREATED,\n        CURRENCY,\n        ADDRESS_CITY,\n        ADDRESS_COUNTRY,\n        ADDRESS_LINE_1,\n        ADDRESS_LINE_2,\n        ADDRESS_POSTAL_CODE,\n        ADDRESS_STATE,\n        NAME,\n        BANK_ACCOUNT_ID,\n        SOURCE_ID,\n        DEFAULT_CARD_ID,\n        DELINQUENT,\n        DESCRIPTION,\n        EMAIL,\n        PHONE,\n        INVOICE_PREFIX,\n        INVOICE_SETTINGS_DEFAULT_PAYMENT_METHOD,\n        INVOICE_SETTINGS_FOOTER,\n        LIVEMODE,\n        SHIPPING_ADDRESS_CITY,\n        SHIPPING_ADDRESS_COUNTRY,\n        SHIPPING_ADDRESS_LINE_1,\n        SHIPPING_ADDRESS_LINE_2,\n        SHIPPING_ADDRESS_POSTAL_CODE,\n        SHIPPING_ADDRESS_STATE,\n        SHIPPING_CARRIER,\n        SHIPPING_NAME,\n        SHIPPING_PHONE,\n        SHIPPING_TRACKING_NUMBER,\n        TAX_INFO_TAX_ID,\n        TAX_INFO_TYPE,\n        TAX_EXEMPT,\n        TAX_INFO_VERIFICATION_STATUS,\n        TAX_INFO_VERIFICATION_VERIFIED_NAME,\n        IS_DELETED,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_CUSTOMER_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.CUSTOMER\n         \n    \n"}, "error": null, "status": "SUCCESS 62", "execution_time": 5.866655111312866, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:22.276463Z", "completed_at": "2021-05-19T00:56:23.702753Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:23.703092Z", "completed_at": "2021-05-19T00:56:27.712177Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PIPELINE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_DEAL_PIPELINE WHERE PIPELINE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %}   \r\n  select\r\n        {{ dbt_utils.surrogate_key('PIPELINE_ID') }}  AS PIPELINE_ID,\r\n        PIPELINE_ID  as Source_STAGE_ID,\r\n        LABEL,\r\n        ACTIVE,\r\n        DISPLAY_ORDER,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3, \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.DEAL_PIPELINE\r\n        {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS PIPELINE_ID,\r\n        null  as Source_STAGE_ID,\r\n        null  as LABEL,\r\n        null  as ACTIVE,\r\n        null  as DISPLAY_ORDER,     \r\n        null as Source_type,\r\n        null as DW_SESSION_NM,\r\n        null as DW_INS_UPD_DTS,\r\n         null AS CUSTOMER_TEXT_1,\r\n        NULL AS CUSTOMER_TEXT_2,\r\n        NULL AS CUSTOMER_TEXT_3,\r\n        NULL AS CUSTOMER_TEXT_4,\r\n        NULL AS CUSTOMER_TEXT_5,\r\n        NULL AS CUSTOMER_TEXT_6,\r\n        NULL AS CUSTOMER_NUMBER_1,\r\n        NULL AS CUSTOMER_NUMBER_2,\r\n        NULL AS CUSTOMER_NUMBER_3,\r\n        NULL AS CUSTOMER_DATE_1,\r\n        NULL AS CUSTOMER_DATE_2,\r\n        NULL AS CUSTOMER_DATE_3    \r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Deal_Pipeline"], "unique_id": "model.sales_dataflo.Stg_Deal_Pipeline", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Deal_Pipeline.sql", "original_file_path": "ETL/Stage/HS/Stg_Deal_Pipeline.sql", "name": "Stg_Deal_Pipeline", "resource_type": "model", "alias": "Stg_Deal_Pipeline", "checksum": {"name": "sha256", "checksum": "f2cded3bff3341985e4df3e3056f8780dbfa0f56667cd089c685d77893e8a4cb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_DEAL_PIPELINE WHERE PIPELINE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PIPELINE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Deal_Pipeline.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(PIPELINE_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PIPELINE_ID,\n        PIPELINE_ID  as Source_STAGE_ID,\n        LABEL,\n        ACTIVE,\n        DISPLAY_ORDER,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3, \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_PIPELINE\n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n    \n  select\n        md5(cast(\n    \n    coalesce(cast(PIPELINE_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PIPELINE_ID,\n        PIPELINE_ID  as Source_STAGE_ID,\n        LABEL,\n        ACTIVE,\n        DISPLAY_ORDER,\n         null AS CUSTOMER_TEXT_1,\n        NULL AS CUSTOMER_TEXT_2,\n        NULL AS CUSTOMER_TEXT_3,\n        NULL AS CUSTOMER_TEXT_4,\n        NULL AS CUSTOMER_TEXT_5,\n        NULL AS CUSTOMER_TEXT_6,\n        NULL AS CUSTOMER_NUMBER_1,\n        NULL AS CUSTOMER_NUMBER_2,\n        NULL AS CUSTOMER_NUMBER_3,\n        NULL AS CUSTOMER_DATE_1,\n        NULL AS CUSTOMER_DATE_2,\n        NULL AS CUSTOMER_DATE_3, \n        'HS_RKLIVE_01042021' as Source_type,\n        'D_DEAL_PIPELINE_STAGE_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.DEAL_PIPELINE\n        \n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 5.439991235733032, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:28.145645Z", "completed_at": "2021-05-19T00:56:29.407585Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:29.407879Z", "completed_at": "2021-05-19T00:56:33.155930Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Engagement_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT WHERE Engagement_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }}  AS Engagement_Call_ID,\r\n        ENGAGEMENT_ID,\r\n        TO_NUMBER,\r\n        FROM_NUMBER,\r\n        STATUS,\r\n        EXTERNAL_ID,\r\n        DURATION_MILLISECONDS,\r\n        EXTERNAL_ACCOUNT_ID,\r\n        RECORDING_URL,\r\n        BODY,\r\n        DISPOSITION,\r\n        CALLEE_OBJECT_TYPE,\r\n        CALLEE_OBJECT_ID,\r\n        TRANSCRIPTION_ID,\r\n        UNKNOWN_VISITOR_CONVERSATION,\r\n        SOURCE,\r\n        TITLE,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT_CALL\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS Engagement_Call_ID,\r\n        null  AS ENGAGEMENT_ID,\r\n        null  AS TO_NUMBER,\r\n        null  AS FROM_NUMBER,\r\n        null  AS STATUS,\r\n        null  AS EXTERNAL_ID,\r\n        null  AS DURATION_MILLISECONDS,\r\n        null  AS EXTERNAL_ACCOUNT_ID,\r\n        null  AS RECORDING_URL,\r\n        null  AS BODY,\r\n        null  AS DISPOSITION,\r\n        null  AS CALLEE_OBJECT_TYPE,\r\n        null  AS CALLEE_OBJECT_ID,\r\n        null  AS TRANSCRIPTION_ID,\r\n        null  AS UNKNOWN_VISITOR_CONVERSATION,\r\n        null  AS SOURCE,\r\n        null  AS TITLE,\r\n        null  AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement_Call"], "unique_id": "model.sales_dataflo.Stg_Engagement_Call", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement_Call.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement_Call.sql", "name": "Stg_Engagement_Call", "resource_type": "model", "alias": "Stg_Engagement_Call", "checksum": {"name": "sha256", "checksum": "b1584200b4544ada1a49cae25893091f750ea635e934630e52936cfaff6fa515"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT WHERE Engagement_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Engagement_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement_Call.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Call_ID,\n        ENGAGEMENT_ID,\n        TO_NUMBER,\n        FROM_NUMBER,\n        STATUS,\n        EXTERNAL_ID,\n        DURATION_MILLISECONDS,\n        EXTERNAL_ACCOUNT_ID,\n        RECORDING_URL,\n        BODY,\n        DISPOSITION,\n        CALLEE_OBJECT_TYPE,\n        CALLEE_OBJECT_ID,\n        TRANSCRIPTION_ID,\n        UNKNOWN_VISITOR_CONVERSATION,\n        SOURCE,\n        TITLE,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_CALL\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Call_ID,\n        ENGAGEMENT_ID,\n        TO_NUMBER,\n        FROM_NUMBER,\n        STATUS,\n        EXTERNAL_ID,\n        DURATION_MILLISECONDS,\n        EXTERNAL_ACCOUNT_ID,\n        RECORDING_URL,\n        BODY,\n        DISPOSITION,\n        CALLEE_OBJECT_TYPE,\n        CALLEE_OBJECT_ID,\n        TRANSCRIPTION_ID,\n        UNKNOWN_VISITOR_CONVERSATION,\n        SOURCE,\n        TITLE,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_CALL\n     \n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 5.626614809036255, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:33.588143Z", "completed_at": "2021-05-19T00:56:35.015527Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:35.015824Z", "completed_at": "2021-05-19T00:56:38.784395Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Engagement_Email_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT_EMAIL WHERE Engagement_Email_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }}  AS Engagement_Email_ID,\r\n        ENGAGEMENT_ID,\r\n        FROM_EMAIL,\r\n        FROM_FIRST_NAME,\r\n        FROM_LAST_NAME,\r\n        SUBJECT,\r\n        HTML,\r\n        TEXT,\r\n        TRACKER_KEY,\r\n        MESSAGE_ID,\r\n        THREAD_ID,\r\n        STATUS,\r\n        SENT_VIA,\r\n        LOGGED_FROM,\r\n        ERROR_MESSAGE,\r\n        FACSIMILE_SEND_ID,\r\n        POST_SEND_STATUS,\r\n        MEDIA_PROCESSING_STATUS,\r\n        ATTACHED_VIDEO_OPENED,\r\n        ATTACHED_VIDEO_WATCHED,\r\n        ATTACHED_VIDEO_ID,\r\n        RECIPIENT_DROP_REASONS,\r\n        VALIDATION_SKIPPED,\r\n        EMAIL_SEND_EVENT_ID_CREATED,\r\n        EMAIL_SEND_EVENT_ID_ID,\r\n        PENDING_INLINE_IMAGE_IDS,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT_EMAIL\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS Engagement_Email_ID,\r\n        null  AS Engagement_ID,\r\n        null  AS Source_ID,\r\n        null  AS PORTAL_ID,\r\n        null  AS ACTIVE,\r\n        null  AS OWNER_ID,\r\n        null  AS TYPE,\r\n        null  AS ACTIVITY_TYPE,\r\n        null  AS CREATED_AT,\r\n        null  AS LAST_UPDATED,\r\n        null  AS TIMESTAMP,\r\n        null  AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement_Email"], "unique_id": "model.sales_dataflo.Stg_Engagement_Email", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement_Email.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement_Email.sql", "name": "Stg_Engagement_Email", "resource_type": "model", "alias": "Stg_Engagement_Email", "checksum": {"name": "sha256", "checksum": "f11acd2ba4a68a8fc8401931105ee7f8e5dd7a76ca06b9234fb2dc28a5121ee6"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT_EMAIL WHERE Engagement_Email_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Engagement_Email_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement_Email.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Email_ID,\n        ENGAGEMENT_ID,\n        FROM_EMAIL,\n        FROM_FIRST_NAME,\n        FROM_LAST_NAME,\n        SUBJECT,\n        HTML,\n        TEXT,\n        TRACKER_KEY,\n        MESSAGE_ID,\n        THREAD_ID,\n        STATUS,\n        SENT_VIA,\n        LOGGED_FROM,\n        ERROR_MESSAGE,\n        FACSIMILE_SEND_ID,\n        POST_SEND_STATUS,\n        MEDIA_PROCESSING_STATUS,\n        ATTACHED_VIDEO_OPENED,\n        ATTACHED_VIDEO_WATCHED,\n        ATTACHED_VIDEO_ID,\n        RECIPIENT_DROP_REASONS,\n        VALIDATION_SKIPPED,\n        EMAIL_SEND_EVENT_ID_CREATED,\n        EMAIL_SEND_EVENT_ID_ID,\n        PENDING_INLINE_IMAGE_IDS,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_EMAIL\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Email_ID,\n        ENGAGEMENT_ID,\n        FROM_EMAIL,\n        FROM_FIRST_NAME,\n        FROM_LAST_NAME,\n        SUBJECT,\n        HTML,\n        TEXT,\n        TRACKER_KEY,\n        MESSAGE_ID,\n        THREAD_ID,\n        STATUS,\n        SENT_VIA,\n        LOGGED_FROM,\n        ERROR_MESSAGE,\n        FACSIMILE_SEND_ID,\n        POST_SEND_STATUS,\n        MEDIA_PROCESSING_STATUS,\n        ATTACHED_VIDEO_OPENED,\n        ATTACHED_VIDEO_WATCHED,\n        ATTACHED_VIDEO_ID,\n        RECIPIENT_DROP_REASONS,\n        VALIDATION_SKIPPED,\n        EMAIL_SEND_EVENT_ID_CREATED,\n        EMAIL_SEND_EVENT_ID_ID,\n        PENDING_INLINE_IMAGE_IDS,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_EMAIL\n     \n    \n"}, "error": null, "status": "SUCCESS 3818", "execution_time": 7.000234365463257, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:39.219066Z", "completed_at": "2021-05-19T00:56:40.668312Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:40.668619Z", "completed_at": "2021-05-19T00:56:45.790395Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ENGAGEMENT_Meeting_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT_MEETING WHERE ENGAGEMENT_Meeting_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }}  AS ENGAGEMENT_Meeting_ID,\r\n        ENGAGEMENT_ID,\r\n        BODY,\r\n        START_TIME,\r\n        END_TIME,\r\n        TITLE,\r\n        EXTERNAL_URL,\r\n        SOURCE,\r\n        CREATED_FROM_LINK_ID,\r\n        SOURCE_ID,\r\n        WEB_CONFERENCE_MEETING_ID,\r\n        MEETING_OUTCOME,\r\n        PRE_MEETING_PROSPECT_REMINDERS,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT_MEETING\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS ENGAGEMENT_Meeting_ID,\r\n        null as ENGAGEMENT_ID,\r\n        null  AS BODY,\r\n        null  AS START_TIME,\r\n        null  AS END_TIME,\r\n        null  AS TITLE,\r\n        null  AS EXTERNAL_URL,\r\n        null  AS SOURCE,\r\n        null  AS CREATED_FROM_LINK_ID,\r\n        null  AS SOURCE_ID,\r\n        null  AS WEB_CONFERENCE_MEETING_ID,\r\n        null  AS MEETING_OUTCOME,\r\n        null  AS PRE_MEETING_PROSPECT_REMINDERS,\r\n        null  AS _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement_Meeting"], "unique_id": "model.sales_dataflo.Stg_Engagement_Meeting", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement_Meeting.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement_Meeting.sql", "name": "Stg_Engagement_Meeting", "resource_type": "model", "alias": "Stg_Engagement_Meeting", "checksum": {"name": "sha256", "checksum": "27236c42d20f57270e645017eed506a70548d172239fd3885a020b5817bfacc5"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT_MEETING WHERE ENGAGEMENT_Meeting_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ENGAGEMENT_Meeting_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement_Meeting.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ENGAGEMENT_Meeting_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        START_TIME,\n        END_TIME,\n        TITLE,\n        EXTERNAL_URL,\n        SOURCE,\n        CREATED_FROM_LINK_ID,\n        SOURCE_ID,\n        WEB_CONFERENCE_MEETING_ID,\n        MEETING_OUTCOME,\n        PRE_MEETING_PROSPECT_REMINDERS,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_MEETING\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ENGAGEMENT_Meeting_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        START_TIME,\n        END_TIME,\n        TITLE,\n        EXTERNAL_URL,\n        SOURCE,\n        CREATED_FROM_LINK_ID,\n        SOURCE_ID,\n        WEB_CONFERENCE_MEETING_ID,\n        MEETING_OUTCOME,\n        PRE_MEETING_PROSPECT_REMINDERS,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_MEETING\n     \n    \n"}, "error": null, "status": "SUCCESS 9", "execution_time": 5.2857654094696045, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:46.221639Z", "completed_at": "2021-05-19T00:56:47.470789Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:47.471113Z", "completed_at": "2021-05-19T00:56:51.074857Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Engagement_Note_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT_NOTE WHERE Engagement_Note_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }}  AS Engagement_Note_ID,\r\n        ENGAGEMENT_ID,\r\n        BODY,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT_NOTE\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS Engagement_Note_ID,\r\n        null  AS ENGAGEMENT_ID,\r\n        null  AS BODY,\r\n        null  AS _FIVETRAN_SYNCED,        \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement_Note"], "unique_id": "model.sales_dataflo.Stg_Engagement_Note", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement_Note.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement_Note.sql", "name": "Stg_Engagement_Note", "resource_type": "model", "alias": "Stg_Engagement_Note", "checksum": {"name": "sha256", "checksum": "d0eef873da18bdefb1966f49f85d221dcab0b4db7821ac3d762d227dd491b144"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT_NOTE WHERE Engagement_Note_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Engagement_Note_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement_Note.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Note_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_NOTE\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Engagement_Note_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        _FIVETRAN_SYNCED,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_NOTE\n     \n    \n"}, "error": null, "status": "SUCCESS 60", "execution_time": 5.719880819320679, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:51.510371Z", "completed_at": "2021-05-19T00:56:52.934699Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:52.935019Z", "completed_at": "2021-05-19T00:56:56.793658Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'HS'  and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Engagement_Task_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_ENGAGEMENT_TASK WHERE ENGAGEMENT_TASK_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'HS'  %} \r\n \r\n  select\r\n        {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }}  AS ENGAGEMENT_TASK_ID,\r\n        ENGAGEMENT_ID,\r\n        BODY,\r\n        SUBJECT,\r\n        STATUS,\r\n        FOR_OBJECT_TYPE,\r\n        TASK_TYPE,\r\n        _FIVETRAN_SYNCED,\r\n        SEQUENCE_STEP_ORDER,\r\n        COMPLETION_DATE,\r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS    \r\n    FROM {{ schema_nm }}.ENGAGEMENT_TASK\r\n     {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  entity_typ == 'X'  %}     \r\n       select\r\n        null  AS ENGAGEMENT_TASK_ID,\r\n        null  AS ENGAGEMENT_ID\r\n        null  AS BODY,\r\n        null  AS SUBJECT,\r\n        null  AS STATUS,\r\n        null  AS FOR_OBJECT_TYPE,\r\n        null  AS TASK_TYPE,\r\n        null  AS _FIVETRAN_SYNCED,\r\n        null  AS SEQUENCE_STEP_ORDER,\r\n        null  AS COMPLETION_DATE,      \r\n        '{{ schema_nm }}' as Source_type,\r\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM dual      \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "HS", "Stg_Engagement_Task"], "unique_id": "model.sales_dataflo.Stg_Engagement_Task", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/HS/Stg_Engagement_Task.sql", "original_file_path": "ETL/Stage/HS/Stg_Engagement_Task.sql", "name": "Stg_Engagement_Task", "resource_type": "model", "alias": "Stg_Engagement_Task", "checksum": {"name": "sha256", "checksum": "d83126ffb73d4c0e215115413b171aeade41f0d603891aedf287089939bf7eda"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_ENGAGEMENT_TASK WHERE ENGAGEMENT_TASK_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Engagement_Task_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/HS/Stg_Engagement_Task.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ENGAGEMENT_TASK_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        SUBJECT,\n        STATUS,\n        FOR_OBJECT_TYPE,\n        TASK_TYPE,\n        _FIVETRAN_SYNCED,\n        SEQUENCE_STEP_ORDER,\n        COMPLETION_DATE,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_TASK\n     \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n \n\n\n\n  \n \n  select\n        md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS ENGAGEMENT_TASK_ID,\n        ENGAGEMENT_ID,\n        BODY,\n        SUBJECT,\n        STATUS,\n        FOR_OBJECT_TYPE,\n        TASK_TYPE,\n        _FIVETRAN_SYNCED,\n        SEQUENCE_STEP_ORDER,\n        COMPLETION_DATE,\n        'HS_RKLIVE_01042021' as Source_type,\n        'D_COMPANY_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS    \n    FROM HS_RKLIVE_01042021.ENGAGEMENT_TASK\n     \n    \n"}, "error": null, "status": "SUCCESS 485", "execution_time": 5.420121431350708, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:56:57.232843Z", "completed_at": "2021-05-19T00:56:58.476002Z"}, {"name": "execute", "started_at": "2021-05-19T00:56:58.476363Z", "completed_at": "2021-05-19T00:57:02.224902Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'FEE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_FEE WHERE FEE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('BALANCE_TRANSACTION_ID') }}  AS FEE_ID,\r\n        BALANCE_TRANSACTION_ID,\r\n        INDEX,\r\n        CONNECTED_ACCOUNT_ID,\r\n        AMOUNT,\r\n        APPLICATION,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        TYPE,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_FEE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.FEE\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as FEE_ID,\r\n        null as BALANCE_TRANSACTION_ID,\r\n        null as INDEX,\r\n        null as CONNECTED_ACCOUNT_ID,\r\n        null as AMOUNT,\r\n        null as APPLICATION,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as TYPE,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Fee"], "unique_id": "model.sales_dataflo.Stg_Fee", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Fee.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Fee.sql", "name": "Stg_Fee", "resource_type": "model", "alias": "Stg_Fee", "checksum": {"name": "sha256", "checksum": "8e1078b58aff19efaac4cc22ef50fdf87dc7baeba61b7b0906de2bac0f7394f5"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_FEE WHERE FEE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "FEE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Fee.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(BALANCE_TRANSACTION_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS FEE_ID,\n        BALANCE_TRANSACTION_ID,\n        INDEX,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        APPLICATION,\n        CURRENCY,\n        DESCRIPTION,\n        TYPE,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_FEE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.FEE\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(BALANCE_TRANSACTION_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS FEE_ID,\n        BALANCE_TRANSACTION_ID,\n        INDEX,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        APPLICATION,\n        CURRENCY,\n        DESCRIPTION,\n        TYPE,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_FEE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.FEE\n         \n    \n"}, "error": null, "status": "SUCCESS 113", "execution_time": 5.649865388870239, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:02.655646Z", "completed_at": "2021-05-19T00:57:04.106188Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:04.106665Z", "completed_at": "2021-05-19T00:57:07.875631Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'INVOICE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_INVOICE WHERE INVOICE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS INVOICE_ID,\r\n        ID as SOURCE_ID,\r\n        AMOUNT_DUE,\r\n        AMOUNT_PAID,\r\n        AMOUNT_REMAINING,\r\n        ATTEMPT_COUNT,\r\n        ATTEMPTED,\r\n        AUTO_ADVANCE,\r\n        BILLING,\r\n        BILLING_REASON,\r\n        CURRENCY,\r\n        CREATED,\r\n        DATE,\r\n        DESCRIPTION,\r\n        DUE_DATE,\r\n        ENDING_BALANCE,\r\n        FINALIZED_AT,\r\n        FOOTER,\r\n        HOSTED_INVOICE_URL,\r\n        INVOICE_PDF,\r\n        LIVEMODE,\r\n        NEXT_PAYMENT_ATTEMPT,\r\n        NUMBER,\r\n        PAID,\r\n        PERIOD_START,\r\n        PERIOD_END,\r\n        RECEIPT_NUMBER,\r\n        STARTING_BALANCE,\r\n        STATEMENT_DESCRIPTOR,\r\n        STATUS,\r\n        SUBSCRIPTION_PRORATION_DATE,\r\n        SUBTOTAL,\r\n        TAX,\r\n        TAX_PERCENT,\r\n        THRESHOLD_REASON_AMOUNT_GTE,\r\n        STATUS_TRANSITIONS_FINALIZED_AT,\r\n        STATUS_TRANSITIONS_PAID_AT,\r\n        STATUS_TRANSITIONS_VOIDED_AT,\r\n        STATUS_TRANSITIONS_MARKED_UNCOLLECTIBLE_AT,\r\n        TOTAL,\r\n        WEBHOOKS_DELIVERED_AT,\r\n        IS_DELETED,\r\n        APPLICATION_FEE_AMOUNT,\r\n        CHARGE_ID,\r\n        CUSTOMER_ID,\r\n        DEFAULT_SOURCE_ID,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_INVOICE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.INVOICE\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as INVOICE_ID,\r\n        null as SOURCE_ID,\r\n        null as AMOUNT_DUE,\r\n        null as AMOUNT_PAID,\r\n        null as AMOUNT_REMAINING,\r\n        null as ATTEMPT_COUNT,\r\n        null as ATTEMPTED,\r\n        null as AUTO_ADVANCE,\r\n        null as BILLING,\r\n        null as BILLING_REASON,\r\n        null as CURRENCY,\r\n        null as CREATED,\r\n        null as DATE,\r\n        null as DESCRIPTION,\r\n        null as DUE_DATE,\r\n        null as ENDING_BALANCE,\r\n        null as FINALIZED_AT,\r\n        null as FOOTER,\r\n        null as HOSTED_INVOICE_URL,\r\n        null as INVOICE_PDF,\r\n        null as LIVEMODE,\r\n        null as NEXT_PAYMENT_ATTEMPT,\r\n        null as NUMBER,\r\n        null as PAID,\r\n        null as PERIOD_START,\r\n        null as PERIOD_END,\r\n        null as RECEIPT_NUMBER,\r\n        null as STARTING_BALANCE,\r\n        null as STATEMENT_DESCRIPTOR,\r\n        null as STATUS,\r\n        null as SUBSCRIPTION_PRORATION_DATE,\r\n        null as SUBTOTAL,\r\n        null as TAX,\r\n        null as TAX_PERCENT,\r\n        null as THRESHOLD_REASON_AMOUNT_GTE,\r\n        null as STATUS_TRANSITIONS_FINALIZED_AT,\r\n        null as STATUS_TRANSITIONS_PAID_AT,\r\n        null as STATUS_TRANSITIONS_VOIDED_AT,\r\n        null as STATUS_TRANSITIONS_MARKED_UNCOLLECTIBLE_AT,\r\n        null as TOTAL,\r\n        null as WEBHOOKS_DELIVERED_AT,\r\n        null as IS_DELETED,\r\n        null as APPLICATION_FEE_AMOUNT,\r\n        null as CHARGE_ID,\r\n        null as CUSTOMER_ID,\r\n        null as DEFAULT_SOURCE_ID,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Invoice"], "unique_id": "model.sales_dataflo.Stg_Invoice", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Invoice.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Invoice.sql", "name": "Stg_Invoice", "resource_type": "model", "alias": "Stg_Invoice", "checksum": {"name": "sha256", "checksum": "7652a12cc5dd77853bef821c9f6048eb8525ffd3949a61515b3a59cd5fe0c0ca"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_INVOICE WHERE INVOICE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "INVOICE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Invoice.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_ID,\n        ID as SOURCE_ID,\n        AMOUNT_DUE,\n        AMOUNT_PAID,\n        AMOUNT_REMAINING,\n        ATTEMPT_COUNT,\n        ATTEMPTED,\n        AUTO_ADVANCE,\n        BILLING,\n        BILLING_REASON,\n        CURRENCY,\n        CREATED,\n        DATE,\n        DESCRIPTION,\n        DUE_DATE,\n        ENDING_BALANCE,\n        FINALIZED_AT,\n        FOOTER,\n        HOSTED_INVOICE_URL,\n        INVOICE_PDF,\n        LIVEMODE,\n        NEXT_PAYMENT_ATTEMPT,\n        NUMBER,\n        PAID,\n        PERIOD_START,\n        PERIOD_END,\n        RECEIPT_NUMBER,\n        STARTING_BALANCE,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        SUBSCRIPTION_PRORATION_DATE,\n        SUBTOTAL,\n        TAX,\n        TAX_PERCENT,\n        THRESHOLD_REASON_AMOUNT_GTE,\n        STATUS_TRANSITIONS_FINALIZED_AT,\n        STATUS_TRANSITIONS_PAID_AT,\n        STATUS_TRANSITIONS_VOIDED_AT,\n        STATUS_TRANSITIONS_MARKED_UNCOLLECTIBLE_AT,\n        TOTAL,\n        WEBHOOKS_DELIVERED_AT,\n        IS_DELETED,\n        APPLICATION_FEE_AMOUNT,\n        CHARGE_ID,\n        CUSTOMER_ID,\n        DEFAULT_SOURCE_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_ID,\n        ID as SOURCE_ID,\n        AMOUNT_DUE,\n        AMOUNT_PAID,\n        AMOUNT_REMAINING,\n        ATTEMPT_COUNT,\n        ATTEMPTED,\n        AUTO_ADVANCE,\n        BILLING,\n        BILLING_REASON,\n        CURRENCY,\n        CREATED,\n        DATE,\n        DESCRIPTION,\n        DUE_DATE,\n        ENDING_BALANCE,\n        FINALIZED_AT,\n        FOOTER,\n        HOSTED_INVOICE_URL,\n        INVOICE_PDF,\n        LIVEMODE,\n        NEXT_PAYMENT_ATTEMPT,\n        NUMBER,\n        PAID,\n        PERIOD_START,\n        PERIOD_END,\n        RECEIPT_NUMBER,\n        STARTING_BALANCE,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        SUBSCRIPTION_PRORATION_DATE,\n        SUBTOTAL,\n        TAX,\n        TAX_PERCENT,\n        THRESHOLD_REASON_AMOUNT_GTE,\n        STATUS_TRANSITIONS_FINALIZED_AT,\n        STATUS_TRANSITIONS_PAID_AT,\n        STATUS_TRANSITIONS_VOIDED_AT,\n        STATUS_TRANSITIONS_MARKED_UNCOLLECTIBLE_AT,\n        TOTAL,\n        WEBHOOKS_DELIVERED_AT,\n        IS_DELETED,\n        APPLICATION_FEE_AMOUNT,\n        CHARGE_ID,\n        CUSTOMER_ID,\n        DEFAULT_SOURCE_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE\n         \n    \n"}, "error": null, "status": "SUCCESS 2093", "execution_time": 5.536883115768433, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:08.308756Z", "completed_at": "2021-05-19T00:57:09.572322Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:09.572663Z", "completed_at": "2021-05-19T00:57:13.413858Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'INVOICE_ITEM_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_INVOICE_ITEM WHERE INVOICE_ITEM_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS INVOICE_ITEM_ID,\r\n        ID as SOURCE_ID,\r\n        AMOUNT,\r\n        CURRENCY,\r\n        DATE,\r\n        DESCRIPTION,\r\n        DISCOUNTABLE,\r\n        LIVEMODE,\r\n        PERIOD_START,\r\n        PERIOD_END,\r\n        PRORATION,\r\n        QUANTITY,\r\n        UNIT_AMOUNT,\r\n        IS_DELETED,\r\n        CUSTOMER_ID,\r\n        INVOICE_ID,\r\n        METADATA,\r\n        SUBSCRIPTION_ID,\r\n        SUBSCRIPTION_ITEM_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.INVOICE_ITEM\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as INVOICE_ITEM_ID,\r\n        null as SOURCE_ID,\r\n        null as AMOUNT,\r\n        null as CURRENCY,\r\n        null as DATE,\r\n        null as DESCRIPTION,\r\n        null as DISCOUNTABLE,\r\n        null as LIVEMODE,\r\n        null as PERIOD_START,\r\n        null as PERIOD_END,\r\n        null as PRORATION,\r\n        null as QUANTITY,\r\n        null as UNIT_AMOUNT,\r\n        null as IS_DELETED,\r\n        null as CUSTOMER_ID,\r\n        null as INVOICE_ID,\r\n        null as METADATA,\r\n        null as SUBSCRIPTION_ID,\r\n        null as SUBSCRIPTION_ITEM_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Invoice_Item"], "unique_id": "model.sales_dataflo.Stg_Invoice_Item", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Invoice_Item.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Invoice_Item.sql", "name": "Stg_Invoice_Item", "resource_type": "model", "alias": "Stg_Invoice_Item", "checksum": {"name": "sha256", "checksum": "1a1b869d67b3137e7b11a0bc65fb35a34b263a3254d6d27782679b9b00503411"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_INVOICE_ITEM WHERE INVOICE_ITEM_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "INVOICE_ITEM_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Invoice_Item.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_ITEM_ID,\n        ID as SOURCE_ID,\n        AMOUNT,\n        CURRENCY,\n        DATE,\n        DESCRIPTION,\n        DISCOUNTABLE,\n        LIVEMODE,\n        PERIOD_START,\n        PERIOD_END,\n        PRORATION,\n        QUANTITY,\n        UNIT_AMOUNT,\n        IS_DELETED,\n        CUSTOMER_ID,\n        INVOICE_ID,\n        METADATA,\n        SUBSCRIPTION_ID,\n        SUBSCRIPTION_ITEM_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE_ITEM\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_ITEM_ID,\n        ID as SOURCE_ID,\n        AMOUNT,\n        CURRENCY,\n        DATE,\n        DESCRIPTION,\n        DISCOUNTABLE,\n        LIVEMODE,\n        PERIOD_START,\n        PERIOD_END,\n        PRORATION,\n        QUANTITY,\n        UNIT_AMOUNT,\n        IS_DELETED,\n        CUSTOMER_ID,\n        INVOICE_ID,\n        METADATA,\n        SUBSCRIPTION_ID,\n        SUBSCRIPTION_ITEM_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE_ITEM\n         \n    \n"}, "error": null, "status": "SUCCESS 32", "execution_time": 5.4696502685546875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:13.848369Z", "completed_at": "2021-05-19T00:57:15.290765Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:15.291081Z", "completed_at": "2021-05-19T00:57:18.889506Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'INVOICE_LINE_ITEM_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_INVOICE_LINE_ITEM WHERE INVOICE_LINE_ITEM_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS INVOICE_LINE_ITEM_ID,\r\n        ID as SOURCE_ID,\r\n        INVOICE_ID,\r\n        UNIQUE_ID,\r\n        AMOUNT,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        DISCOUNTABLE,\r\n        LIVEMODE,\r\n        PERIOD_START,\r\n        PERIOD_END,\r\n        PRORATION,\r\n        QUANTITY,\r\n        TYPE,\r\n        PLAN_ID,\r\n        METADATA,\r\n        SUBSCRIPTION_ID,\r\n        SUBSCRIPTION_ITEM_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.INVOICE_LINE_ITEM\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as INVOICE_LINE_ITEM_ID,\r\n        null as SOURCE_ID,\r\n        null as INVOICE_ID,\r\n        null as UNIQUE_ID,\r\n        null as AMOUNT,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as DISCOUNTABLE,\r\n        null as LIVEMODE,\r\n        null as PERIOD_START,\r\n        null as PERIOD_END,\r\n        null as PRORATION,\r\n        null as QUANTITY,\r\n        null as TYPE,\r\n        null as PLAN_ID,\r\n        null as METADATA,\r\n        null as SUBSCRIPTION_ID,\r\n        null as SUBSCRIPTION_ITEM_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Invoice_Line_Item"], "unique_id": "model.sales_dataflo.Stg_Invoice_Line_Item", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Invoice_Line_Item.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Invoice_Line_Item.sql", "name": "Stg_Invoice_Line_Item", "resource_type": "model", "alias": "Stg_Invoice_Line_Item", "checksum": {"name": "sha256", "checksum": "fcd2f97eaced3f40d5a031c8d1a5b2f25e5978657cce9891e0273eb92dc15659"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_INVOICE_LINE_ITEM WHERE INVOICE_LINE_ITEM_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "INVOICE_LINE_ITEM_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Invoice_Line_Item.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_LINE_ITEM_ID,\n        ID as SOURCE_ID,\n        INVOICE_ID,\n        UNIQUE_ID,\n        AMOUNT,\n        CURRENCY,\n        DESCRIPTION,\n        DISCOUNTABLE,\n        LIVEMODE,\n        PERIOD_START,\n        PERIOD_END,\n        PRORATION,\n        QUANTITY,\n        TYPE,\n        PLAN_ID,\n        METADATA,\n        SUBSCRIPTION_ID,\n        SUBSCRIPTION_ITEM_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE_LINE_ITEM\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS INVOICE_LINE_ITEM_ID,\n        ID as SOURCE_ID,\n        INVOICE_ID,\n        UNIQUE_ID,\n        AMOUNT,\n        CURRENCY,\n        DESCRIPTION,\n        DISCOUNTABLE,\n        LIVEMODE,\n        PERIOD_START,\n        PERIOD_END,\n        PRORATION,\n        QUANTITY,\n        TYPE,\n        PLAN_ID,\n        METADATA,\n        SUBSCRIPTION_ID,\n        SUBSCRIPTION_ITEM_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_INVOICE_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.INVOICE_LINE_ITEM\n         \n    \n"}, "error": null, "status": "SUCCESS 2125", "execution_time": 5.965510845184326, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:19.320640Z", "completed_at": "2021-05-19T00:57:20.746446Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:20.746799Z", "completed_at": "2021-05-19T00:57:24.853113Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PAYMENT_INTENT_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PAYMENT_INTENT WHERE PAYMENT_INTENT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS PAYMENT_INTENT_ID,\r\n        ID as SOURCE_PAYMENT_ID,\r\n        AMOUNT,\r\n        AMOUNT_CAPTURABLE,\r\n        AMOUNT_RECEIVED,\r\n        APPLICATION,\r\n        APPLICATION_FEE_AMOUNT,\r\n        CANCELED_AT,\r\n        CANCELLATION_REASON,\r\n        CAPTURE_METHOD,\r\n        CONFIRMATION_METHOD,\r\n        CREATED,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        LAST_PAYMENT_ERROR_TYPE,\r\n        LAST_PAYMENT_ERROR_CODE,\r\n        LAST_PAYMENT_ERROR_DECLINE_CODE,\r\n        LAST_PAYMENT_ERROR_DOC_URL,\r\n        LAST_PAYMENT_ERROR_MESSAGE,\r\n        LAST_PAYMENT_ERROR_PARAM,\r\n        LAST_PAYMENT_ERROR_SOURCE_ID,\r\n        LAST_PAYMENT_ERROR_CHARGE_ID,\r\n        LIVEMODE,\r\n        ON_BEHALF_OF,\r\n        RECEIPT_EMAIL,\r\n        STATEMENT_DESCRIPTOR,\r\n        STATUS,\r\n        TRANSFER_DATA_DESTINATION,\r\n        TRANSFER_GROUP,\r\n        PAYMENT_METHOD_ID,\r\n        CUSTOMER_ID,\r\n        METADATA,\r\n        SOURCE_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PAYMENT_INTENT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PAYMENT_INTENT\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as PAYMENT_INTENT_ID,\r\n        null as SOURCE_PAYMENT_ID,\r\n        null as AMOUNT,\r\n        null as AMOUNT_CAPTURABLE,\r\n        null as AMOUNT_RECEIVED,\r\n        null as APPLICATION,\r\n        null as APPLICATION_FEE_AMOUNT,\r\n        null as CANCELED_AT,\r\n        null as CANCELLATION_REASON,\r\n        null as CAPTURE_METHOD,\r\n        null as CONFIRMATION_METHOD,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as LAST_PAYMENT_ERROR_TYPE,\r\n        null as LAST_PAYMENT_ERROR_CODE,\r\n        null as LAST_PAYMENT_ERROR_DECLINE_CODE,\r\n        null as LAST_PAYMENT_ERROR_DOC_URL,\r\n        null as LAST_PAYMENT_ERROR_MESSAGE,\r\n        null as LAST_PAYMENT_ERROR_PARAM,\r\n        null as LAST_PAYMENT_ERROR_SOURCE_ID,\r\n        null as LAST_PAYMENT_ERROR_CHARGE_ID,\r\n        null as LIVEMODE,\r\n        null as ON_BEHALF_OF,\r\n        null as RECEIPT_EMAIL,\r\n        null as STATEMENT_DESCRIPTOR,\r\n        null as STATUS,\r\n        null as TRANSFER_DATA_DESTINATION,\r\n        null as TRANSFER_GROUP,\r\n        null as PAYMENT_METHOD_ID,\r\n        null as CUSTOMER_ID,\r\n        null as METADATA,\r\n        null as SOURCE_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Payment_Intent"], "unique_id": "model.sales_dataflo.Stg_Payment_Intent", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Payment_Intent.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Payment_Intent.sql", "name": "Stg_Payment_Intent", "resource_type": "model", "alias": "Stg_Payment_Intent", "checksum": {"name": "sha256", "checksum": "1524a4bcc3b5041355d36f9d0a157bd67eee605be42d9c1a8c880dc36d0daf7b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PAYMENT_INTENT WHERE PAYMENT_INTENT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PAYMENT_INTENT_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Payment_Intent.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PAYMENT_INTENT_ID,\n        ID as SOURCE_PAYMENT_ID,\n        AMOUNT,\n        AMOUNT_CAPTURABLE,\n        AMOUNT_RECEIVED,\n        APPLICATION,\n        APPLICATION_FEE_AMOUNT,\n        CANCELED_AT,\n        CANCELLATION_REASON,\n        CAPTURE_METHOD,\n        CONFIRMATION_METHOD,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        LAST_PAYMENT_ERROR_TYPE,\n        LAST_PAYMENT_ERROR_CODE,\n        LAST_PAYMENT_ERROR_DECLINE_CODE,\n        LAST_PAYMENT_ERROR_DOC_URL,\n        LAST_PAYMENT_ERROR_MESSAGE,\n        LAST_PAYMENT_ERROR_PARAM,\n        LAST_PAYMENT_ERROR_SOURCE_ID,\n        LAST_PAYMENT_ERROR_CHARGE_ID,\n        LIVEMODE,\n        ON_BEHALF_OF,\n        RECEIPT_EMAIL,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TRANSFER_DATA_DESTINATION,\n        TRANSFER_GROUP,\n        PAYMENT_METHOD_ID,\n        CUSTOMER_ID,\n        METADATA,\n        SOURCE_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYMENT_INTENT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PAYMENT_INTENT\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PAYMENT_INTENT_ID,\n        ID as SOURCE_PAYMENT_ID,\n        AMOUNT,\n        AMOUNT_CAPTURABLE,\n        AMOUNT_RECEIVED,\n        APPLICATION,\n        APPLICATION_FEE_AMOUNT,\n        CANCELED_AT,\n        CANCELLATION_REASON,\n        CAPTURE_METHOD,\n        CONFIRMATION_METHOD,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        LAST_PAYMENT_ERROR_TYPE,\n        LAST_PAYMENT_ERROR_CODE,\n        LAST_PAYMENT_ERROR_DECLINE_CODE,\n        LAST_PAYMENT_ERROR_DOC_URL,\n        LAST_PAYMENT_ERROR_MESSAGE,\n        LAST_PAYMENT_ERROR_PARAM,\n        LAST_PAYMENT_ERROR_SOURCE_ID,\n        LAST_PAYMENT_ERROR_CHARGE_ID,\n        LIVEMODE,\n        ON_BEHALF_OF,\n        RECEIPT_EMAIL,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TRANSFER_DATA_DESTINATION,\n        TRANSFER_GROUP,\n        PAYMENT_METHOD_ID,\n        CUSTOMER_ID,\n        METADATA,\n        SOURCE_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYMENT_INTENT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PAYMENT_INTENT\n         \n    \n"}, "error": null, "status": "SUCCESS 62", "execution_time": 5.275272607803345, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:25.290144Z", "completed_at": "2021-05-19T00:57:26.560944Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:26.561278Z", "completed_at": "2021-05-19T00:57:30.133174Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PAYOUT_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PAYOUT WHERE PAYOUT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS PAYOUT_ID,\r\n        ID as Source_ID,\r\n        CONNECTED_ACCOUNT_ID,\r\n        AMOUNT,\r\n        ARRIVAL_DATE,\r\n        AUTOMATIC,\r\n        CREATED,\r\n        CURRENCY,\r\n        DESCRIPTION,\r\n        FAILURE_CODE,\r\n        FAILURE_MESSAGE,\r\n        LIVEMODE,\r\n        METHOD,\r\n        SOURCE_TYPE,\r\n        STATEMENT_DESCRIPTOR,\r\n        STATUS,\r\n        TYPE,\r\n        DESTINATION_BANK_ACCOUNT_ID,\r\n        DESTINATION_CARD_ID,\r\n        BALANCE_TRANSACTION_ID,\r\n        FAILURE_BALANCE_TRANSACTION_ID,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.Payout\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as PAYOUT_ID,\r\n        null as Source_ID,\r\n        null as CONNECTED_ACCOUNT_ID,\r\n        null as AMOUNT,\r\n        null as ARRIVAL_DATE,\r\n        null as AUTOMATIC,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as DESCRIPTION,\r\n        null as FAILURE_CODE,\r\n        null as FAILURE_MESSAGE,\r\n        null as LIVEMODE,\r\n        null as METHOD,\r\n        null as SOURCE_TYPE,\r\n        null as STATEMENT_DESCRIPTOR,\r\n        null as STATUS,\r\n        null as TYPE,\r\n        null as DESTINATION_BANK_ACCOUNT_ID,\r\n        null as DESTINATION_CARD_ID,\r\n        null as BALANCE_TRANSACTION_ID,\r\n        null as FAILURE_BALANCE_TRANSACTION_ID,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Payout"], "unique_id": "model.sales_dataflo.Stg_Payout", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Payout.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Payout.sql", "name": "Stg_Payout", "resource_type": "model", "alias": "Stg_Payout", "checksum": {"name": "sha256", "checksum": "8a43963c6b06ac39a41d29704e3e899c2f0b9fbfe938090212c5a8badf5e5575"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PAYOUT WHERE PAYOUT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PAYOUT_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Payout.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PAYOUT_ID,\n        ID as Source_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        ARRIVAL_DATE,\n        AUTOMATIC,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        FAILURE_CODE,\n        FAILURE_MESSAGE,\n        LIVEMODE,\n        METHOD,\n        SOURCE_TYPE,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TYPE,\n        DESTINATION_BANK_ACCOUNT_ID,\n        DESTINATION_CARD_ID,\n        BALANCE_TRANSACTION_ID,\n        FAILURE_BALANCE_TRANSACTION_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.Payout\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PAYOUT_ID,\n        ID as Source_ID,\n        CONNECTED_ACCOUNT_ID,\n        AMOUNT,\n        ARRIVAL_DATE,\n        AUTOMATIC,\n        CREATED,\n        CURRENCY,\n        DESCRIPTION,\n        FAILURE_CODE,\n        FAILURE_MESSAGE,\n        LIVEMODE,\n        METHOD,\n        SOURCE_TYPE,\n        STATEMENT_DESCRIPTOR,\n        STATUS,\n        TYPE,\n        DESTINATION_BANK_ACCOUNT_ID,\n        DESTINATION_CARD_ID,\n        BALANCE_TRANSACTION_ID,\n        FAILURE_BALANCE_TRANSACTION_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PAYOUT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.Payout\n         \n    \n"}, "error": null, "status": "SUCCESS 106", "execution_time": 5.604175806045532, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:30.567871Z", "completed_at": "2021-05-19T00:57:32.015011Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:32.015316Z", "completed_at": "2021-05-19T00:57:35.735402Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PLAN_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PLAN WHERE PLAN_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS PLAN_ID,\r\n        ID as SOURCE_ID,\r\n        ACTIVE,\r\n        AGGREGATE_USAGE,\r\n        AMOUNT,\r\n        BILLING_SCHEME,\r\n        CREATED,\r\n        CURRENCY,\r\n        INTERVAL,\r\n        INTERVAL_COUNT,\r\n        LIVEMODE,\r\n        NICKNAME,\r\n        TIERS_MODE,\r\n        TRANSFORM_USAGE_DIVIDE_BY,\r\n        TRANSFORM_USAGE_ROUND,\r\n        TRIAL_PERIOD_DAYS,\r\n        USAGE_TYPE,\r\n        IS_DELETED,\r\n        METADATA,\r\n        PRODUCT_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PLAN_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PLAN\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as PLAN_ID,\r\n        null as SOURCE_ID,\r\n        null as ACTIVE,\r\n        null as AGGREGATE_USAGE,\r\n        null as AMOUNT,\r\n        null as BILLING_SCHEME,\r\n        null as CREATED,\r\n        null as CURRENCY,\r\n        null as INTERVAL,\r\n        null as INTERVAL_COUNT,\r\n        null as LIVEMODE,\r\n        null as NICKNAME,\r\n        null as TIERS_MODE,\r\n        null as TRANSFORM_USAGE_DIVIDE_BY,\r\n        null as TRANSFORM_USAGE_ROUND,\r\n        null as TRIAL_PERIOD_DAYS,\r\n        null as USAGE_TYPE,\r\n        null as IS_DELETED,\r\n        null as METADATA,\r\n        null as PRODUCT_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Plan"], "unique_id": "model.sales_dataflo.Stg_Plan", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Plan.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Plan.sql", "name": "Stg_Plan", "resource_type": "model", "alias": "Stg_Plan", "checksum": {"name": "sha256", "checksum": "fd315e7725d1d76af11b6569e325d09d933c6c1c949e693fee2d7ec801ee3302"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PLAN WHERE PLAN_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PLAN_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Plan.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PLAN_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        AGGREGATE_USAGE,\n        AMOUNT,\n        BILLING_SCHEME,\n        CREATED,\n        CURRENCY,\n        INTERVAL,\n        INTERVAL_COUNT,\n        LIVEMODE,\n        NICKNAME,\n        TIERS_MODE,\n        TRANSFORM_USAGE_DIVIDE_BY,\n        TRANSFORM_USAGE_ROUND,\n        TRIAL_PERIOD_DAYS,\n        USAGE_TYPE,\n        IS_DELETED,\n        METADATA,\n        PRODUCT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PLAN_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PLAN\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PLAN_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        AGGREGATE_USAGE,\n        AMOUNT,\n        BILLING_SCHEME,\n        CREATED,\n        CURRENCY,\n        INTERVAL,\n        INTERVAL_COUNT,\n        LIVEMODE,\n        NICKNAME,\n        TIERS_MODE,\n        TRANSFORM_USAGE_DIVIDE_BY,\n        TRANSFORM_USAGE_ROUND,\n        TRIAL_PERIOD_DAYS,\n        USAGE_TYPE,\n        IS_DELETED,\n        METADATA,\n        PRODUCT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PLAN_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PLAN\n         \n    \n"}, "error": null, "status": "SUCCESS 11", "execution_time": 5.571485757827759, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:36.174606Z", "completed_at": "2021-05-19T00:57:37.420184Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:37.420453Z", "completed_at": "2021-05-19T00:57:41.314532Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PRICE_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PRICE WHERE PRICE_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS PRICE_ID,\r\n        ID as SOURCE_ID,\r\n        ACTIVE,\r\n        CURRENCY,\r\n        NICKNAME,\r\n        RECURRING_AGGREGATE_USAGE,\r\n        RECURRING_INTERVAL,\r\n        RECURRING_INTERVAL_COUNT,\r\n        RECURRING_USAGE_TYPE,\r\n        TYPE,\r\n        UNIT_AMOUNT,\r\n        BILLING_SCHEME,\r\n        CREATED,\r\n        LIVEMODE,\r\n        LOOKUP_KEY,\r\n        TIERS_MODE,\r\n        TRANSFORM_QUANTITY_DIVIDE_BY,\r\n        TRANSFORM_QUANTITY_ROUND,\r\n        UNIT_AMOUNT_DECIMAL,\r\n        IS_DELETED,\r\n        PRODUCT_ID,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PRICE_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PRICE\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as PRICE_ID,\r\n        null as SOURCE_ID,\r\n        null as ACTIVE,\r\n        null as CURRENCY,\r\n        null as NICKNAME,\r\n        null as RECURRING_AGGREGATE_USAGE,\r\n        null as RECURRING_INTERVAL,\r\n        null as RECURRING_INTERVAL_COUNT,\r\n        null as RECURRING_USAGE_TYPE,\r\n        null as TYPE,\r\n        null as UNIT_AMOUNT,\r\n        null as BILLING_SCHEME,\r\n        null as CREATED,\r\n        null as LIVEMODE,\r\n        null as LOOKUP_KEY,\r\n        null as TIERS_MODE,\r\n        null as TRANSFORM_QUANTITY_DIVIDE_BY,\r\n        null as TRANSFORM_QUANTITY_ROUND,\r\n        null as UNIT_AMOUNT_DECIMAL,\r\n        null as IS_DELETED,\r\n        null as PRODUCT_ID,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Price"], "unique_id": "model.sales_dataflo.Stg_Price", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Price.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Price.sql", "name": "Stg_Price", "resource_type": "model", "alias": "Stg_Price", "checksum": {"name": "sha256", "checksum": "be0ec35682ad7301777f06eb37912185db24c7c7cf9462c32b0e3dc618b899a0"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PRICE WHERE PRICE_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PRICE_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Price.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PRICE_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        CURRENCY,\n        NICKNAME,\n        RECURRING_AGGREGATE_USAGE,\n        RECURRING_INTERVAL,\n        RECURRING_INTERVAL_COUNT,\n        RECURRING_USAGE_TYPE,\n        TYPE,\n        UNIT_AMOUNT,\n        BILLING_SCHEME,\n        CREATED,\n        LIVEMODE,\n        LOOKUP_KEY,\n        TIERS_MODE,\n        TRANSFORM_QUANTITY_DIVIDE_BY,\n        TRANSFORM_QUANTITY_ROUND,\n        UNIT_AMOUNT_DECIMAL,\n        IS_DELETED,\n        PRODUCT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PRICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PRICE\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PRICE_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        CURRENCY,\n        NICKNAME,\n        RECURRING_AGGREGATE_USAGE,\n        RECURRING_INTERVAL,\n        RECURRING_INTERVAL_COUNT,\n        RECURRING_USAGE_TYPE,\n        TYPE,\n        UNIT_AMOUNT,\n        BILLING_SCHEME,\n        CREATED,\n        LIVEMODE,\n        LOOKUP_KEY,\n        TIERS_MODE,\n        TRANSFORM_QUANTITY_DIVIDE_BY,\n        TRANSFORM_QUANTITY_ROUND,\n        UNIT_AMOUNT_DECIMAL,\n        IS_DELETED,\n        PRODUCT_ID,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PRICE_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PRICE\n         \n    \n"}, "error": null, "status": "SUCCESS 11", "execution_time": 5.564259767532349, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:41.748660Z", "completed_at": "2021-05-19T00:57:43.191855Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:43.192133Z", "completed_at": "2021-05-19T00:57:46.881552Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'PRODUCT_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_PRODUCT WHERE PRODUCT_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS PRODUCT_ID,\r\n        ID as SOURCE_ID,\r\n        ACTIVE,\r\n        CAPTION,\r\n        CREATED,\r\n        DESCRIPTION,\r\n        LIVEMODE,\r\n        NAME,\r\n        PACKAGE_DIMENSIONS_HEIGHT,\r\n        PACKAGE_DIMENSIONS_LENGTH,\r\n        PACKAGE_DIMENSIONS_WEIGHT,\r\n        PACKAGE_DIMENSIONS_WIDTH,\r\n        SHIPPABLE,\r\n        STATEMENT_DESCRIPTOR,\r\n        TYPE,\r\n        UNIT_LABEL,\r\n        UPDATED,\r\n        URL,\r\n        IS_DELETED,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_PRODUCT_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.PRODUCT\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as PRODUCT_ID,\r\n        null as SOURCE_ID,\r\n        null as ACTIVE,\r\n        null as CAPTION,\r\n        null as CREATED,\r\n        null as DESCRIPTION,\r\n        null as LIVEMODE,\r\n        null as NAME,\r\n        null as PACKAGE_DIMENSIONS_HEIGHT,\r\n        null as PACKAGE_DIMENSIONS_LENGTH,\r\n        null as PACKAGE_DIMENSIONS_WEIGHT,\r\n        null as PACKAGE_DIMENSIONS_WIDTH,\r\n        null as SHIPPABLE,\r\n        null as STATEMENT_DESCRIPTOR,\r\n        null as TYPE,\r\n        null as UNIT_LABEL,\r\n        null as UPDATED,\r\n        null as URL,\r\n        null as IS_DELETED,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Product"], "unique_id": "model.sales_dataflo.Stg_Product", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Product.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Product.sql", "name": "Stg_Product", "resource_type": "model", "alias": "Stg_Product", "checksum": {"name": "sha256", "checksum": "346194f979856f81deaf5fd58412cec8030d704ec3335887918f2146790111bb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_PRODUCT WHERE PRODUCT_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "PRODUCT_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Product.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PRODUCT_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        CAPTION,\n        CREATED,\n        DESCRIPTION,\n        LIVEMODE,\n        NAME,\n        PACKAGE_DIMENSIONS_HEIGHT,\n        PACKAGE_DIMENSIONS_LENGTH,\n        PACKAGE_DIMENSIONS_WEIGHT,\n        PACKAGE_DIMENSIONS_WIDTH,\n        SHIPPABLE,\n        STATEMENT_DESCRIPTOR,\n        TYPE,\n        UNIT_LABEL,\n        UPDATED,\n        URL,\n        IS_DELETED,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PRODUCT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PRODUCT\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS PRODUCT_ID,\n        ID as SOURCE_ID,\n        ACTIVE,\n        CAPTION,\n        CREATED,\n        DESCRIPTION,\n        LIVEMODE,\n        NAME,\n        PACKAGE_DIMENSIONS_HEIGHT,\n        PACKAGE_DIMENSIONS_LENGTH,\n        PACKAGE_DIMENSIONS_WEIGHT,\n        PACKAGE_DIMENSIONS_WIDTH,\n        SHIPPABLE,\n        STATEMENT_DESCRIPTOR,\n        TYPE,\n        UNIT_LABEL,\n        UPDATED,\n        URL,\n        IS_DELETED,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_PRODUCT_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.PRODUCT\n         \n    \n"}, "error": null, "status": "SUCCESS 11", "execution_time": 5.702847719192505, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:47.315595Z", "completed_at": "2021-05-19T00:57:48.747894Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:48.748181Z", "completed_at": "2021-05-19T00:57:52.587101Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'SUBSCRIPTION_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_SUBSCRIPTION WHERE SUBSCRIPTION_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS SUBSCRIPTION_ID,\r\n        ID as SOURCE_ID,\r\n        APPLICATION_FEE_PERCENT,\r\n        BILLING,\r\n        BILLING_CYCLE_ANCHOR,\r\n        BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR,\r\n        BILLING_THRESHOLD_AMOUNT_GTE,\r\n        CANCEL_AT,\r\n        CANCEL_AT_PERIOD_END,\r\n        CANCELED_AT,\r\n        CREATED,\r\n        CURRENT_PERIOD_END,\r\n        CURRENT_PERIOD_START,\r\n        DAYS_UNTIL_DUE,\r\n        ENDED_AT,\r\n        LIVEMODE,\r\n        QUANTITY,\r\n        START_DATE,\r\n        STATUS,\r\n        TAX_PERCENT,\r\n        TRIAL_START,\r\n        TRIAL_END,\r\n        CUSTOMER_ID,\r\n        DEFAULT_SOURCE_ID,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_SUBSCRIPTION_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.SUBSCRIPTION\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as SUBSCRIPTION_ID,\r\n        null as SOURCE_ID,\r\n        null as APPLICATION_FEE_PERCENT,\r\n        null as BILLING,\r\n        null as BILLING_CYCLE_ANCHOR,\r\n        null as BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR,\r\n        null as BILLING_THRESHOLD_AMOUNT_GTE,\r\n        null as CANCEL_AT,\r\n        null as CANCEL_AT_PERIOD_END,\r\n        null as CANCELED_AT,\r\n        null as CREATED,\r\n        null as CURRENT_PERIOD_END,\r\n        null as CURRENT_PERIOD_START,\r\n        null as DAYS_UNTIL_DUE,\r\n        null as ENDED_AT,\r\n        null as LIVEMODE,\r\n        null as QUANTITY,\r\n        null as START_DATE,\r\n        null as STATUS,\r\n        null as TAX_PERCENT,\r\n        null as TRIAL_START,\r\n        null as TRIAL_END,\r\n        null as CUSTOMER_ID,\r\n        null as DEFAULT_SOURCE_ID,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Subscription"], "unique_id": "model.sales_dataflo.Stg_Subscription", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Subscription.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Subscription.sql", "name": "Stg_Subscription", "resource_type": "model", "alias": "Stg_Subscription", "checksum": {"name": "sha256", "checksum": "00791aa194d3073e666c9c8b4a2db34b8f5affb2672fb4bee6d554f3e61af624"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_SUBSCRIPTION WHERE SUBSCRIPTION_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "SUBSCRIPTION_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Subscription.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS SUBSCRIPTION_ID,\n        ID as SOURCE_ID,\n        APPLICATION_FEE_PERCENT,\n        BILLING,\n        BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLD_AMOUNT_GTE,\n        CANCEL_AT,\n        CANCEL_AT_PERIOD_END,\n        CANCELED_AT,\n        CREATED,\n        CURRENT_PERIOD_END,\n        CURRENT_PERIOD_START,\n        DAYS_UNTIL_DUE,\n        ENDED_AT,\n        LIVEMODE,\n        QUANTITY,\n        START_DATE,\n        STATUS,\n        TAX_PERCENT,\n        TRIAL_START,\n        TRIAL_END,\n        CUSTOMER_ID,\n        DEFAULT_SOURCE_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_SUBSCRIPTION_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.SUBSCRIPTION\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS SUBSCRIPTION_ID,\n        ID as SOURCE_ID,\n        APPLICATION_FEE_PERCENT,\n        BILLING,\n        BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLD_RESET_BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLD_AMOUNT_GTE,\n        CANCEL_AT,\n        CANCEL_AT_PERIOD_END,\n        CANCELED_AT,\n        CREATED,\n        CURRENT_PERIOD_END,\n        CURRENT_PERIOD_START,\n        DAYS_UNTIL_DUE,\n        ENDED_AT,\n        LIVEMODE,\n        QUANTITY,\n        START_DATE,\n        STATUS,\n        TAX_PERCENT,\n        TRIAL_START,\n        TRIAL_END,\n        CUSTOMER_ID,\n        DEFAULT_SOURCE_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_SUBSCRIPTION_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.SUBSCRIPTION\n         \n    \n"}, "error": null, "status": "SUCCESS 1", "execution_time": 4.041422367095947, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:53.021063Z", "completed_at": "2021-05-19T00:57:54.509069Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:54.509366Z", "completed_at": "2021-05-19T00:57:56.485313Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE = 'STR' and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'SUBSCRIPTION_ITEM_ID',\r\n        post_hook=\"DELETE FROM \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".STG_SUBSCRIPTION_ITEM WHERE SUBSCRIPTION_ITEM_ID IS NULL\"\r\n      )\r\n}}\r\n\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'STR'  %}   \r\n      \r\n  select\r\n        {{ dbt_utils.surrogate_key('ID') }}  AS SUBSCRIPTION_ITEM_ID,\r\n        ID as SOURCE_ID,\r\n        SUBSCRIPTION_ID,\r\n        BILLING_THRESHOLDS_RESET_BILLING_CYCLE_ANCHOR,\r\n        BILLING_THRESHOLDS_AMOUNT_GTE,\r\n        CREATED,\r\n        QUANTITY,\r\n        PLAN_ID,\r\n        METADATA,\r\n        _FIVETRAN_SYNCED,\r\n        '{{ schema_nm }}' as Entity_type,\r\n        'D_SUBSCRIPTION_ITEM_STG_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ schema_nm }}.SUBSCRIPTION_ITEM\r\n         {% if not loop.last %}\r\n            UNION ALL\r\n        {% endif %}\r\n    {% elif  V_SF_Schema[0:1] == 'X'  %}     \r\n       select\r\n        null as SUBSCRIPTION_ITEM_ID,\r\n        null as SOURCE_ID,\r\n        null as SUBSCRIPTION_ID,\r\n        null as BILLING_THRESHOLDS_RESET_BILLING_CYCLE_ANCHOR,\r\n        null as BILLING_THRESHOLDS_AMOUNT_GTE,\r\n        null as CREATED,\r\n        null as QUANTITY,\r\n        null as PLAN_ID,\r\n        null as METADATA,\r\n        null as _FIVETRAN_SYNCED,\r\n        null as Entity_type,\r\n        null AS DW_SESSION_NM,\r\n        null AS DW_INS_UPD_DTS\r\n    FROM dual    \r\n    {% endif %}\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Stripe", "Stg_Subscription_Item"], "unique_id": "model.sales_dataflo.Stg_Subscription_Item", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Stripe/Stg_Subscription_Item.sql", "original_file_path": "ETL/Stage/Stripe/Stg_Subscription_Item.sql", "name": "Stg_Subscription_Item", "resource_type": "model", "alias": "Stg_Subscription_Item", "checksum": {"name": "sha256", "checksum": "a972d348c5c0c499331c9be8af205d1137061c96dd0d129551c01a32bce6c5ac"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "DELETE FROM DATAFLOTEST_DATABASE.DBT_SALESDATAFLO.STG_SUBSCRIPTION_ITEM WHERE SUBSCRIPTION_ITEM_ID IS NULL", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "SUBSCRIPTION_ITEM_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Stripe/Stg_Subscription_Item.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS SUBSCRIPTION_ITEM_ID,\n        ID as SOURCE_ID,\n        SUBSCRIPTION_ID,\n        BILLING_THRESHOLDS_RESET_BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLDS_AMOUNT_GTE,\n        CREATED,\n        QUANTITY,\n        PLAN_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_SUBSCRIPTION_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.SUBSCRIPTION_ITEM\n         \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n\n \n\n\n\n    \n      \n  select\n        md5(cast(\n    \n    coalesce(cast(ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS SUBSCRIPTION_ITEM_ID,\n        ID as SOURCE_ID,\n        SUBSCRIPTION_ID,\n        BILLING_THRESHOLDS_RESET_BILLING_CYCLE_ANCHOR,\n        BILLING_THRESHOLDS_AMOUNT_GTE,\n        CREATED,\n        QUANTITY,\n        PLAN_ID,\n        METADATA,\n        _FIVETRAN_SYNCED,\n        'STRIPE_RKLIVE_01042021' as Entity_type,\n        'D_SUBSCRIPTION_ITEM_STG_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM STRIPE_RKLIVE_01042021.SUBSCRIPTION_ITEM\n         \n    \n"}, "error": null, "status": "SUCCESS 63", "execution_time": 5.337846517562866, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:57:57.065305Z", "completed_at": "2021-05-19T00:57:58.303451Z"}, {"name": "execute", "started_at": "2021-05-19T00:57:58.303770Z", "completed_at": "2021-05-19T00:58:01.973228Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n        \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('1' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '1' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('10' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '10' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('3' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '3' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('4' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '4' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('23' as number) as METRIC_ID,\r\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '23' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('27' as number) as METRIC_ID,\r\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '27' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('29' as number) as METRIC_ID,\r\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '29' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    limit 500\r\n/* limit added automatically by dbt cloud */", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "test2"], "unique_id": "model.sales_dataflo.test2", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "test2.sql", "original_file_path": "ETL/test2.sql", "name": "test2", "resource_type": "model", "alias": "test2", "checksum": {"name": "sha256", "checksum": "b1d195bd2796dae7db79509c05a88b790f8ba2c8e9c72cbc83b6e3043749a2d4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/test2.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n        \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('1' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '1' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('10' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '10' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('3' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '3' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('4' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '4' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('23' as number) as METRIC_ID,\r\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '23' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('27' as number) as METRIC_ID,\r\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '27' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('29' as number) as METRIC_ID,\r\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '29' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    limit 500\r\n/* limit added automatically by dbt cloud */", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\r\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n        \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('1' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '1' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('10' as number) as METRIC_ID,\r\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '10' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('3' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '3' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('4' as number) as METRIC_ID,\r\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '4' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('23' as number) as METRIC_ID,\r\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( Amount  ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '23' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('27' as number) as METRIC_ID,\r\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '27' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    union all\r\n                    \r\n                    (\r\n                        with date_range as \r\n(\r\n    \r\n\r\n/*\r\ncall as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dateadd(week, 1, current_date)\"\r\n)\r\n\r\n*/\r\n\r\nwith rawdata as (\r\n\r\n    \r\n\r\n    \r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    \r\n    p0.generated_number * pow(2, 0)\r\n     + \r\n    \r\n    p1.generated_number * pow(2, 1)\r\n     + \r\n    \r\n    p2.generated_number * pow(2, 2)\r\n     + \r\n    \r\n    p3.generated_number * pow(2, 3)\r\n     + \r\n    \r\n    p4.generated_number * pow(2, 4)\r\n     + \r\n    \r\n    p5.generated_number * pow(2, 5)\r\n     + \r\n    \r\n    p6.generated_number * pow(2, 6)\r\n     + \r\n    \r\n    p7.generated_number * pow(2, 7)\r\n     + \r\n    \r\n    p8.generated_number * pow(2, 8)\r\n     + \r\n    \r\n    p9.generated_number * pow(2, 9)\r\n     + \r\n    \r\n    p10.generated_number * pow(2, 10)\r\n    \r\n    \r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    \r\n    p as p0\r\n     cross join \r\n    \r\n    p as p1\r\n     cross join \r\n    \r\n    p as p2\r\n     cross join \r\n    \r\n    p as p3\r\n     cross join \r\n    \r\n    p as p4\r\n     cross join \r\n    \r\n    p as p5\r\n     cross join \r\n    \r\n    p as p6\r\n     cross join \r\n    \r\n    p as p7\r\n     cross join \r\n    \r\n    p as p8\r\n     cross join \r\n    \r\n    p as p9\r\n     cross join \r\n    \r\n    p as p10\r\n    \r\n    \r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= 1125\r\n    order by generated_number\r\n\r\n\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        \r\n  \r\n\r\n    dateadd(\r\n        day,\r\n        row_number() over (order by 1) - 1,\r\n        to_date('01/01/2017','dd/mm/yyyy')\r\n        )\r\n\r\n\r\n\r\n    ) as date_day\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n\r\n),\r\n timeframe as (\r\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  order by TimeFrameID\r\n  ), \r\nEmp AS\r\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \r\n join timeframe on source_type = timeframe.source_type\r\n),\r\nMetrics AS\r\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \r\n),\r\n\r\n Source AS\r\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\r\n \r\n,Metrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID AS Report_Dt,\r\n        Emp_Entity_id  AS entity_code,\r\n        Emp_id AS employee_code,\r\n        cast('29' as number) as METRIC_ID,\r\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\r\n        sum( 0   ) as AMOUNT,\r\n        count(SOURCE_ID)  as Count\r\n     from Emp \r\n          join timeframe \r\n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\r\n          left join Source \r\n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\r\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \r\n          join date_range\r\n          on TimeFrameID = date_range.date_day\r\n          join Metrics\r\n          on '29' = metrics.METRIC_ID\r\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\r\n        group by\r\n        Report_Dt,\r\n        entity_code,\r\n        employee_code,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        POINT_IN_TIME\r\n                )\r\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\r\n        \r\n    current_timestamp::\r\n    timestamp_ntz\r\n\r\n AS DW_INS_UPD_DTS from Metrics_Calc\r\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\r\n                    )\r\n\r\n                    limit 500\r\n/* limit added automatically by dbt cloud */"}, "error": null, "status": "SUCCESS 1", "execution_time": 5.125584602355957, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:02.405680Z", "completed_at": "2021-05-19T00:58:02.452009Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:02.452288Z", "completed_at": "2021-05-19T00:58:07.103250Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'contact_id'\r\n      )\r\n}}\r\n\r\nWITH contacts AS (\r\n       select * from {{ ref('Stg_Contact') }} \r\n    ),\r\nDim_Contact as(\r\n      SELECT \r\n        contact_id, \r\n        contacts.salutation AS salutation, \r\n        contacts.NAME AS contact_name, \r\n        contacts.last_name AS last_name, \r\n        contacts.first_name AS first_name, \r\n        contacts.phone AS contact_number, \r\n        contacts.mobile_phone AS mobile_phone, \r\n        contacts.home_phone AS home_phone, \r\n        contacts.email AS contact_email, \r\n        source_id, \r\n        contacts.department AS department, \r\n        contacts.lead_source AS lead_source, \r\n        null AS organization_id, \r\n        contacts.owner_ID AS employee_id, \r\n        contacts.account_id AS account_id, \r\n        NULL AS contact_age_group, \r\n        NULL AS contact_income, \r\n        NULL AS dependent, \r\n        NULL AS contact_type, \r\n        contacts.IS_DELETED AS active,\r\n        CREATED_DATE as INITIAL_CREATE_DT,\r\n        Source_type AS Source_type,\r\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM \r\n       contacts\r\n    )    \r\n    \r\nselect * from Dim_Contact", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Contact"], "unique_id": "model.sales_dataflo.Dim_Contact", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Contact.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Contact.sql", "name": "Dim_Contact", "resource_type": "model", "alias": "Dim_Contact", "checksum": {"name": "sha256", "checksum": "341432165bb39279b7efc0ed816593192585e3f2d1b29790dcc2254e2b845d5c"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "contact_id"}, "tags": [], "refs": [["Stg_Contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Contact.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH contacts AS (\n       select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact \n    ),\nDim_Contact as(\n      SELECT \n        contact_id, \n        contacts.salutation AS salutation, \n        contacts.NAME AS contact_name, \n        contacts.last_name AS last_name, \n        contacts.first_name AS first_name, \n        contacts.phone AS contact_number, \n        contacts.mobile_phone AS mobile_phone, \n        contacts.home_phone AS home_phone, \n        contacts.email AS contact_email, \n        source_id, \n        contacts.department AS department, \n        contacts.lead_source AS lead_source, \n        null AS organization_id, \n        contacts.owner_ID AS employee_id, \n        contacts.account_id AS account_id, \n        NULL AS contact_age_group, \n        NULL AS contact_income, \n        NULL AS dependent, \n        NULL AS contact_type, \n        contacts.IS_DELETED AS active,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        Source_type AS Source_type,\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM \n       contacts\n    )    \n    \nselect * from Dim_Contact", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH contacts AS (\n       select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact \n    ),\nDim_Contact as(\n      SELECT \n        contact_id, \n        contacts.salutation AS salutation, \n        contacts.NAME AS contact_name, \n        contacts.last_name AS last_name, \n        contacts.first_name AS first_name, \n        contacts.phone AS contact_number, \n        contacts.mobile_phone AS mobile_phone, \n        contacts.home_phone AS home_phone, \n        contacts.email AS contact_email, \n        source_id, \n        contacts.department AS department, \n        contacts.lead_source AS lead_source, \n        null AS organization_id, \n        contacts.owner_ID AS employee_id, \n        contacts.account_id AS account_id, \n        NULL AS contact_age_group, \n        NULL AS contact_income, \n        NULL AS dependent, \n        NULL AS contact_type, \n        contacts.IS_DELETED AS active,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        Source_type AS Source_type,\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM \n       contacts\n    )    \n    \nselect * from Dim_Contact"}, "error": null, "status": "SUCCESS 919360", "execution_time": 13.817376136779785, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:07.533823Z", "completed_at": "2021-05-19T00:58:07.564186Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:07.564422Z", "completed_at": "2021-05-19T00:58:20.925490Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nWITH source  AS (\r\n       select *  from {{ ref('Stg_Contact') }} \r\n    ),Dim_Address  AS(\r\n        SELECT \r\n            {{ dbt_utils.surrogate_key('Contact_ID') }}  AS  address_id,\r\n            account_id  AS account_id,\r\n            source_id,\r\n            MAILING_STREET AS STREET,\r\n            MAILING_CITY AS CITY,\r\n            MAILING_STATE AS STATE,\r\n            MAILING_POSTAL_CODE  AS POSTAL_CODE,\r\n            MAILING_COUNTRY AS COUNTRY,\r\n            'BILLING'  AS address_type,\r\n            Source_type AS Source_type,\r\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\r\n            {{ dbt_utils.current_timestamp() }}  AS DW_INS_UPD_DTS \r\n            from source\r\n        union \r\n        SELECT\r\n            {{ dbt_utils.surrogate_key('Contact_ID') }}  AS  address_id,\r\n            account_id  AS account_id,\r\n            source_id,\r\n            OTHER_STREET AS STREET,\r\n            OTHER_CITY AS CITY,\r\n            OTHER_STATE AS STATE,\r\n            OTHER_POSTAL_CODE  AS POSTAL_CODE,\r\n            OTHER_COUNTRY AS COUNTRY, \r\n            'SHIPPING'  AS address_type,\r\n            Source_type AS Source_type,\r\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\r\n            {{ dbt_utils.current_timestamp() }}  AS DW_INS_UPD_DTS \r\n             from source\r\n    )\r\n    \r\nselect * from Dim_Address", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Address"], "unique_id": "model.sales_dataflo.Dim_Address", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Address.Sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Address.Sql", "name": "Dim_Address", "resource_type": "model", "alias": "Dim_Address", "checksum": {"name": "sha256", "checksum": "272081c55d876b00bd395a4e61437a7654eee468cda1ebd635c675704521955c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Address.Sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source  AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact \n    ),Dim_Address  AS(\n        SELECT \n            md5(cast(\n    \n    coalesce(cast(Contact_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS  address_id,\n            account_id  AS account_id,\n            source_id,\n            MAILING_STREET AS STREET,\n            MAILING_CITY AS CITY,\n            MAILING_STATE AS STATE,\n            MAILING_POSTAL_CODE  AS POSTAL_CODE,\n            MAILING_COUNTRY AS COUNTRY,\n            'BILLING'  AS address_type,\n            Source_type AS Source_type,\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n  AS DW_INS_UPD_DTS \n            from source\n        union \n        SELECT\n            md5(cast(\n    \n    coalesce(cast(Contact_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS  address_id,\n            account_id  AS account_id,\n            source_id,\n            OTHER_STREET AS STREET,\n            OTHER_CITY AS CITY,\n            OTHER_STATE AS STATE,\n            OTHER_POSTAL_CODE  AS POSTAL_CODE,\n            OTHER_COUNTRY AS COUNTRY, \n            'SHIPPING'  AS address_type,\n            Source_type AS Source_type,\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n  AS DW_INS_UPD_DTS \n             from source\n    )\n    \nselect * from Dim_Address", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source  AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact \n    ),Dim_Address  AS(\n        SELECT \n            md5(cast(\n    \n    coalesce(cast(Contact_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS  address_id,\n            account_id  AS account_id,\n            source_id,\n            MAILING_STREET AS STREET,\n            MAILING_CITY AS CITY,\n            MAILING_STATE AS STATE,\n            MAILING_POSTAL_CODE  AS POSTAL_CODE,\n            MAILING_COUNTRY AS COUNTRY,\n            'BILLING'  AS address_type,\n            Source_type AS Source_type,\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n  AS DW_INS_UPD_DTS \n            from source\n        union \n        SELECT\n            md5(cast(\n    \n    coalesce(cast(Contact_ID as \n    varchar\n), '')\n\n as \n    varchar\n))  AS  address_id,\n            account_id  AS account_id,\n            source_id,\n            OTHER_STREET AS STREET,\n            OTHER_CITY AS CITY,\n            OTHER_STATE AS STATE,\n            OTHER_POSTAL_CODE  AS POSTAL_CODE,\n            OTHER_COUNTRY AS COUNTRY, \n            'SHIPPING'  AS address_type,\n            Source_type AS Source_type,\n            'D_ADDRESS_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n  AS DW_INS_UPD_DTS \n             from source\n    )\n    \nselect * from Dim_Address"}, "error": null, "status": "SUCCESS 1", "execution_time": 7.5403077602386475, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:21.353700Z", "completed_at": "2021-05-19T00:58:21.389726Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:21.389991Z", "completed_at": "2021-05-19T00:58:28.470248Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Stage_id'\r\n      )\r\n}}\r\n\r\nWITH source AS (\r\n       select *  from {{ ref('Stg_Opportunity_Stage') }}  \r\n    ),Dim_Opportunity_stage as(\r\n        SELECT\r\n        stage_id,\r\n        MASTER_LABEL AS stage_name,\r\n        SORT_ORDER AS stage_position,\r\n        NULL AS account_id,\r\n        IS_ACTIVE AS active_flag,\r\n        Source_id,\r\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\r\n        NULL AS lead_opp_flag,\r\n        IS_CLOSED AS IS_CLOSED,\r\n        IS_WON AS IS_WON,\r\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\r\n        Source_type AS Source_type ,\r\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM\r\n       source\r\n    )    \r\n\r\nselect * from Dim_Opportunity_stage", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Opportunity_Stage"], "unique_id": "model.sales_dataflo.Dim_Opportunity_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Opportunity_Stage.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Opportunity_Stage.sql", "name": "Dim_Opportunity_Stage", "resource_type": "model", "alias": "Dim_Opportunity_Stage", "checksum": {"name": "sha256", "checksum": "9c65b3385dd8c4b2114b646a3582137c1550240918754858611e69dcd253c67b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Stage_id"}, "tags": [], "refs": [["Stg_Opportunity_Stage"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Opportunity_Stage"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Opportunity_Stage.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_Stage  \n    ),Dim_Opportunity_stage as(\n        SELECT\n        stage_id,\n        MASTER_LABEL AS stage_name,\n        SORT_ORDER AS stage_position,\n        NULL AS account_id,\n        IS_ACTIVE AS active_flag,\n        Source_id,\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        NULL AS lead_opp_flag,\n        IS_CLOSED AS IS_CLOSED,\n        IS_WON AS IS_WON,\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\n        Source_type AS Source_type ,\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n       source\n    )    \n\nselect * from Dim_Opportunity_stage", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_Stage  \n    ),Dim_Opportunity_stage as(\n        SELECT\n        stage_id,\n        MASTER_LABEL AS stage_name,\n        SORT_ORDER AS stage_position,\n        NULL AS account_id,\n        IS_ACTIVE AS active_flag,\n        Source_id,\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        NULL AS lead_opp_flag,\n        IS_CLOSED AS IS_CLOSED,\n        IS_WON AS IS_WON,\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\n        Source_type AS Source_type ,\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n       source\n    )    \n\nselect * from Dim_Opportunity_stage"}, "error": null, "status": "SUCCESS 40", "execution_time": 5.090118646621704, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:28.896558Z", "completed_at": "2021-05-19T00:58:28.924395Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:28.924630Z", "completed_at": "2021-05-19T00:58:33.557727Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n)\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'opportunity_id'\r\n      )\r\n}}\r\n(\r\nWITH OPPORTUNITY AS (\r\n       select *  from {{ ref('Stg_Opportunity') }}  \r\n    ),contact AS(\r\n        select *  from {{ ref('Stg_Contact') }}    \r\n    ),\r\n    emp AS(\r\n        select *  from {{ ref('Stg_User') }}    \r\n    ),\r\n    OPPORTUNITY_STAGE AS(\r\n        select *  from {{ ref('Stg_Opportunity_Stage') }}   \r\n    )\r\n    ,Dim_Opportunity as(\r\n    SELECT\r\n        cast ( opportunity_id as varchar(100)) AS opportunity_id,\r\n        OPPORTUNITY.NAME AS opportunity_NAME,\r\n        OPPORTUNITY.TYPE AS opportunity_Type, \r\n        cast ( OPPORTUNITY.ACCOUNT_ID as varchar(50)) AS ACCOUNT_ID,        \r\n        cast ( OPPORTUNITY.OWNER_ID  as varchar(50)) AS employee_id,\r\n        cast ( OPPORTUNITY.Source_id as varchar(50)) AS Source_id,\r\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\r\n        OPPORTUNITY.IS_WON AS IS_WON,\r\n        OPPORTUNITY.IS_CLOSED AS IS_CLOSED,\r\n        OPPORTUNITY.stage_name AS stage_name,\r\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \r\n        OPPORTUNITY.FORECAST_CATEGORY AS FORECAST_CATEGORY,\r\n        OPPORTUNITY.AMOUNT AS AMOUNT,\r\n        OPPORTUNITY.CURRENCY_ISO_CODE as Transactional_Currency,\r\n        1 as Exch_Rate,\r\n        Reporting_Currency as Reporting_Currency,\r\n        NULL AS amount_without_disc,\r\n        NULL AS expectd_Clouser_Dt,\r\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\r\n        contact.NAME AS contact_name,\r\n        contact.PHONE AS contact_number,\r\n        contact.EMAIL AS contact_email,\r\n        contact.MAILING_STREET AS contact_address,\r\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\r\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\r\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\r\n        NULL AS prospect_Dt,\r\n        NULL AS stage_calc_id,\r\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\r\n        NULL AS stage_end_dt,        \r\n        NULL AS lead_lost_reason,\r\n        NULL AS competitor,\r\n        NULL AS on_hold_flag,\r\n        NULL AS sub_product_id,\r\n        NULL AS sub_product_name,\r\n        NULL AS prd_amount_without_disc,\r\n        NULL AS prd_discount,\r\n        OPPORTUNITY.IS_DELETED AS active_flag,\r\n        NULL AS DW_CURR_FLG,\r\n        NULL AS EFFCT_START_DATE,\r\n        NULL AS EFFCT_END_DATE,\r\n        OPPORTUNITY.Source_type AS Source_type,\r\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS\r\n      FROM\r\n        OPPORTUNITY \r\n        left join emp on OPPORTUNITY.OWNER_ID  =  emp.Source_ID and emp.Source_type = OPPORTUNITY.Source_type \r\n        left join contact on emp.contact_id  =  contact.Source_ID and contact.Source_type = OPPORTUNITY.Source_type\r\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL \r\n        and OPPORTUNITY_STAGE.Source_type = OPPORTUNITY.Source_type\r\n    ) \r\nselect * from Dim_Opportunity )   \r\n\r\nunion all\r\n(WITH OPPORTUNITY AS (\r\n       select *  from {{ ref('Stg_Deal') }}  \r\n    ),\r\n    emp AS(\r\n        select *  from {{ ref('Stg_Owner') }}    \r\n    ),\r\n    OPPORTUNITY_STG AS(\r\n        select *  from {{ ref('Stg_Deal_Stage') }}    \r\n    ),\r\n    OPPORTUNITY_PIPELINE_STAGE AS(\r\n        select *  from {{ ref('Stg_Deal_Pipeline_Stage') }}   \r\n    )\r\n    ,Dim_Opportunity as(\r\n    SELECT\r\n        cast (OPPORTUNITY.DEAL_ID as varchar(100)) as opportunity_id,\r\n        OPPORTUNITY.PROPERTY_DEALNAME AS opportunity_NAME,\r\n        NULL AS opportunity_Type, \r\n        NULL AS ACCOUNT_ID,        \r\n        cast (OPPORTUNITY.OWNER_ID as varchar(50)) AS employee_id,\r\n        cast (OPPORTUNITY.Source_DEAL_ID as varchar(50)) AS Source_id,\r\n        OPPORTUNITY_PIPELINE_STAGE.DISPLAY_ORDER AS stage_id,\r\n        case when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' then 'TRUE'\r\n        when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' then 'FALSE'\r\n        else NULL end as IS_WON,\r\n        OPPORTUNITY.PROPERTY_HS_IS_CLOSED AS IS_CLOSED,\r\n        OPPORTUNITY.DEAL_PIPELINE_STAGE_ID AS stage_name,\r\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \r\n        NULL AS FORECAST_CATEGORY,\r\n        OPPORTUNITY.PROPERTY_AMOUNT AS AMOUNT,\r\n        NULL as Transactional_Currency,\r\n        Null as Exch_Rate,\r\n        NULL as Reporting_Currency,\r\n        NULL AS amount_without_disc,\r\n        NULL AS expectd_Clouser_Dt,\r\n        NULL AS Contact_id,\r\n        NULL AS contact_name,\r\n        NULL AS contact_number,\r\n        NULL AS contact_email,\r\n        NULL AS contact_address,\r\n        OPPORTUNITY.PROPERTY_CREATEDATE AS initial_create_dt,\r\n        NULL AS last_updated_dt,\r\n        OPPORTUNITY.PROPERTY_CLOSEDATE AS CLOSE_DATE,\r\n        NULL AS prospect_Dt,\r\n        NULL AS stage_calc_id,\r\n        OPPORTUNITY.PROPERTY_HS_CREATEDATE AS stage_start_dt,\r\n        NULL AS stage_end_dt,        \r\n        NULL AS lead_lost_reason,\r\n        OPPORTUNITY_STG.Source  AS competitor,\r\n        NULL AS on_hold_flag,\r\n        NULL AS sub_product_id,\r\n        NULL AS sub_product_name,\r\n        NULL AS prd_amount_without_disc,\r\n        NULL AS prd_discount,\r\n        NULL AS active_flag,\r\n        NULL AS DW_CURR_FLG,\r\n        NULL AS EFFCT_START_DATE,\r\n        NULL AS EFFCT_END_DATE,\r\n        OPPORTUNITY.Source_type AS Source_type,\r\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS  \r\n      FROM\r\n        OPPORTUNITY \r\n        left join emp on OPPORTUNITY.Owner_id  =  emp.Source_OWNER_ID and emp.Source_type = OPPORTUNITY.Source_type\r\n        left join OPPORTUNITY_PIPELINE_STAGE on OPPORTUNITY.DEAL_PIPELINE_STAGE_ID = OPPORTUNITY_PIPELINE_STAGE.SOURCE_STAGE_ID \r\n        and OPPORTUNITY_PIPELINE_STAGE.Source_type = OPPORTUNITY.Source_type\r\n        left join OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = OPPORTUNITY.Source_DEAL_ID \r\n        and OPPORTUNITY_STG.Source_type = OPPORTUNITY.Source_type \r\n    )  \r\nselect * from Dim_Opportunity )", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Opportunity"], "unique_id": "model.sales_dataflo.Dim_Opportunity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Opportunity.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Opportunity.sql", "name": "Dim_Opportunity", "resource_type": "model", "alias": "Dim_Opportunity", "checksum": {"name": "sha256", "checksum": "dd80565d13ce98482252c9108ab08466bba9939db6961d01772b766af9509ad9"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "opportunity_id"}, "tags": [], "refs": [["Stg_Opportunity"], ["Stg_Contact"], ["Stg_User"], ["Stg_Opportunity_Stage"], ["Stg_Deal"], ["Stg_Owner"], ["Stg_Deal_Stage"], ["Stg_Deal_Pipeline_Stage"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Opportunity", "model.sales_dataflo.Stg_Contact", "model.sales_dataflo.Stg_User", "model.sales_dataflo.Stg_Opportunity_Stage", "model.sales_dataflo.Stg_Deal", "model.sales_dataflo.Stg_Owner", "model.sales_dataflo.Stg_Deal_Stage", "model.sales_dataflo.Stg_Deal_Pipeline_Stage"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Opportunity.sql", "deferred": false, "compiled_sql": "\n\n\n(\nWITH OPPORTUNITY AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity  \n    ),contact AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact    \n    ),\n    emp AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User    \n    ),\n    OPPORTUNITY_STAGE AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_Stage   \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        cast ( opportunity_id as varchar(100)) AS opportunity_id,\n        OPPORTUNITY.NAME AS opportunity_NAME,\n        OPPORTUNITY.TYPE AS opportunity_Type, \n        cast ( OPPORTUNITY.ACCOUNT_ID as varchar(50)) AS ACCOUNT_ID,        \n        cast ( OPPORTUNITY.OWNER_ID  as varchar(50)) AS employee_id,\n        cast ( OPPORTUNITY.Source_id as varchar(50)) AS Source_id,\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\n        OPPORTUNITY.IS_WON AS IS_WON,\n        OPPORTUNITY.IS_CLOSED AS IS_CLOSED,\n        OPPORTUNITY.stage_name AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        OPPORTUNITY.FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        OPPORTUNITY.AMOUNT AS AMOUNT,\n        OPPORTUNITY.CURRENCY_ISO_CODE as Transactional_Currency,\n        1 as Exch_Rate,\n        Reporting_Currency as Reporting_Currency,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\n        contact.NAME AS contact_name,\n        contact.PHONE AS contact_number,\n        contact.EMAIL AS contact_email,\n        contact.MAILING_STREET AS contact_address,\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        NULL AS competitor,\n        NULL AS on_hold_flag,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        OPPORTUNITY.IS_DELETED AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n        OPPORTUNITY.Source_type AS Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS\n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.OWNER_ID  =  emp.Source_ID and emp.Source_type = OPPORTUNITY.Source_type \n        left join contact on emp.contact_id  =  contact.Source_ID and contact.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL \n        and OPPORTUNITY_STAGE.Source_type = OPPORTUNITY.Source_type\n    ) \nselect * from Dim_Opportunity )   \n\nunion all\n(WITH OPPORTUNITY AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal  \n    ),\n    emp AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Owner    \n    ),\n    OPPORTUNITY_STG AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal_Stage    \n    ),\n    OPPORTUNITY_PIPELINE_STAGE AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal_Pipeline_Stage   \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        cast (OPPORTUNITY.DEAL_ID as varchar(100)) as opportunity_id,\n        OPPORTUNITY.PROPERTY_DEALNAME AS opportunity_NAME,\n        NULL AS opportunity_Type, \n        NULL AS ACCOUNT_ID,        \n        cast (OPPORTUNITY.OWNER_ID as varchar(50)) AS employee_id,\n        cast (OPPORTUNITY.Source_DEAL_ID as varchar(50)) AS Source_id,\n        OPPORTUNITY_PIPELINE_STAGE.DISPLAY_ORDER AS stage_id,\n        case when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' then 'TRUE'\n        when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' then 'FALSE'\n        else NULL end as IS_WON,\n        OPPORTUNITY.PROPERTY_HS_IS_CLOSED AS IS_CLOSED,\n        OPPORTUNITY.DEAL_PIPELINE_STAGE_ID AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        NULL AS FORECAST_CATEGORY,\n        OPPORTUNITY.PROPERTY_AMOUNT AS AMOUNT,\n        NULL as Transactional_Currency,\n        Null as Exch_Rate,\n        NULL as Reporting_Currency,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        NULL AS Contact_id,\n        NULL AS contact_name,\n        NULL AS contact_number,\n        NULL AS contact_email,\n        NULL AS contact_address,\n        OPPORTUNITY.PROPERTY_CREATEDATE AS initial_create_dt,\n        NULL AS last_updated_dt,\n        OPPORTUNITY.PROPERTY_CLOSEDATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY.PROPERTY_HS_CREATEDATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        OPPORTUNITY_STG.Source  AS competitor,\n        NULL AS on_hold_flag,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        NULL AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n        OPPORTUNITY.Source_type AS Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS  \n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.Owner_id  =  emp.Source_OWNER_ID and emp.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_PIPELINE_STAGE on OPPORTUNITY.DEAL_PIPELINE_STAGE_ID = OPPORTUNITY_PIPELINE_STAGE.SOURCE_STAGE_ID \n        and OPPORTUNITY_PIPELINE_STAGE.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = OPPORTUNITY.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = OPPORTUNITY.Source_type \n    )  \nselect * from Dim_Opportunity )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n(\nWITH OPPORTUNITY AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity  \n    ),contact AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Contact    \n    ),\n    emp AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User    \n    ),\n    OPPORTUNITY_STAGE AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_Stage   \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        cast ( opportunity_id as varchar(100)) AS opportunity_id,\n        OPPORTUNITY.NAME AS opportunity_NAME,\n        OPPORTUNITY.TYPE AS opportunity_Type, \n        cast ( OPPORTUNITY.ACCOUNT_ID as varchar(50)) AS ACCOUNT_ID,        \n        cast ( OPPORTUNITY.OWNER_ID  as varchar(50)) AS employee_id,\n        cast ( OPPORTUNITY.Source_id as varchar(50)) AS Source_id,\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\n        OPPORTUNITY.IS_WON AS IS_WON,\n        OPPORTUNITY.IS_CLOSED AS IS_CLOSED,\n        OPPORTUNITY.stage_name AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        OPPORTUNITY.FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        OPPORTUNITY.AMOUNT AS AMOUNT,\n        OPPORTUNITY.CURRENCY_ISO_CODE as Transactional_Currency,\n        1 as Exch_Rate,\n        Reporting_Currency as Reporting_Currency,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\n        contact.NAME AS contact_name,\n        contact.PHONE AS contact_number,\n        contact.EMAIL AS contact_email,\n        contact.MAILING_STREET AS contact_address,\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        NULL AS competitor,\n        NULL AS on_hold_flag,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        OPPORTUNITY.IS_DELETED AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n        OPPORTUNITY.Source_type AS Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS\n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.OWNER_ID  =  emp.Source_ID and emp.Source_type = OPPORTUNITY.Source_type \n        left join contact on emp.contact_id  =  contact.Source_ID and contact.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL \n        and OPPORTUNITY_STAGE.Source_type = OPPORTUNITY.Source_type\n    ) \nselect * from Dim_Opportunity )   \n\nunion all\n(WITH OPPORTUNITY AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal  \n    ),\n    emp AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Owner    \n    ),\n    OPPORTUNITY_STG AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal_Stage    \n    ),\n    OPPORTUNITY_PIPELINE_STAGE AS(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Deal_Pipeline_Stage   \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        cast (OPPORTUNITY.DEAL_ID as varchar(100)) as opportunity_id,\n        OPPORTUNITY.PROPERTY_DEALNAME AS opportunity_NAME,\n        NULL AS opportunity_Type, \n        NULL AS ACCOUNT_ID,        \n        cast (OPPORTUNITY.OWNER_ID as varchar(50)) AS employee_id,\n        cast (OPPORTUNITY.Source_DEAL_ID as varchar(50)) AS Source_id,\n        OPPORTUNITY_PIPELINE_STAGE.DISPLAY_ORDER AS stage_id,\n        case when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' then 'TRUE'\n        when Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' then 'FALSE'\n        else NULL end as IS_WON,\n        OPPORTUNITY.PROPERTY_HS_IS_CLOSED AS IS_CLOSED,\n        OPPORTUNITY.DEAL_PIPELINE_STAGE_ID AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        NULL AS FORECAST_CATEGORY,\n        OPPORTUNITY.PROPERTY_AMOUNT AS AMOUNT,\n        NULL as Transactional_Currency,\n        Null as Exch_Rate,\n        NULL as Reporting_Currency,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        NULL AS Contact_id,\n        NULL AS contact_name,\n        NULL AS contact_number,\n        NULL AS contact_email,\n        NULL AS contact_address,\n        OPPORTUNITY.PROPERTY_CREATEDATE AS initial_create_dt,\n        NULL AS last_updated_dt,\n        OPPORTUNITY.PROPERTY_CLOSEDATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY.PROPERTY_HS_CREATEDATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        OPPORTUNITY_STG.Source  AS competitor,\n        NULL AS on_hold_flag,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        NULL AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n        OPPORTUNITY.Source_type AS Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS  \n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.Owner_id  =  emp.Source_OWNER_ID and emp.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_PIPELINE_STAGE on OPPORTUNITY.DEAL_PIPELINE_STAGE_ID = OPPORTUNITY_PIPELINE_STAGE.SOURCE_STAGE_ID \n        and OPPORTUNITY_PIPELINE_STAGE.Source_type = OPPORTUNITY.Source_type\n        left join OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = OPPORTUNITY.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = OPPORTUNITY.Source_type \n    )  \nselect * from Dim_Opportunity )"}, "error": null, "status": "SUCCESS 39426", "execution_time": 6.8878114223480225, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:33.989290Z", "completed_at": "2021-05-19T00:58:34.035908Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:34.036160Z", "completed_at": "2021-05-19T00:58:40.435756Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'lead_id'\r\n      )\r\n}}\r\n\r\n    WITH lead AS (\r\n       select *  from {{ ref('Stg_Lead') }} \r\n    ),opportunity as(\r\n        select *  from {{ ref('Stg_Opportunity') }} \r\n    ),Dim_Lead as(\r\n    SELECT\r\n        lead_id,\r\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\r\n        lead.source_id as Source_ID,\r\n        concat(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country) AS lead_contact_address,\r\n        lead.country AS country,\r\n        lead.TITLE AS TITLE,\r\n        lead.STATUS AS STATUS,\r\n        opportunity.STAGE_NAME AS STAGE_NAME,\r\n        NULL AS product_id,\r\n        NULL AS campaign_id,\r\n        lead.IS_CONVERTED AS lead_to_opp_flag,\r\n        NULL AS lead_lost_flag,\r\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\r\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\r\n        NULL AS lead_lost_dt,\r\n        NULL AS lead_lost_reason,\r\n        lead.ANNUAL_REVENUE,\r\n        lead.NUMBER_OF_EMPLOYEES,\r\n        lead.INDUSTRY AS Industry,\r\n        LEAD.owner_id AS employee_id,\r\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\r\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\r\n        lead.Source_type AS Source_type,\r\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n        FROM\r\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.Source_ID \r\n          and lead.Source_type = opportunity.Source_type\r\n    )    \r\n \r\nselect * from Dim_Lead", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Lead"], "unique_id": "model.sales_dataflo.Dim_Lead", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Lead.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Lead.sql", "name": "Dim_Lead", "resource_type": "model", "alias": "Dim_Lead", "checksum": {"name": "sha256", "checksum": "eb4c484769d0ce506e54a6b1868c54b7dfd8516271ca8c82b04b4072f26e1c8a"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "lead_id"}, "tags": [], "refs": [["Stg_Lead"], ["Stg_Opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Lead", "model.sales_dataflo.Stg_Opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Lead.sql", "deferred": false, "compiled_sql": "\n\n\n\n    WITH lead AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Lead \n    ),opportunity as(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity \n    ),Dim_Lead as(\n    SELECT\n        lead_id,\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\n        lead.source_id as Source_ID,\n        concat(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country) AS lead_contact_address,\n        lead.country AS country,\n        lead.TITLE AS TITLE,\n        lead.STATUS AS STATUS,\n        opportunity.STAGE_NAME AS STAGE_NAME,\n        NULL AS product_id,\n        NULL AS campaign_id,\n        lead.IS_CONVERTED AS lead_to_opp_flag,\n        NULL AS lead_lost_flag,\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\n        NULL AS lead_lost_dt,\n        NULL AS lead_lost_reason,\n        lead.ANNUAL_REVENUE,\n        lead.NUMBER_OF_EMPLOYEES,\n        lead.INDUSTRY AS Industry,\n        LEAD.owner_id AS employee_id,\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\n        lead.Source_type AS Source_type,\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.Source_ID \n          and lead.Source_type = opportunity.Source_type\n    )    \n \nselect * from Dim_Lead", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n    WITH lead AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Lead \n    ),opportunity as(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity \n    ),Dim_Lead as(\n    SELECT\n        lead_id,\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\n        lead.source_id as Source_ID,\n        concat(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country) AS lead_contact_address,\n        lead.country AS country,\n        lead.TITLE AS TITLE,\n        lead.STATUS AS STATUS,\n        opportunity.STAGE_NAME AS STAGE_NAME,\n        NULL AS product_id,\n        NULL AS campaign_id,\n        lead.IS_CONVERTED AS lead_to_opp_flag,\n        NULL AS lead_lost_flag,\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\n        NULL AS lead_lost_dt,\n        NULL AS lead_lost_reason,\n        lead.ANNUAL_REVENUE,\n        lead.NUMBER_OF_EMPLOYEES,\n        lead.INDUSTRY AS Industry,\n        LEAD.owner_id AS employee_id,\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\n        lead.Source_type AS Source_type,\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.Source_ID \n          and lead.Source_type = opportunity.Source_type\n    )    \n \nselect * from Dim_Lead"}, "error": null, "status": "SUCCESS 551062", "execution_time": 9.373559713363647, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:40.879669Z", "completed_at": "2021-05-19T00:58:40.907877Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:40.908112Z", "completed_at": "2021-05-19T00:58:49.825739Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'employee_id'\r\n      )\r\n}}\r\n(With user AS(\r\n    select *  from {{ ref('Stg_User') }}\r\n),usr_role AS(\r\n    select *  from {{ ref('Stg_User_Role') }}\r\n),Dim_Employee AS(\r\n SELECT\r\n   cast(user.Source_ID || user.Source_type as varchar(100)) AS employee_id,\r\n   cast(user.Source_ID as varchar(100)) AS source_Emp_id,\r\n   user.Source_type AS Entity_id, \r\n   Null AS org_name,\r\n   NULL AS employee_code,\r\n   FIRST_NAME AS first_name,\r\n   NULL AS middle_name,\r\n   LAST_NAME AS last_name,\r\n   NULL AS emp_full_nm,\r\n   NULL AS emp_role_id,\r\n   NULL AS emp_position_level,\r\n   NULL  AS emp_gender,\r\n   NULL AS emp_phone_number,\r\n   EMAIL AS emp_email,\r\n   NULL AS sales_branch_id,\r\n   NULL AS sales_branch_name,\r\n   NULL AS sales_region_id,\r\n   NULL AS sales_region_name,\r\n   NULL AS sales_zone_id,\r\n   NULL AS sales_zone_name,\r\n   NULL AS business_unit_id,\r\n   NULL AS business_unit_name,\r\n   NULL AS emp_create_dt,\r\n   NULL AS emp_last_update_dt,\r\n   NULL AS mngr_emp_id,\r\n   NULL AS mngr_position_level,\r\n   NULL AS mngr_role_id,\r\n   NULL AS emp_financial_year_start,\r\n   NULL AS emp_start_of_week,\r\n   NULL AS Weekly_working_days,\r\n   IS_ACTIVE AS  emp_active,\r\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\r\n   {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n  FROM\r\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.Source_ID\r\n      and user.source_type = usr_role.source_type\r\n)\r\n\r\nselect * from Dim_Employee)\r\n\r\nunion all\r\n\r\n(With user AS(\r\n    select *  from {{ ref('Stg_Owner') }}\r\n),Dim_Employee AS(\r\n SELECT\r\n   cast(Source_OWNER_ID || Source_type  as varchar(100)) AS employee_id,\r\n   cast (Source_OWNER_ID as varchar(100)) AS source_Emp_id,\r\n   Source_type AS Entity_id, \r\n   Null AS org_name,\r\n   NULL AS employee_code,\r\n   FIRST_NAME AS first_name,\r\n   NULL AS middle_name,\r\n   LAST_NAME AS last_name,\r\n   NULL AS emp_full_nm,\r\n   NULL AS emp_role_id,\r\n   NULL AS emp_position_level,\r\n   NULL  AS emp_gender,\r\n   NULL AS emp_phone_number,\r\n   EMAIL AS emp_email,\r\n   NULL AS sales_branch_id,\r\n   NULL AS sales_branch_name,\r\n   NULL AS sales_region_id,\r\n   NULL AS sales_region_name,\r\n   NULL AS sales_zone_id,\r\n   NULL AS sales_zone_name,\r\n   NULL AS business_unit_id,\r\n   NULL AS business_unit_name,\r\n   NULL AS emp_create_dt,\r\n   NULL AS emp_last_update_dt,\r\n   NULL AS mngr_emp_id,\r\n   NULL AS mngr_position_level,\r\n   NULL AS mngr_role_id,\r\n   NULL AS emp_financial_year_start,\r\n   NULL AS emp_start_of_week,\r\n   NULL AS Weekly_working_days,\r\n   IS_ACTIVE AS  emp_active,\r\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\r\n   {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n  FROM\r\n      user\r\n)\r\n\r\nselect * from Dim_Employee)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Employee"], "unique_id": "model.sales_dataflo.Dim_Employee", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Employee.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Employee.sql", "name": "Dim_Employee", "resource_type": "model", "alias": "Dim_Employee", "checksum": {"name": "sha256", "checksum": "2e4b00a6415c7c9ea535596165361a87932d08eb834ac25988ba3fc4c133a280"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "employee_id"}, "tags": [], "refs": [["Stg_User"], ["Stg_User_Role"], ["Stg_Owner"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_User", "model.sales_dataflo.Stg_User_Role", "model.sales_dataflo.Stg_Owner"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Employee.sql", "deferred": false, "compiled_sql": "\n\n\n(With user AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User\n),usr_role AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User_Role\n),Dim_Employee AS(\n SELECT\n   cast(user.Source_ID || user.Source_type as varchar(100)) AS employee_id,\n   cast(user.Source_ID as varchar(100)) AS source_Emp_id,\n   user.Source_type AS Entity_id, \n   Null AS org_name,\n   NULL AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   NULL AS emp_full_nm,\n   NULL AS emp_role_id,\n   NULL AS emp_position_level,\n   NULL  AS emp_gender,\n   NULL AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   NULL AS business_unit_name,\n   NULL AS emp_create_dt,\n   NULL AS emp_last_update_dt,\n   NULL AS mngr_emp_id,\n   NULL AS mngr_position_level,\n   NULL AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.Source_ID\n      and user.source_type = usr_role.source_type\n)\n\nselect * from Dim_Employee)\n\nunion all\n\n(With user AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Owner\n),Dim_Employee AS(\n SELECT\n   cast(Source_OWNER_ID || Source_type  as varchar(100)) AS employee_id,\n   cast (Source_OWNER_ID as varchar(100)) AS source_Emp_id,\n   Source_type AS Entity_id, \n   Null AS org_name,\n   NULL AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   NULL AS emp_full_nm,\n   NULL AS emp_role_id,\n   NULL AS emp_position_level,\n   NULL  AS emp_gender,\n   NULL AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   NULL AS business_unit_name,\n   NULL AS emp_create_dt,\n   NULL AS emp_last_update_dt,\n   NULL AS mngr_emp_id,\n   NULL AS mngr_position_level,\n   NULL AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user\n)\n\nselect * from Dim_Employee)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n(With user AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User\n),usr_role AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_User_Role\n),Dim_Employee AS(\n SELECT\n   cast(user.Source_ID || user.Source_type as varchar(100)) AS employee_id,\n   cast(user.Source_ID as varchar(100)) AS source_Emp_id,\n   user.Source_type AS Entity_id, \n   Null AS org_name,\n   NULL AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   NULL AS emp_full_nm,\n   NULL AS emp_role_id,\n   NULL AS emp_position_level,\n   NULL  AS emp_gender,\n   NULL AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   NULL AS business_unit_name,\n   NULL AS emp_create_dt,\n   NULL AS emp_last_update_dt,\n   NULL AS mngr_emp_id,\n   NULL AS mngr_position_level,\n   NULL AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.Source_ID\n      and user.source_type = usr_role.source_type\n)\n\nselect * from Dim_Employee)\n\nunion all\n\n(With user AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Owner\n),Dim_Employee AS(\n SELECT\n   cast(Source_OWNER_ID || Source_type  as varchar(100)) AS employee_id,\n   cast (Source_OWNER_ID as varchar(100)) AS source_Emp_id,\n   Source_type AS Entity_id, \n   Null AS org_name,\n   NULL AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   NULL AS emp_full_nm,\n   NULL AS emp_role_id,\n   NULL AS emp_position_level,\n   NULL  AS emp_gender,\n   NULL AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   NULL AS business_unit_name,\n   NULL AS emp_create_dt,\n   NULL AS emp_last_update_dt,\n   NULL AS mngr_emp_id,\n   NULL AS mngr_position_level,\n   NULL AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user\n)\n\nselect * from Dim_Employee)"}, "error": null, "status": "SUCCESS 3540", "execution_time": 4.9563469886779785, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:50.255775Z", "completed_at": "2021-05-19T00:58:50.290855Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:50.291216Z", "completed_at": "2021-05-19T00:58:54.777939Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Account_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Account') }}\r\n  ),\r\nDIM_ACCOUNT as (\r\n      select\r\n        Account_ID,\r\n        NAME Account_Name,\r\n        TYPE Account_Type,\r\n        Source_ID,\r\n        IS_DELETED Active_Flag,\r\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\r\n        INDUSTRY INDUSTRY,\r\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\r\n        OWNER_ID AS Employee_ID,\r\n        CREATED_DATE as INITIAL_CREATE_DT,\r\n        Source_type Source_type,\r\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_ACCOUNT", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Account"], "unique_id": "model.sales_dataflo.Dim_Account", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Account.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Account.sql", "name": "Dim_Account", "resource_type": "model", "alias": "Dim_Account", "checksum": {"name": "sha256", "checksum": "5c9a54ff16f32f3b0144c362ea79e616ec51a340221117f4b4524bde77b6dba0"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Account_ID"}, "tags": [], "refs": [["Stg_Account"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Account.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account\n  ),\nDIM_ACCOUNT as (\n      select\n        Account_ID,\n        NAME Account_Name,\n        TYPE Account_Type,\n        Source_ID,\n        IS_DELETED Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        Source_type Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ACCOUNT", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account\n  ),\nDIM_ACCOUNT as (\n      select\n        Account_ID,\n        NAME Account_Name,\n        TYPE Account_Type,\n        Source_ID,\n        IS_DELETED Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        Source_type Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ACCOUNT"}, "error": null, "status": "SUCCESS 191439", "execution_time": 6.264856815338135, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:58:55.214613Z", "completed_at": "2021-05-19T00:58:55.242598Z"}, {"name": "execute", "started_at": "2021-05-19T00:58:55.242856Z", "completed_at": "2021-05-19T00:59:01.046966Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--depends_on: {{ ref('Stg_Period') }}\r\n--depends_on: {{ ref('Dim_Calendar') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HS') and READY_TO_PROCESS = 'TRUE'\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE\")%}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n\r\n{% if V_SF_Schema != 'X' %} \r\n{% set schema_nm,entity_typ = V_SF_Schema.split('#') %}\r\n{% else %}\r\n{% set entity_typ = 'X' %}\r\n{% endif %}\r\n\r\n {% if  entity_typ == 'SF'  %}  \r\n(with year_data as \r\n(\r\n    select * from {{ ref('Stg_Period') }} \r\n    where type ='Year'\r\n    and source_type = '{{ schema_nm}}'\r\n),\r\nqutr_data as \r\n(\r\n    select * from {{ ref('Stg_Period') }} \r\n    where type ='Quarter'\r\n    and source_type = '{{ schema_nm}}'\r\n),\r\n Dates AS \r\n(\r\n    SELECT * FROM {{ ref('Dim_Calendar') }}\r\n)   \r\nselect\r\n    d.Calendar_ID AS TimeFrameID,\r\n    'D' as TimeFrameType,\r\n    d.Calendar_ID as calendar_id,\r\n    d.cldr_date as day_start,\r\n    d.cldr_date as day_end,\r\n    d.week_start_date as week_Start,\r\n    d.week_end_date as week_end,\r\n    'W' || d.cldr_week_num as week_num,\r\n    d.cldr_mnth_strt_dt as month_start,\r\n    d.cldr_mnth_end_dt as month_end, \r\n    upper(d.month_name) as month_name,\r\n     'Q' || s.number as qutr_number,\r\n    s.start_date as quarter_start,\r\n    s.end_date as quarter_end,\r\n    cast(right(y.FULLY_QUALIFIED_LABEL,4) as integer) as year,\r\n    y.start_date as year_start,\r\n    y.end_date as year_end,\r\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\r\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\r\n    case when Calendar_ID = s.end_date then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\r\n    case when Calendar_ID = y.end_date then 'TRUE' else 'FALSE' end as  Yearend_FLag,\r\n    upper('{{ schema_nm }}') as Source_type,\r\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\r\n    {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS     \r\nfrom\r\n    dates d\r\n    left join qutr_data s\r\n    on d.cldr_date between s.start_date and s.end_date\r\n    left join year_data y\r\n    on d.cldr_date between y.start_date and y.end_date\r\norder by 2)\r\n {% elif  entity_typ == 'HS'  %} \r\n (with  Dates AS \r\n(\r\n    SELECT * FROM {{ ref('Dim_Calendar') }}\r\n)   \r\nselect\r\n    d.Calendar_ID AS TimeFrameID,\r\n    'D' as TimeFrameType,\r\n    d.Calendar_ID as calendar_id,\r\n    d.cldr_date as day_start,\r\n    d.cldr_date as day_end,\r\n    d.week_start_date as week_Start,\r\n    d.week_end_date as week_end,\r\n    'W' || d.cldr_week_num as week_num,\r\n    d.cldr_mnth_strt_dt as month_start,\r\n    d.cldr_mnth_end_dt as month_end, \r\n    d.month_name as month_name,\r\n    cldr_qtr as qutr_number,\r\n    d.cldr_qtr_strt_dt as quarter_start,\r\n    d.cldr_qtr_end_dt as quarter_end,\r\n    cast(d.year as integer) as year,\r\n    d.cldr_year_start_dt as year_start,\r\n    d.cldr_year_end_dt as year_end,\r\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\r\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\r\n    case when Calendar_ID = d.cldr_qtr_end_dt then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\r\n    case when Calendar_ID = d.cldr_year_end_dt then 'TRUE' else 'FALSE' end as  Yearend_FLag,\r\n    '{{ schema_nm }}' as Source_type,\r\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\r\n    {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS     \r\nfrom\r\n    dates d\r\n order by 2)\r\n\r\n{% endif %}\r\n{% if loop.nextitem is defined %}\r\n            UNION ALL\r\n        {% endif %}\r\n\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_TimeFrame"], "unique_id": "model.sales_dataflo.Dim_TimeFrame", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_TimeFrame.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_TimeFrame.sql", "name": "Dim_TimeFrame", "resource_type": "model", "alias": "Dim_TimeFrame", "checksum": {"name": "sha256", "checksum": "05e642bc88a6d641e9febd46342b03dd9d47e303b85115359f5c8047bb3b499b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Period"], ["Dim_Calendar"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Period", "model.sales_dataflo.Dim_Calendar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_TimeFrame.sql", "deferred": false, "compiled_sql": "--depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period\n--depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n\n\n \n\n\n\n   \n(with year_data as \n(\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period \n    where type ='Year'\n    and source_type = 'SF_RKLIVE_06012021'\n),\nqutr_data as \n(\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period \n    where type ='Quarter'\n    and source_type = 'SF_RKLIVE_06012021'\n),\n Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    upper(d.month_name) as month_name,\n     'Q' || s.number as qutr_number,\n    s.start_date as quarter_start,\n    s.end_date as quarter_end,\n    cast(right(y.FULLY_QUALIFIED_LABEL,4) as integer) as year,\n    y.start_date as year_start,\n    y.end_date as year_end,\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\n    case when Calendar_ID = s.end_date then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\n    case when Calendar_ID = y.end_date then 'TRUE' else 'FALSE' end as  Yearend_FLag,\n    upper('SF_RKLIVE_06012021') as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n    left join qutr_data s\n    on d.cldr_date between s.start_date and s.end_date\n    left join year_data y\n    on d.cldr_date between y.start_date and y.end_date\norder by 2)\n \n\n            UNION ALL\n        \n\n\n\n \n\n\n\n  \n (with  Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    d.month_name as month_name,\n    cldr_qtr as qutr_number,\n    d.cldr_qtr_strt_dt as quarter_start,\n    d.cldr_qtr_end_dt as quarter_end,\n    cast(d.year as integer) as year,\n    d.cldr_year_start_dt as year_start,\n    d.cldr_year_end_dt as year_end,\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\n    case when Calendar_ID = d.cldr_qtr_end_dt then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\n    case when Calendar_ID = d.cldr_year_end_dt then 'TRUE' else 'FALSE' end as  Yearend_FLag,\n    'HS_RKLIVE_01042021' as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n order by 2)\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period\n--depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n\n\n \n\n\n\n   \n(with year_data as \n(\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period \n    where type ='Year'\n    and source_type = 'SF_RKLIVE_06012021'\n),\nqutr_data as \n(\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Period \n    where type ='Quarter'\n    and source_type = 'SF_RKLIVE_06012021'\n),\n Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    upper(d.month_name) as month_name,\n     'Q' || s.number as qutr_number,\n    s.start_date as quarter_start,\n    s.end_date as quarter_end,\n    cast(right(y.FULLY_QUALIFIED_LABEL,4) as integer) as year,\n    y.start_date as year_start,\n    y.end_date as year_end,\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\n    case when Calendar_ID = s.end_date then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\n    case when Calendar_ID = y.end_date then 'TRUE' else 'FALSE' end as  Yearend_FLag,\n    upper('SF_RKLIVE_06012021') as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n    left join qutr_data s\n    on d.cldr_date between s.start_date and s.end_date\n    left join year_data y\n    on d.cldr_date between y.start_date and y.end_date\norder by 2)\n \n\n            UNION ALL\n        \n\n\n\n \n\n\n\n  \n (with  Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    d.month_name as month_name,\n    cldr_qtr as qutr_number,\n    d.cldr_qtr_strt_dt as quarter_start,\n    d.cldr_qtr_end_dt as quarter_end,\n    cast(d.year as integer) as year,\n    d.cldr_year_start_dt as year_start,\n    d.cldr_year_end_dt as year_end,\n    case when Calendar_ID = d.week_end_date then 'TRUE' else 'FALSE' end as Weekend_FLag,\n    case when Calendar_ID = d.cldr_mnth_end_dt then 'TRUE' else 'FALSE' end as  Monthend_FLag,\n    case when Calendar_ID = d.cldr_qtr_end_dt then 'TRUE' else 'FALSE' end as  Quarterend_FLag,\n    case when Calendar_ID = d.cldr_year_end_dt then 'TRUE' else 'FALSE' end as  Yearend_FLag,\n    'HS_RKLIVE_01042021' as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n order by 2)\n\n\n\n\n"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.4379332065582275, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:01.605231Z", "completed_at": "2021-05-19T00:59:03.039674Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:03.039998Z", "completed_at": "2021-05-19T00:59:04.620628Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Account_History') }}\r\n\r\n), fields as (\r\n\r\n    select \r\n        id as account_id,\r\n        last_modified_time as last_modified_at,\r\n        created_time as created_at,\r\n        name as account_name,\r\n        currency,\r\n        cast(version_tag as numeric) as version_tag\r\n    from base\r\n\r\n), valid_dates as (\r\n\r\n    select \r\n        *,\r\n        case \r\n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\r\n            else last_modified_at\r\n        end as valid_from,\r\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\r\n    from fields\r\n\r\n), surrogate_key as (\r\n\r\n    select \r\n        *,\r\n        {{ dbt_utils.surrogate_key(['account_id','version_tag']) }} as account_version_id\r\n    from valid_dates\r\n\r\n)\r\n\r\nselect *\r\nfrom surrogate_key", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Account_History"], "unique_id": "model.sales_dataflo.Dim_Account_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Account_History.Sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Account_History.Sql", "name": "Dim_Account_History", "resource_type": "model", "alias": "Dim_Account_History", "checksum": {"name": "sha256", "checksum": "f629cbb4d4018f8a088efe079d3681ddc348342a41b62a5becd43b8dcbe9dd5a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Account_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Account_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Account_History.Sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3547251224517822, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:05.045781Z", "completed_at": "2021-05-19T00:59:05.075696Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:05.075972Z", "completed_at": "2021-05-19T00:59:06.971753Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Campaign_Group_History') }}\r\n\r\n), fields as (\r\n\r\n    select \r\n        id as campaign_group_id,\r\n        last_modified_time as last_modified_at,\r\n        account_id,\r\n        created_time as created_at,\r\n        name as campaign_group_name\r\n    from base\r\n\r\n), valid_dates as (\r\n\r\n    select \r\n        *,\r\n        case \r\n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\r\n            else last_modified_at\r\n        end as valid_from,\r\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\r\n    from fields\r\n\r\n), surrogate_key as (\r\n\r\n    select \r\n        *,\r\n        {{ dbt_utils.surrogate_key(['campaign_group_id','last_modified_at']) }} as campaign_group_version_id\r\n    from valid_dates\r\n\r\n)\r\n\r\nselect *\r\nfrom surrogate_key", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Campaign_Group_History"], "unique_id": "model.sales_dataflo.Dim_Campaign_Group_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Campaign_Group_History.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Campaign_Group_History.sql", "name": "Dim_Campaign_Group_History", "resource_type": "model", "alias": "Dim_Campaign_Group_History", "checksum": {"name": "sha256", "checksum": "9c859ee22a2c6496bda59d0cf65792615b10842211465b5226885106b975dbf3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Campaign_Group_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Campaign_Group_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Campaign_Group_History.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_Group_History\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_group_id as \n    varchar\n), '') || '-' || coalesce(cast(last_modified_at as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_Group_History\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_group_id as \n    varchar\n), '') || '-' || coalesce(cast(last_modified_at as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.317185878753662, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:07.403067Z", "completed_at": "2021-05-19T00:59:07.431728Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:07.431976Z", "completed_at": "2021-05-19T00:59:09.295815Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Campaign_History') }}\r\n), fields as (\r\n\r\n    select \r\n        id as campaign_id,\r\n        last_modified_time as last_modified_at,\r\n        account_id,\r\n        campaign_group_id,\r\n        created_time as created_at,\r\n        name as campaign_name,\r\n        cast(version_tag as numeric) as version_tag\r\n    from base\r\n\r\n), valid_dates as (\r\n\r\n    select \r\n        *,\r\n        case \r\n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\r\n            else last_modified_at\r\n        end as valid_from,\r\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\r\n    from fields\r\n\r\n), surrogate_key as (\r\n\r\n    select \r\n        *,\r\n        {{ dbt_utils.surrogate_key(['campaign_id','version_tag']) }} as campaign_version_id\r\n    from valid_dates\r\n\r\n)\r\n\r\nselect *\r\nfrom surrogate_key", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Campaign_History"], "unique_id": "model.sales_dataflo.Dim_Campaign_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Campaign_History.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Campaign_History.sql", "name": "Dim_Campaign_History", "resource_type": "model", "alias": "Dim_Campaign_History", "checksum": {"name": "sha256", "checksum": "14e8f72e8322ead1dd1dc000809b67e10c954ecb8d9040f060644d8d28c7fa65"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Campaign_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Campaign_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Campaign_History.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from base\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.514319658279419, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:09.722775Z", "completed_at": "2021-05-19T00:59:09.752723Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:09.752972Z", "completed_at": "2021-05-19T00:59:11.809638Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Creative_History') }}\r\n\r\n), fields as (\r\n\r\n    select\r\n        id as creative_id,\r\n        last_modified_time as last_modified_at,\r\n        created_time as created_at,\r\n        campaign_id,\r\n        type as creative_type,\r\n        cast(version_tag as numeric) as version_tag,\r\n        status as creative_status,\r\n        click_uri\r\n    from base\r\n\r\n), url_fields as (\r\n\r\n    select \r\n        *,\r\n        {{ dbt_utils.split_part('click_uri', \"'?'\", 1) }} as base_url,\r\n        {{ dbt_utils.get_url_host('click_uri') }} as url_host,\r\n        '/' || {{ dbt_utils.get_url_path('click_uri') }} as url_path,\r\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_source') }} as utm_source,\r\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_medium') }} as utm_medium,\r\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_campaign') }} as utm_campaign,\r\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_content') }} as utm_content,\r\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_term') }} as utm_term\r\n    from fields\r\n\r\n), valid_dates as (\r\n\r\n    select \r\n        *,\r\n        case \r\n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\r\n            else last_modified_at\r\n        end as valid_from,\r\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\r\n    from url_fields\r\n\r\n), surrogate_key as (\r\n\r\n    select \r\n        *,\r\n        {{ dbt_utils.surrogate_key(['creative_id','version_tag']) }} as creative_version_id\r\n    from valid_dates\r\n\r\n)\r\n\r\nselect *\r\nfrom surrogate_key", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Creative_History"], "unique_id": "model.sales_dataflo.Dim_Creative_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Creative_History.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Creative_History.sql", "name": "Dim_Creative_History", "resource_type": "model", "alias": "Dim_Creative_History", "checksum": {"name": "sha256", "checksum": "d412ad728695416889e818e40e6afab941d19693f362cb894c5f0af3c11712a6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Creative_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Creative_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Creative_History.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        \n  \n\n    split_part(\n        click_uri,\n        '?',\n        1\n        )\n\n\n as base_url,\n        \n  \n    try_cast(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n        '/',\n        1\n        )\n\n\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_host,\n        '/' || \n  \n    try_cast(\n  \n\n    split_part(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            ) = 0 \n        then ''\n    else \n        right(\n            \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n            \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            )\n        )\n    end\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_path,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_source=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_source,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_medium=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_medium,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_campaign=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_campaign,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_content=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_content,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_term=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(creative_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        \n  \n\n    split_part(\n        click_uri,\n        '?',\n        1\n        )\n\n\n as base_url,\n        \n  \n    try_cast(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n        '/',\n        1\n        )\n\n\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_host,\n        '/' || \n  \n    try_cast(\n  \n\n    split_part(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            ) = 0 \n        then ''\n    else \n        right(\n            \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n            \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            )\n        )\n    end\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_path,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_source=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_source,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_medium=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_medium,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_campaign=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_campaign,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_content=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_content,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        click_uri,\n        'utm_term=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(creative_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '')\n\n as \n    varchar\n)) as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.60687255859375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:12.239697Z", "completed_at": "2021-05-19T00:59:12.273234Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:12.273470Z", "completed_at": "2021-05-19T00:59:14.425064Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Final_URL_Performance')}}\r\n\r\n), fields as (\r\n\r\n    select\r\n        cast(DATE as date) as date_day,\r\n        account_name,\r\n        external_customer_id as account_id,\r\n        campaign_name,\r\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\r\n        ad_group_name,\r\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\r\n        coalesce(clicks, 0) as clicks,\r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(cost, 0) as spend,\r\n        Source_Type as Platform\r\n    from base\r\n\r\n)\r\n\r\nselect *\r\nfrom fields", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_GA_Ads"], "unique_id": "model.sales_dataflo.Dim_GA_Ads", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_GA_Ads.sql", "original_file_path": "ETL/Target/Tables/Dim_GA_Ads.sql", "name": "Dim_GA_Ads", "resource_type": "model", "alias": "Dim_GA_Ads", "checksum": {"name": "sha256", "checksum": "d67393da0c7ce2f872be9d754b24fa3fde05ccf2ff1f0f4f077e49556d3f07f1"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Final_URL_Performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Final_URL_Performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_GA_Ads.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Final_URL_Performance\n\n), fields as (\n\n    select\n        cast(DATE as date) as date_day,\n        account_name,\n        external_customer_id as account_id,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    varchar\n) as ad_group_id,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend,\n        Source_Type as Platform\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Final_URL_Performance\n\n), fields as (\n\n    select\n        cast(DATE as date) as date_day,\n        account_name,\n        external_customer_id as account_id,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    varchar\n) as ad_group_id,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend,\n        Source_Type as Platform\n    from base\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3269145488739014, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:14.849100Z", "completed_at": "2021-05-19T00:59:14.876190Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:14.876424Z", "completed_at": "2021-05-19T00:59:16.759097Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select * \r\n    from {{ ref('Stg_Account_History_FB') }}\r\n\r\n),\r\n\r\nfields_xf as (\r\n    \r\n    select \r\n        id as account_id,\r\n        name as account_name,\r\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n    from base\r\n\r\n)\r\n\r\nselect * from fields_xf", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Account_History_FB"], "unique_id": "model.sales_dataflo.Dim_Account_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Account_History_FB.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Account_History_FB.sql", "name": "Dim_Account_History_FB", "resource_type": "model", "alias": "Dim_Account_History_FB", "checksum": {"name": "sha256", "checksum": "6ad2df6dca20d618550c37a769ba2a1070e3ae158f6446da84d21968a732eecf"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Account_History_FB"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Account_History_FB"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Account_History_FB.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf"}, "error": "Database Error in model Dim_Account_History_FB (ETL/Target/Tables/Ads/Dim_Account_History_FB.sql)\n  000904 (42000): SQL compilation error: error line 14 at position 52\n  invalid identifier '_FIVETRAN_SYNCED'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Account_History_FB.sql", "status": "ERROR", "execution_time": 2.258084535598755, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select * \r\n    from {{ ref('Stg_Ad_History') }}\r\n\r\n),\r\n\r\nfields_xf as (\r\n    \r\n    select \r\n        id as ad_id,\r\n        account_id,\r\n        ad_set_id,\r\n        campaign_id,\r\n        creative_id,\r\n        name as ad_name,\r\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n    from base\r\n\r\n)\r\n\r\nselect * from fields_xf", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Ad_History"], "unique_id": "model.sales_dataflo.Dim_Ad_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Ad_History.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Ad_History.sql", "name": "Dim_Ad_History", "resource_type": "model", "alias": "Dim_Ad_History", "checksum": {"name": "sha256", "checksum": "17a7c78fa121b15e1dc8d2a9613c8d66588a16b755aa266e3fa7711a8f4f55f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Ad_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Ad_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Ad_History.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_History\n\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_History\n\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf"}, "error": "Database Error in model Dim_Ad_History (ETL/Target/Tables/Ads/Dim_Ad_History.sql)\n  000904 (42000): SQL compilation error: error line 18 at position 52\n  invalid identifier '_FIVETRAN_SYNCED'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Ad_History.sql", "status": "ERROR", "execution_time": 2.287543535232544, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select * \r\n    from {{ ref('Stg_Ad_Set_History') }}\r\n\r\n),\r\n\r\nfields_xf as (\r\n    \r\n    select \r\n        id as ad_set_id,\r\n        account_id,\r\n        campaign_id,\r\n        name as ad_set_name,\r\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n    from base\r\n\r\n)\r\n\r\nselect * from fields_xf", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Ad_Set_History"], "unique_id": "model.sales_dataflo.Dim_Ad_Set_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Ad_Set_History.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Ad_Set_History.sql", "name": "Dim_Ad_Set_History", "resource_type": "model", "alias": "Dim_Ad_Set_History", "checksum": {"name": "sha256", "checksum": "b1687c558697477cb3d637d35b5c74fd93bf319c0e1cced4392300bb560e5ecb"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Ad_Set_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Ad_Set_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Ad_Set_History.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Set_History\n\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Set_History\n\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf"}, "error": "Database Error in model Dim_Ad_Set_History (ETL/Target/Tables/Ads/Dim_Ad_Set_History.sql)\n  000904 (42000): SQL compilation error: error line 12 at position 8\n  invalid identifier 'ID'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Ad_Set_History.sql", "status": "ERROR", "execution_time": 2.429868698120117, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Campaign_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS (\r\n    select * from {{ ref('Stg_Campaign') }} \r\n    ),\r\nDim_Campaign as (\r\n\r\n      SELECT\r\n        NULL AS Account_ID,\r\n        Campaign_ID,\r\n        OWNER_ID as Campaign_OWNER_ID,\r\n        NAME AS Campaign_Name,\r\n        IS_ACTIVE AS active_flag,\r\n        Source_ID,\r\n        TYPE AS TYPE,\r\n        STATUS AS STATUS,\r\n        START_DATE AS START_DATE,\r\n        END_DATE AS END_DATE,\r\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\r\n        BUDGETED_COST AS BUDGETED_COST,\r\n        ACTUAL_COST AS ACTUAL_COST,\r\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\r\n        NUMBER_SENT AS NUMBER_SENT,\r\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\r\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\r\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\r\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\r\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\r\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\r\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\r\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\r\n        Source_type AS Source_type,\r\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM\r\n        source     \r\n      )\r\n\r\n  select * from  Dim_Campaign", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Campaign"], "unique_id": "model.sales_dataflo.Dim_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Campaign.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Campaign.sql", "name": "Dim_Campaign", "resource_type": "model", "alias": "Dim_Campaign", "checksum": {"name": "sha256", "checksum": "890f53b97888c96015b1d5144ac51f9e1548a0a4fb5ada2f5a1faf5b59803ecb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Campaign_ID"}, "tags": [], "refs": [["Stg_Campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Campaign"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Campaign.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS (\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign \n    ),\nDim_Campaign as (\n\n      SELECT\n        NULL AS Account_ID,\n        Campaign_ID,\n        OWNER_ID as Campaign_OWNER_ID,\n        NAME AS Campaign_Name,\n        IS_ACTIVE AS active_flag,\n        Source_ID,\n        TYPE AS TYPE,\n        STATUS AS STATUS,\n        START_DATE AS START_DATE,\n        END_DATE AS END_DATE,\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\n        BUDGETED_COST AS BUDGETED_COST,\n        ACTUAL_COST AS ACTUAL_COST,\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\n        NUMBER_SENT AS NUMBER_SENT,\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\n        Source_type AS Source_type,\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n        source     \n      )\n\n  select * from  Dim_Campaign", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS (\n    select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign \n    ),\nDim_Campaign as (\n\n      SELECT\n        NULL AS Account_ID,\n        Campaign_ID,\n        OWNER_ID as Campaign_OWNER_ID,\n        NAME AS Campaign_Name,\n        IS_ACTIVE AS active_flag,\n        Source_ID,\n        TYPE AS TYPE,\n        STATUS AS STATUS,\n        START_DATE AS START_DATE,\n        END_DATE AS END_DATE,\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\n        BUDGETED_COST AS BUDGETED_COST,\n        ACTUAL_COST AS ACTUAL_COST,\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\n        NUMBER_SENT AS NUMBER_SENT,\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\n        Source_type AS Source_type,\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n        source     \n      )\n\n  select * from  Dim_Campaign"}, "error": null, "status": "SUCCESS 9646", "execution_time": 5.378224849700928, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:24.161051Z", "completed_at": "2021-05-19T00:59:24.190361Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:24.190602Z", "completed_at": "2021-05-19T00:59:29.098924Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select * \r\n    from {{ ref('Stg_Campaign_History_FB') }}\r\n\r\n),\r\n\r\nfields_xf as (\r\n    \r\n    select \r\n        id as campaign_id,\r\n        account_id,\r\n        name as campaign_name,\r\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n    from base\r\n\r\n)\r\n\r\nselect * from fields_xf", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Campaign_History_FB"], "unique_id": "model.sales_dataflo.Dim_Campaign_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Campaign_History_FB.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Campaign_History_FB.sql", "name": "Dim_Campaign_History_FB", "resource_type": "model", "alias": "Dim_Campaign_History_FB", "checksum": {"name": "sha256", "checksum": "3d37111384f1eca5d3115cf72b3ea2edb1996665af7f17e7ecd0fa968a759ffd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Campaign_History_FB"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Campaign_History_FB"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Campaign_History_FB.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n\n)\n\nselect * from fields_xf"}, "error": "Database Error in model Dim_Campaign_History_FB (ETL/Target/Tables/Ads/Dim_Campaign_History_FB.sql)\n  000904 (42000): SQL compilation error: error line 15 at position 52\n  invalid identifier '_FIVETRAN_SYNCED'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Campaign_History_FB.sql", "status": "ERROR", "execution_time": 2.262963056564331, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Channel_Traffic') }}\r\n  ),\r\nDIM_CHANNEL_TRAFFIC as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        CHANNEL_GROUPING,\r\n        GOAL_VALUE_ALL,\r\n        NEW_USERS,\r\n        SESSIONS,\r\n        AVG_SESSION_DURATION,\r\n        GOAL_COMPLETIONS_ALL,\r\n        PAGEVIEWS_PER_SESSION,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        USERS,\r\n        BOUNCE_RATE,\r\n        PERCENT_NEW_SESSIONS,\r\n        Source_type,\r\n        'D_CHANNEL_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_CHANNEL_TRAFFIC", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Channel_Traffic"], "unique_id": "model.sales_dataflo.Dim_Channel_Traffic", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Channel_Traffic.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Channel_Traffic.sql", "name": "Dim_Channel_Traffic", "resource_type": "model", "alias": "Dim_Channel_Traffic", "checksum": {"name": "sha256", "checksum": "68e9d6dd835ed002ff3f4522838619023f30d1d214c613bfaa48b6b39e6fa9d0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Channel_Traffic"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Channel_Traffic"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Channel_Traffic.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Channel_Traffic\n  ),\nDIM_CHANNEL_TRAFFIC as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        CHANNEL_GROUPING,\n        GOAL_VALUE_ALL,\n        NEW_USERS,\n        SESSIONS,\n        AVG_SESSION_DURATION,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        PERCENT_NEW_SESSIONS,\n        Source_type,\n        'D_CHANNEL_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_CHANNEL_TRAFFIC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Channel_Traffic\n  ),\nDIM_CHANNEL_TRAFFIC as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        CHANNEL_GROUPING,\n        GOAL_VALUE_ALL,\n        NEW_USERS,\n        SESSIONS,\n        AVG_SESSION_DURATION,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        PERCENT_NEW_SESSIONS,\n        Source_type,\n        'D_CHANNEL_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_CHANNEL_TRAFFIC"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3904857635498047, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:31.807149Z", "completed_at": "2021-05-19T00:59:31.834500Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:31.834753Z", "completed_at": "2021-05-19T00:59:33.768565Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select * \r\n    from {{ ref('Stg_Creative_History_FB') }}\r\n\r\n),\r\n\r\nfields_xf as (\r\n    \r\n    select \r\n        _fivetran_id,\r\n        id as creative_id,\r\n        account_id,\r\n        name as creative_name,\r\n        page_link,\r\n        template_page_link,\r\n        url_tags,\r\n        asset_feed_spec_link_urls,\r\n        object_story_link_data_child_attachments,\r\n        object_story_link_data_caption, \r\n        object_story_link_data_description, \r\n        object_story_link_data_link, \r\n        object_story_link_data_message,\r\n        template_app_link_spec_ios,\r\n        template_app_link_spec_ipad,\r\n        template_app_link_spec_android,\r\n        template_app_link_spec_iphone,\r\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n    from base\r\n    \r\n)\r\n\r\nselect * from fields_xf", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Creative_History_FB"], "unique_id": "model.sales_dataflo.Dim_Creative_History_FB", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Creative_History_FB.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Creative_History_FB.sql", "name": "Dim_Creative_History_FB", "resource_type": "model", "alias": "Dim_Creative_History_FB", "checksum": {"name": "sha256", "checksum": "f0580eebb8689ad917547845b53fb2e57c46ad0e24de6fe032fc525967df9e2a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Creative_History_FB"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Creative_History_FB"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Creative_History_FB.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n    \n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select * \n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History_FB\n\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from base\n    \n)\n\nselect * from fields_xf"}, "error": "Database Error in model Dim_Creative_History_FB (ETL/Target/Tables/Ads/Dim_Creative_History_FB.sql)\n  000904 (42000): SQL compilation error: error line 13 at position 8\n  invalid identifier 'ID'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Creative_History_FB.sql", "status": "ERROR", "execution_time": 2.432640552520752, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'ENGAGEMENT_ID'\r\n      )\r\n}}\r\n\r\nWith Engagement AS(\r\n    select *  from {{ ref('Stg_Engagement') }}     \r\n),Dim_Engagement AS(\r\n SELECT\r\n   {{ dbt_utils.surrogate_key('ENGAGEMENT_ID') }} AS ENGAGEMENT_ID,\r\n   Source_ID ,\r\n   Source_type , \r\n   OWNER_ID as employee_id,\r\n   TYPE,\r\n   cast (CREATED_AT as date) AS initial_create_dt,\r\n   cast (LAST_UPDATED as date) AS LAST_UPDATED,\r\n   ACTIVE AS  Is_active,\r\n   'D_ENGAGEMENT_DIM_LOAD' AS DW_SESSION_NM,\r\n   {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n  FROM\r\n      Engagement \r\n)\r\n\r\nselect * from Dim_Engagement", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Engagement"], "unique_id": "model.sales_dataflo.Dim_Engagement", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Engagement.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Engagement.sql", "name": "Dim_Engagement", "resource_type": "model", "alias": "Dim_Engagement", "checksum": {"name": "sha256", "checksum": "14acfc702708da9c18c832bd27558ddac3c6bf3c4965b1ef354d6df2f5d6c142"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "ENGAGEMENT_ID"}, "tags": [], "refs": [["Stg_Engagement"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Engagement"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Engagement.sql", "deferred": false, "compiled_sql": "\n\n\n\nWith Engagement AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Engagement     \n),Dim_Engagement AS(\n SELECT\n   md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n)) AS ENGAGEMENT_ID,\n   Source_ID ,\n   Source_type , \n   OWNER_ID as employee_id,\n   TYPE,\n   cast (CREATED_AT as date) AS initial_create_dt,\n   cast (LAST_UPDATED as date) AS LAST_UPDATED,\n   ACTIVE AS  Is_active,\n   'D_ENGAGEMENT_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      Engagement \n)\n\nselect * from Dim_Engagement", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWith Engagement AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Engagement     \n),Dim_Engagement AS(\n SELECT\n   md5(cast(\n    \n    coalesce(cast(ENGAGEMENT_ID as \n    varchar\n), '')\n\n as \n    varchar\n)) AS ENGAGEMENT_ID,\n   Source_ID ,\n   Source_type , \n   OWNER_ID as employee_id,\n   TYPE,\n   cast (CREATED_AT as date) AS initial_create_dt,\n   cast (LAST_UPDATED as date) AS LAST_UPDATED,\n   ACTIVE AS  Is_active,\n   'D_ENGAGEMENT_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      Engagement \n)\n\nselect * from Dim_Engagement"}, "error": null, "status": "SUCCESS 4374", "execution_time": 5.006661415100098, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:36.635076Z", "completed_at": "2021-05-19T00:59:36.664821Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:36.665048Z", "completed_at": "2021-05-19T00:59:41.204016Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Events_Overview') }}\r\n  ),\r\nDIM_EVENTS_OVERVIEW as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        EVENT_CATEGORY,\r\n        EVENT_VALUE,\r\n        TOTAL_EVENTS,\r\n        SESSIONS_WITH_EVENT,\r\n        EVENTS_PER_SESSION_WITH_EVENT,\r\n        AVG_EVENT_VALUE,\r\n        UNIQUE_EVENTS,\r\n        Source_type,\r\n        'D_EVENTS_OVERVIEW_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_EVENTS_OVERVIEW", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Events_Overview"], "unique_id": "model.sales_dataflo.Dim_Events_Overview", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Events_Overview.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Events_Overview.sql", "name": "Dim_Events_Overview", "resource_type": "model", "alias": "Dim_Events_Overview", "checksum": {"name": "sha256", "checksum": "ef6ce5a271ebe61e0fb87e3e88e45828eec90a37ad2af9df292c8cf20299048f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Events_Overview"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Events_Overview"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Events_Overview.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Events_Overview\n  ),\nDIM_EVENTS_OVERVIEW as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        EVENT_CATEGORY,\n        EVENT_VALUE,\n        TOTAL_EVENTS,\n        SESSIONS_WITH_EVENT,\n        EVENTS_PER_SESSION_WITH_EVENT,\n        AVG_EVENT_VALUE,\n        UNIQUE_EVENTS,\n        Source_type,\n        'D_EVENTS_OVERVIEW_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_EVENTS_OVERVIEW", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Events_Overview\n  ),\nDIM_EVENTS_OVERVIEW as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        EVENT_CATEGORY,\n        EVENT_VALUE,\n        TOTAL_EVENTS,\n        SESSIONS_WITH_EVENT,\n        EVENTS_PER_SESSION_WITH_EVENT,\n        AVG_EVENT_VALUE,\n        UNIQUE_EVENTS,\n        Source_type,\n        'D_EVENTS_OVERVIEW_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_EVENTS_OVERVIEW"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3266963958740234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:41.644409Z", "completed_at": "2021-05-19T00:59:41.670972Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:41.671211Z", "completed_at": "2021-05-19T00:59:43.541033Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Goal_Conversions') }}\r\n  ),\r\nDIM_GOAL_CONVERSIONS as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        GOAL_COMPLETION_LOCATION,\r\n        GOAL_PREVIOUS_STEP_1,\r\n        GOAL_PREVIOUS_STEP_2,\r\n        GOAL_PREVIOUS_STEP_3,\r\n        GOAL_VALUE_ALL,\r\n        GOAL_COMPLETIONS_ALL,\r\n        GOAL_STARTS_ALL,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        GOAL_ABANDON_RATE_ALL,\r\n        GOAL_ABANDONS_ALL,\r\n        GOAL_VALUE_PER_SESSION,\r\n        Source_type,\r\n        'D_GOAL_CONVERSIONS_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_GOAL_CONVERSIONS", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Goal_Conversions"], "unique_id": "model.sales_dataflo.Dim_Goal_Conversions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Goal_Conversions.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Goal_Conversions.sql", "name": "Dim_Goal_Conversions", "resource_type": "model", "alias": "Dim_Goal_Conversions", "checksum": {"name": "sha256", "checksum": "34a7968b34805398fe742fa8b93d02ddbf8c2c430d88b90fb717bc4a8c6bff2d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Goal_Conversions"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Goal_Conversions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Goal_Conversions.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Goal_Conversions\n  ),\nDIM_GOAL_CONVERSIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        GOAL_COMPLETION_LOCATION,\n        GOAL_PREVIOUS_STEP_1,\n        GOAL_PREVIOUS_STEP_2,\n        GOAL_PREVIOUS_STEP_3,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDON_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n        Source_type,\n        'D_GOAL_CONVERSIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_GOAL_CONVERSIONS", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Goal_Conversions\n  ),\nDIM_GOAL_CONVERSIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        GOAL_COMPLETION_LOCATION,\n        GOAL_PREVIOUS_STEP_1,\n        GOAL_PREVIOUS_STEP_2,\n        GOAL_PREVIOUS_STEP_3,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDON_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n        Source_type,\n        'D_GOAL_CONVERSIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_GOAL_CONVERSIONS"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.540449619293213, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:43.973670Z", "completed_at": "2021-05-19T00:59:44.002329Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:44.002584Z", "completed_at": "2021-05-19T00:59:46.086048Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Page_Tracking') }}\r\n  ),\r\nDIM_PAGE_TRACKING as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        PAGE_TITLE,\r\n        LANDING_PAGE_PATH,\r\n        PAGE_PATH,\r\n        EXIT_PAGE_PATH,\r\n        PAGE_VALUE,\r\n        EXIT_RATE,\r\n        TIME_ON_PAGE,\r\n        PAGEVIEWS_PER_SESSION,\r\n        UNIQUE_PAGEVIEWS,\r\n        ENTRANCE_RATE,\r\n        Source_type,\r\n        'D_PAGE_TRACKING_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_PAGE_TRACKING", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Page_Tracking"], "unique_id": "model.sales_dataflo.Dim_Page_Tracking", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Page_Tracking.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Page_Tracking.sql", "name": "Dim_Page_Tracking", "resource_type": "model", "alias": "Dim_Page_Tracking", "checksum": {"name": "sha256", "checksum": "72494e0e1a38c6c9c30839ec8d3d485cf68b7dc34d8a8d84a3ac86b47ef7b944"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Page_Tracking"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Page_Tracking"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Page_Tracking.sql", "deferred": false, "compiled_sql": "\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Page_Tracking\n  ),\nDIM_PAGE_TRACKING as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        LANDING_PAGE_PATH,\n        PAGE_PATH,\n        EXIT_PAGE_PATH,\n        PAGE_VALUE,\n        EXIT_RATE,\n        TIME_ON_PAGE,\n        PAGEVIEWS_PER_SESSION,\n        UNIQUE_PAGEVIEWS,\n        ENTRANCE_RATE,\n        Source_type,\n        'D_PAGE_TRACKING_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE_TRACKING", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Page_Tracking\n  ),\nDIM_PAGE_TRACKING as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        LANDING_PAGE_PATH,\n        PAGE_PATH,\n        EXIT_PAGE_PATH,\n        PAGE_VALUE,\n        EXIT_RATE,\n        TIME_ON_PAGE,\n        PAGEVIEWS_PER_SESSION,\n        UNIQUE_PAGEVIEWS,\n        ENTRANCE_RATE,\n        Source_type,\n        'D_PAGE_TRACKING_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE_TRACKING"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.309400796890259, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:46.516692Z", "completed_at": "2021-05-19T00:59:46.544017Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:46.544249Z", "completed_at": "2021-05-19T00:59:48.401852Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Session') }}\r\n  ),\r\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        SESSION_DURATION_BUCKET,\r\n        USER_TYPE,\r\n        HITS,\r\n        SESSIONS,\r\n        SESSIONS_PER_USER,\r\n        AVG_SESSION_DURATION,\r\n        BOUNCES,\r\n        SESSION_DURATION,\r\n        BOUNCE_RATE,\r\n        Source_type,\r\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Session"], "unique_id": "model.sales_dataflo.Dim_Session", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Session.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Session.sql", "name": "Dim_Session", "resource_type": "model", "alias": "Dim_Session", "checksum": {"name": "sha256", "checksum": "477ee6e61aebd81b4c4c72347545a00e8eef0f36f447cee00111720b231011e6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Session"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Session"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Session.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Session\n  ),\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        SESSION_DURATION_BUCKET,\n        USER_TYPE,\n        HITS,\n        SESSIONS,\n        SESSIONS_PER_USER,\n        AVG_SESSION_DURATION,\n        BOUNCES,\n        SESSION_DURATION,\n        BOUNCE_RATE,\n        Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Session\n  ),\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        SESSION_DURATION_BUCKET,\n        USER_TYPE,\n        HITS,\n        SESSIONS,\n        SESSIONS_PER_USER,\n        AVG_SESSION_DURATION,\n        BOUNCES,\n        SESSION_DURATION,\n        BOUNCE_RATE,\n        Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3239033222198486, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:48.828691Z", "completed_at": "2021-05-19T00:59:48.854034Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:48.854286Z", "completed_at": "2021-05-19T00:59:50.729627Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Site_Rept_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Site_Report_By_Site') }}\r\n  ),\r\nDIM_SITE as (\r\n      select\r\n        Site_Rept_ID,\r\n        COUNTRY,\r\n        DATE as Date_day,\r\n        DEVICE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        Source_type as Platform,\r\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_SITE", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GSC", "Dim_Site"], "unique_id": "model.sales_dataflo.Dim_Site", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GSC/Dim_Site.sql", "original_file_path": "ETL/Target/Tables/GSC/Dim_Site.sql", "name": "Dim_Site", "resource_type": "model", "alias": "Dim_Site", "checksum": {"name": "sha256", "checksum": "fd302f68bad434c7149cd68dcbdf7741e38cc4d9b629267d2217f37b600b1d07"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Site_Rept_ID"}, "tags": [], "refs": [["Stg_Site_Report_By_Site"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Site_Report_By_Site"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GSC/Dim_Site.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Site_Report_By_Site\n  ),\nDIM_SITE as (\n      select\n        Site_Rept_ID,\n        COUNTRY,\n        DATE as Date_day,\n        DEVICE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SITE", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Site_Report_By_Site\n  ),\nDIM_SITE as (\n      select\n        Site_Rept_ID,\n        COUNTRY,\n        DATE as Date_day,\n        DEVICE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SITE"}, "error": null, "status": "SUCCESS 9424", "execution_time": 5.050570011138916, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:51.155179Z", "completed_at": "2021-05-19T00:59:51.184776Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:51.185003Z", "completed_at": "2021-05-19T00:59:55.768347Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Social_Media_Acquisitions') }}\r\n  ),\r\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        SOCIAL_NETWORK,\r\n        SESSIONS,\r\n        NEW_USERS,\r\n        AVG_SESSION_DURATION,\r\n        TRANSACTION_REVENUE,\r\n        PAGEVIEWS_PER_SESSION,\r\n        TRANSACTIONS,\r\n        BOUNCE_RATE,\r\n        PAGEVIEWS,\r\n        PERCENT_NEW_SESSIONS,\r\n        TRANSACTIONS_PER_SESSION,\r\n        Source_type,\r\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Social_Media_Acquisitions"], "unique_id": "model.sales_dataflo.Dim_Social_Media_Acquisitions", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Social_Media_Acquisitions.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Social_Media_Acquisitions.sql", "name": "Dim_Social_Media_Acquisitions", "resource_type": "model", "alias": "Dim_Social_Media_Acquisitions", "checksum": {"name": "sha256", "checksum": "718aa677ee941de2e336909b2196e526146bf75e9e722d213971c09f5a11d07a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Social_Media_Acquisitions"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Social_Media_Acquisitions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Social_Media_Acquisitions.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Social_Media_Acquisitions\n  ),\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        SOCIAL_NETWORK,\n        SESSIONS,\n        NEW_USERS,\n        AVG_SESSION_DURATION,\n        TRANSACTION_REVENUE,\n        PAGEVIEWS_PER_SESSION,\n        TRANSACTIONS,\n        BOUNCE_RATE,\n        PAGEVIEWS,\n        PERCENT_NEW_SESSIONS,\n        TRANSACTIONS_PER_SESSION,\n        Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Social_Media_Acquisitions\n  ),\nDIM_SOCIAL_MEDIA_ACQUISITIONS as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        SOCIAL_NETWORK,\n        SESSIONS,\n        NEW_USERS,\n        AVG_SESSION_DURATION,\n        TRANSACTION_REVENUE,\n        PAGEVIEWS_PER_SESSION,\n        TRANSACTIONS,\n        BOUNCE_RATE,\n        PAGEVIEWS,\n        PERCENT_NEW_SESSIONS,\n        TRANSACTIONS_PER_SESSION,\n        Source_type,\n        'D_SOCIAL_MEDIA_ACQUISITIONS_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SOCIAL_MEDIA_ACQUISITIONS"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.536604881286621, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:56.208339Z", "completed_at": "2021-05-19T00:59:56.233601Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:56.233858Z", "completed_at": "2021-05-19T00:59:58.318097Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Adwords_Keyword') }}\r\n  ),\r\nDIM_ADWORDS_KEYWORD as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        KEYWORD,\r\n        GOAL_VALUE_ALL,\r\n        SESSIONS,\r\n        GOAL_COMPLETIONS_ALL,\r\n        PAGEVIEWS_PER_SESSION,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        USERS,\r\n        BOUNCE_RATE,\r\n        AD_CLICKS,\r\n        AD_COST,\r\n        CPC,\r\n        Source_type,\r\n        'D_ADWORDS_KEYWORD_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_ADWORDS_KEYWORD", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Adwords_Keyword"], "unique_id": "model.sales_dataflo.Dim_Adwords_Keyword", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Adwords_Keyword.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Adwords_Keyword.sql", "name": "Dim_Adwords_Keyword", "resource_type": "model", "alias": "Dim_Adwords_Keyword", "checksum": {"name": "sha256", "checksum": "83ac8b85fb16292783c22d289c5ac8ce7977bb1b837f1f5f1caf514fe511488b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Adwords_Keyword"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Adwords_Keyword"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Adwords_Keyword.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Adwords_Keyword\n  ),\nDIM_ADWORDS_KEYWORD as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        KEYWORD,\n        GOAL_VALUE_ALL,\n        SESSIONS,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        AD_CLICKS,\n        AD_COST,\n        CPC,\n        Source_type,\n        'D_ADWORDS_KEYWORD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ADWORDS_KEYWORD", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Adwords_Keyword\n  ),\nDIM_ADWORDS_KEYWORD as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        KEYWORD,\n        GOAL_VALUE_ALL,\n        SESSIONS,\n        GOAL_COMPLETIONS_ALL,\n        PAGEVIEWS_PER_SESSION,\n        GOAL_CONVERSION_RATE_ALL,\n        USERS,\n        BOUNCE_RATE,\n        AD_CLICKS,\n        AD_COST,\n        CPC,\n        Source_type,\n        'D_ADWORDS_KEYWORD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ADWORDS_KEYWORD"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.309298515319824, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T00:59:58.747520Z", "completed_at": "2021-05-19T00:59:58.773696Z"}, {"name": "execute", "started_at": "2021-05-19T00:59:58.773926Z", "completed_at": "2021-05-19T01:00:00.635157Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with report as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Basic_Ad') }}\r\n\r\n), creatives as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Creative_History_FB') }}\r\n\r\n), accounts as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Account_History_FB') }}\r\n    --where is_most_recent_record = true\r\n\r\n), ads as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Ad_History') }}\r\n   -- where is_most_recent_record = true\r\n\r\n), ad_sets as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Ad_Set_History') }}\r\n   -- where is_most_recent_record = true\r\n\r\n), campaigns as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Campaign_History_FB') }}\r\n   -- where is_most_recent_record = true\r\n\r\n), joined as (\r\n\r\n    select\r\n        report.day as date_day,\r\n        report.Source_type,\r\n        accounts.account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_sets.ad_set_id,\r\n        ad_sets.ad_set_name,\r\n        ads.ad_id,\r\n        ads.ad_name,\r\n        creatives.creative_id,\r\n        creatives.creative_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend\r\n    from report\r\n    left join ads \r\n        on cast(report.ad_id as {{ dbt_utils.type_bigint() }}) = cast(ads.ad_id as {{ dbt_utils.type_bigint() }})\r\n    left join creatives\r\n        on cast(ads.creative_id as {{ dbt_utils.type_bigint() }}) = cast(creatives.creative_id as {{ dbt_utils.type_bigint() }})\r\n    left join ad_sets\r\n        on cast(ads.ad_set_id as {{ dbt_utils.type_bigint() }}) = cast(ad_sets.ad_set_id as {{ dbt_utils.type_bigint() }})\r\n    left join campaigns\r\n        on cast(ads.campaign_id as {{ dbt_utils.type_bigint() }}) = cast(campaigns.campaign_id as {{ dbt_utils.type_bigint() }})\r\n    left join accounts\r\n        on cast(report.account_id as {{ dbt_utils.type_bigint() }}) = cast(accounts.account_id as {{ dbt_utils.type_bigint() }})\r\n    {{ dbt_utils.group_by(19) }}\r\n)\r\n\r\nselect *\r\nfrom joined", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Ad"], "unique_id": "model.sales_dataflo.Dim_Ad", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Ad.sql", "original_file_path": "ETL/Target/Tables/Dim_Ad.sql", "name": "Dim_Ad", "resource_type": "model", "alias": "Dim_Ad", "checksum": {"name": "sha256", "checksum": "b76862576b1d5f90e6e4e2cd5a2bef019a169a846a63b3991b265e97548aff15"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Basic_Ad"], ["Stg_Creative_History_FB"], ["Stg_Account_History_FB"], ["Stg_Ad_History"], ["Stg_Ad_Set_History"], ["Stg_Campaign_History_FB"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_bigint", "macro.dbt_utils.group_by", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Stg_Basic_Ad", "model.sales_dataflo.Stg_Creative_History_FB", "model.sales_dataflo.Stg_Account_History_FB", "model.sales_dataflo.Stg_Ad_History", "model.sales_dataflo.Stg_Ad_Set_History", "model.sales_dataflo.Stg_Campaign_History_FB"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Ad.sql", "deferred": false, "compiled_sql": "with report as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Basic_Ad\n\n), creatives as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History_FB\n\n), accounts as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History_FB\n    --where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_History\n   -- where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Set_History\n   -- where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History_FB\n   -- where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.day as date_day,\n        report.Source_type,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as \n    bigint\n) = cast(ads.ad_id as \n    bigint\n)\n    left join creatives\n        on cast(ads.creative_id as \n    bigint\n) = cast(creatives.creative_id as \n    bigint\n)\n    left join ad_sets\n        on cast(ads.ad_set_id as \n    bigint\n) = cast(ad_sets.ad_set_id as \n    bigint\n)\n    left join campaigns\n        on cast(ads.campaign_id as \n    bigint\n) = cast(campaigns.campaign_id as \n    bigint\n)\n    left join accounts\n        on cast(report.account_id as \n    bigint\n) = cast(accounts.account_id as \n    bigint\n)\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with report as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Basic_Ad\n\n), creatives as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Creative_History_FB\n\n), accounts as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Account_History_FB\n    --where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_History\n   -- where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Set_History\n   -- where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Campaign_History_FB\n   -- where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.day as date_day,\n        report.Source_type,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as \n    bigint\n) = cast(ads.ad_id as \n    bigint\n)\n    left join creatives\n        on cast(ads.creative_id as \n    bigint\n) = cast(creatives.creative_id as \n    bigint\n)\n    left join ad_sets\n        on cast(ads.ad_set_id as \n    bigint\n) = cast(ad_sets.ad_set_id as \n    bigint\n)\n    left join campaigns\n        on cast(ads.campaign_id as \n    bigint\n) = cast(campaigns.campaign_id as \n    bigint\n)\n    left join accounts\n        on cast(report.account_id as \n    bigint\n) = cast(accounts.account_id as \n    bigint\n)\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n)\n\nselect *\nfrom joined"}, "error": "Database Error in model Dim_Ad (ETL/Target/Tables/Dim_Ad.sql)\n  000904 (42000): SQL compilation error: error line 58 at position 9\n  invalid identifier 'ADS.AD_ID'\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Dim_Ad.sql", "status": "ERROR", "execution_time": 2.3483781814575195, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Geo_Network') }}\r\n  ),\r\nDIM_GEO_NETWORK as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        CONTINENT,\r\n        COUNTRY,\r\n        CITY,\r\n        METRO,\r\n        REGION,\r\n        NETWORK_LOCATION,\r\n        SESSIONS,\r\n        USERS,\r\n        Source_type,\r\n        'D_GEO_NETWORK_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_GEO_NETWORK", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Geo_Network"], "unique_id": "model.sales_dataflo.Dim_Geo_Network", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Geo_Network.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Geo_Network.sql", "name": "Dim_Geo_Network", "resource_type": "model", "alias": "Dim_Geo_Network", "checksum": {"name": "sha256", "checksum": "9693117d1e0839c6b657813cb489603c22df7c53b50a88985e62651f5395ad17"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Geo_Network"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Geo_Network"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Geo_Network.sql", "deferred": false, "compiled_sql": "\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Geo_Network\n  ),\nDIM_GEO_NETWORK as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        CONTINENT,\n        COUNTRY,\n        CITY,\n        METRO,\n        REGION,\n        NETWORK_LOCATION,\n        SESSIONS,\n        USERS,\n        Source_type,\n        'D_GEO_NETWORK_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_GEO_NETWORK", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Geo_Network\n  ),\nDIM_GEO_NETWORK as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        CONTINENT,\n        COUNTRY,\n        CITY,\n        METRO,\n        REGION,\n        NETWORK_LOCATION,\n        SESSIONS,\n        USERS,\n        Source_type,\n        'D_GEO_NETWORK_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_GEO_NETWORK"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.329669237136841, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:03.410090Z", "completed_at": "2021-05-19T01:00:03.439386Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:03.439622Z", "completed_at": "2021-05-19T01:00:05.302422Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Site_Rept_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Keyword_Site_Report_By_Site') }}\r\n  ),\r\nDIM_SITE as (\r\n      select\r\n        Site_Rept_ID,\r\n        COUNTRY,\r\n        DATE  as Date_day,\r\n        DEVICE,\r\n        KEYWORD,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        Source_type as platform,\r\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_SITE", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GSC", "Dim_Keyword_Site"], "unique_id": "model.sales_dataflo.Dim_Keyword_Site", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GSC/Dim_Keyword_Site.sql", "original_file_path": "ETL/Target/Tables/GSC/Dim_Keyword_Site.sql", "name": "Dim_Keyword_Site", "resource_type": "model", "alias": "Dim_Keyword_Site", "checksum": {"name": "sha256", "checksum": "414aa38f4a1da08fb9cbe30e9cdcbacf2a259765fbcae1c4f2db8125b89522d8"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Site_Rept_ID"}, "tags": [], "refs": [["Stg_Keyword_Site_Report_By_Site"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Keyword_Site_Report_By_Site"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GSC/Dim_Keyword_Site.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Keyword_Site_Report_By_Site\n  ),\nDIM_SITE as (\n      select\n        Site_Rept_ID,\n        COUNTRY,\n        DATE  as Date_day,\n        DEVICE,\n        KEYWORD,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SITE", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Keyword_Site_Report_By_Site\n  ),\nDIM_SITE as (\n      select\n        Site_Rept_ID,\n        COUNTRY,\n        DATE  as Date_day,\n        DEVICE,\n        KEYWORD,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_SITE"}, "error": null, "status": "SUCCESS 17261", "execution_time": 5.445097923278809, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:05.742279Z", "completed_at": "2021-05-19T01:00:05.770358Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:05.770599Z", "completed_at": "2021-05-19T01:00:10.754352Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Page_Rept_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Page_Report') }}\r\n  ),\r\nDIM_PAGE as (\r\n      select\r\n        Page_Rept_ID,\r\n        COUNTRY,\r\n        DATE  as Date_day,\r\n        DEVICE,\r\n        PAGE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        Source_type as Platform,\r\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_PAGE", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GSC", "Dim_Page"], "unique_id": "model.sales_dataflo.Dim_Page", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GSC/Dim_Page.sql", "original_file_path": "ETL/Target/Tables/GSC/Dim_Page.sql", "name": "Dim_Page", "resource_type": "model", "alias": "Dim_Page", "checksum": {"name": "sha256", "checksum": "912dab8b05ed18af8b7df30cb1748d2e18a36d42ddaf7c7ccc9effd423627633"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Page_Rept_ID"}, "tags": [], "refs": [["Stg_Page_Report"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Page_Report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GSC/Dim_Page.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Page_Report\n  ),\nDIM_PAGE as (\n      select\n        Page_Rept_ID,\n        COUNTRY,\n        DATE  as Date_day,\n        DEVICE,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Page_Report\n  ),\nDIM_PAGE as (\n      select\n        Page_Rept_ID,\n        COUNTRY,\n        DATE  as Date_day,\n        DEVICE,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE"}, "error": null, "status": "SUCCESS 11459", "execution_time": 5.508190393447876, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:11.189904Z", "completed_at": "2021-05-19T01:00:11.218595Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:11.218892Z", "completed_at": "2021-05-19T01:00:16.261688Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Platform_Device') }}\r\n  ),\r\nDIM_PLATFORM_DEVICE as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        MOBILE_DEVICE_BRANDING,\r\n        DEVICE_CATEGORY,\r\n        MOBILE_DEVICE_MODEL,\r\n        MOBILE_INPUT_SELECTOR,\r\n        OPERATING_SYSTEM,\r\n        DATA_SOURCE,\r\n        GOAL_VALUE_ALL,\r\n        GOAL_COMPLETIONS_ALL,\r\n        GOAL_STARTS_ALL,\r\n        GOAL_CONVERSION_RATE_ALL,\r\n        GOAL_ABANDONS_ALL,\r\n        GOAL_VALUE_PER_SESSION,\r\n        Source_type,\r\n        'D_PLATFORM_DEVICE_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_PLATFORM_DEVICE", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Platform_Device"], "unique_id": "model.sales_dataflo.Dim_Platform_Device", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Platform_Device.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Platform_Device.sql", "name": "Dim_Platform_Device", "resource_type": "model", "alias": "Dim_Platform_Device", "checksum": {"name": "sha256", "checksum": "ff936b12f7d0b28d544ee64863389287772f889373468a98fdc49ce452e4be2c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Platform_Device"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Platform_Device"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Platform_Device.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Platform_Device\n  ),\nDIM_PLATFORM_DEVICE as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        MOBILE_DEVICE_BRANDING,\n        DEVICE_CATEGORY,\n        MOBILE_DEVICE_MODEL,\n        MOBILE_INPUT_SELECTOR,\n        OPERATING_SYSTEM,\n        DATA_SOURCE,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n        Source_type,\n        'D_PLATFORM_DEVICE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PLATFORM_DEVICE", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Platform_Device\n  ),\nDIM_PLATFORM_DEVICE as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        MOBILE_DEVICE_BRANDING,\n        DEVICE_CATEGORY,\n        MOBILE_DEVICE_MODEL,\n        MOBILE_INPUT_SELECTOR,\n        OPERATING_SYSTEM,\n        DATA_SOURCE,\n        GOAL_VALUE_ALL,\n        GOAL_COMPLETIONS_ALL,\n        GOAL_STARTS_ALL,\n        GOAL_CONVERSION_RATE_ALL,\n        GOAL_ABANDONS_ALL,\n        GOAL_VALUE_PER_SESSION,\n        Source_type,\n        'D_PLATFORM_DEVICE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PLATFORM_DEVICE"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5422415733337402, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:16.700753Z", "completed_at": "2021-05-19T01:00:16.732912Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:16.733281Z", "completed_at": "2021-05-19T01:00:18.817254Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Traffic') }}\r\n  ),\r\nDIM_TRAFFIC as (\r\n      select\r\n        ID,\r\n        DATE,\r\n        PROFILE,\r\n        PAGE_TITLE,\r\n        PAGEVIEWS,\r\n        AVG_TIME_ON_PAGE,\r\n        PAGE_VALUE,\r\n        UNIQUE_PAGEVIEWS,\r\n        EXIT_RATE,\r\n        ENTRANCES,\r\n        USERS,\r\n        BOUNCE_RATE, \r\n        Source_type,\r\n        'D_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_TRAFFIC", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GA", "Dim_Traffic"], "unique_id": "model.sales_dataflo.Dim_Traffic", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GA/Dim_Traffic.sql", "original_file_path": "ETL/Target/Tables/GA/Dim_Traffic.sql", "name": "Dim_Traffic", "resource_type": "model", "alias": "Dim_Traffic", "checksum": {"name": "sha256", "checksum": "f607dde57376454397edbb8065b68e2104cbb6bfbf05cf9649229cc81fbc780f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Traffic"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Traffic"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GA/Dim_Traffic.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Traffic\n  ),\nDIM_TRAFFIC as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        PAGEVIEWS,\n        AVG_TIME_ON_PAGE,\n        PAGE_VALUE,\n        UNIQUE_PAGEVIEWS,\n        EXIT_RATE,\n        ENTRANCES,\n        USERS,\n        BOUNCE_RATE, \n        Source_type,\n        'D_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_TRAFFIC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Traffic\n  ),\nDIM_TRAFFIC as (\n      select\n        ID,\n        DATE,\n        PROFILE,\n        PAGE_TITLE,\n        PAGEVIEWS,\n        AVG_TIME_ON_PAGE,\n        PAGE_VALUE,\n        UNIQUE_PAGEVIEWS,\n        EXIT_RATE,\n        ENTRANCES,\n        USERS,\n        BOUNCE_RATE, \n        Source_type,\n        'D_TRAFFIC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_TRAFFIC"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3924014568328857, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:19.245536Z", "completed_at": "2021-05-19T01:00:19.329777Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:19.330074Z", "completed_at": "2021-05-19T01:00:21.214955Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Page_Rept_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ ref('Stg_Keyword_Page_Report') }}\r\n  ),\r\nDIM_PAGE as (\r\n      select\r\n        Page_Rept_ID,\r\n        COUNTRY,\r\n        DATE as Date_day,\r\n        DEVICE,\r\n        KEYWORD,\r\n        PAGE,\r\n        SEARCH_TYPE,\r\n        SITE,\r\n        CLICKS,\r\n        IMPRESSIONS,\r\n        CTR,\r\n        POSITION,\r\n        _FIVETRAN_SYNCED,\r\n        Source_type as Platform,\r\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_PAGE", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "GSC", "Dim_Keyword_Page"], "unique_id": "model.sales_dataflo.Dim_Keyword_Page", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/GSC/Dim_Keyword_Page.sql", "original_file_path": "ETL/Target/Tables/GSC/Dim_Keyword_Page.sql", "name": "Dim_Keyword_Page", "resource_type": "model", "alias": "Dim_Keyword_Page", "checksum": {"name": "sha256", "checksum": "1c459e32f070dfe5ebd6d7ae9e259218884ad3a02668d303a13539770f0a1dcc"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Page_Rept_ID"}, "tags": [], "refs": [["Stg_Keyword_Page_Report"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Keyword_Page_Report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/GSC/Dim_Keyword_Page.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Keyword_Page_Report\n  ),\nDIM_PAGE as (\n      select\n        Page_Rept_ID,\n        COUNTRY,\n        DATE as Date_day,\n        DEVICE,\n        KEYWORD,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Keyword_Page_Report\n  ),\nDIM_PAGE as (\n      select\n        Page_Rept_ID,\n        COUNTRY,\n        DATE as Date_day,\n        DEVICE,\n        KEYWORD,\n        PAGE,\n        SEARCH_TYPE,\n        SITE,\n        CLICKS,\n        IMPRESSIONS,\n        CTR,\n        POSITION,\n        _FIVETRAN_SYNCED,\n        Source_type as Platform,\n        'D_PAGE_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_PAGE"}, "error": null, "status": "SUCCESS 17379", "execution_time": 5.264535188674927, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:21.640493Z", "completed_at": "2021-05-19T01:00:21.668314Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:21.668556Z", "completed_at": "2021-05-19T01:00:26.475727Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Opportunity_Calc_id'\r\n      )\r\n}}\r\n\r\nWITH opportunity_history AS (\r\n       select *  from {{ ref('Stg_Opportunity_History') }} \r\n),opportunity as(\r\n        select *  from {{ ref('Stg_Opportunity') }} \r\n),Dim_Opportunity_Calc as(\r\n    SELECT\r\n        opportunity_history.Opportunity_Calc_id as Opportunity_Calc_id,\r\n        opportunity_history.OPPORTUNITY_ID as opp_calc_stage_id,\r\n        opportunity_history.CREATED_DATE as opp_calc_stage_start_datetime,\r\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then NULL \r\n        else opportunity_history.SYSTEM_MODSTAMP end as opp_calc_stage_end_datetime,\r\n        opportunity_history.STAGE_NAME as opp_calc_stage_name,\r\n        opportunity_history.AMOUNT as opp_calc_AMOUNT,\r\n        opportunity_history.EXPECTED_REVENUE  as opp_calc_EXPECTED_REVENUE,\r\n        opportunity_history.CLOSE_DATE  as opp_calc_CLOSE_DATE,\r\n        opportunity_history.PROBABILITY  as opp_calc_PROBABILITY,\r\n        opportunity_history.FORECAST_CATEGORY  as opp_calc_FORECAST_CATEGORY,\r\n        --opportunity_history.CURRENCY_ISO_CODE  as opp_calc_CURRENCY_ISO_CODE,\r\n        opportunity_history.IS_DELETED as opp_calc_IS_DELETED,\r\n        opportunity_history.PREV_AMOUNT  as opp_calc_PREV_AMOUNT,\r\n        opportunity_history.PREV_CLOSE_DATE  as opp_calc_PREV_CLOSE_DATE,\r\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then 'Y' else 'N' end  as Active_Flag,\r\n        opportunity_history.Source_type AS Source_type,\r\n        'D_OPPORTUNITY_CALC_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n        FROM\r\n          opportunity join opportunity_history \r\n          on opportunity_history.OPPORTUNITY_ID = opportunity.Source_ID \r\n          and opportunity_history.Source_type = opportunity.Source_type  \r\n)  \r\n \r\nselect * from Dim_Opportunity_Calc", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Sales", "Dim_Opportunity_Calc"], "unique_id": "model.sales_dataflo.Dim_Opportunity_Calc", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Sales/Dim_Opportunity_Calc.sql", "original_file_path": "ETL/Target/Tables/Sales/Dim_Opportunity_Calc.sql", "name": "Dim_Opportunity_Calc", "resource_type": "model", "alias": "Dim_Opportunity_Calc", "checksum": {"name": "sha256", "checksum": "086dcd07c16a815df7152e87f2228c889edaf0234d800af96f2446128634e145"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Opportunity_Calc_id"}, "tags": [], "refs": [["Stg_Opportunity_History"], ["Stg_Opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Stg_Opportunity_History", "model.sales_dataflo.Stg_Opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Sales/Dim_Opportunity_Calc.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH opportunity_history AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_History \n),opportunity as(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity \n),Dim_Opportunity_Calc as(\n    SELECT\n        opportunity_history.Opportunity_Calc_id as Opportunity_Calc_id,\n        opportunity_history.OPPORTUNITY_ID as opp_calc_stage_id,\n        opportunity_history.CREATED_DATE as opp_calc_stage_start_datetime,\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then NULL \n        else opportunity_history.SYSTEM_MODSTAMP end as opp_calc_stage_end_datetime,\n        opportunity_history.STAGE_NAME as opp_calc_stage_name,\n        opportunity_history.AMOUNT as opp_calc_AMOUNT,\n        opportunity_history.EXPECTED_REVENUE  as opp_calc_EXPECTED_REVENUE,\n        opportunity_history.CLOSE_DATE  as opp_calc_CLOSE_DATE,\n        opportunity_history.PROBABILITY  as opp_calc_PROBABILITY,\n        opportunity_history.FORECAST_CATEGORY  as opp_calc_FORECAST_CATEGORY,\n        --opportunity_history.CURRENCY_ISO_CODE  as opp_calc_CURRENCY_ISO_CODE,\n        opportunity_history.IS_DELETED as opp_calc_IS_DELETED,\n        opportunity_history.PREV_AMOUNT  as opp_calc_PREV_AMOUNT,\n        opportunity_history.PREV_CLOSE_DATE  as opp_calc_PREV_CLOSE_DATE,\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then 'Y' else 'N' end  as Active_Flag,\n        opportunity_history.Source_type AS Source_type,\n        'D_OPPORTUNITY_CALC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          opportunity join opportunity_history \n          on opportunity_history.OPPORTUNITY_ID = opportunity.Source_ID \n          and opportunity_history.Source_type = opportunity.Source_type  \n)  \n \nselect * from Dim_Opportunity_Calc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH opportunity_history AS (\n       select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity_History \n),opportunity as(\n        select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Opportunity \n),Dim_Opportunity_Calc as(\n    SELECT\n        opportunity_history.Opportunity_Calc_id as Opportunity_Calc_id,\n        opportunity_history.OPPORTUNITY_ID as opp_calc_stage_id,\n        opportunity_history.CREATED_DATE as opp_calc_stage_start_datetime,\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then NULL \n        else opportunity_history.SYSTEM_MODSTAMP end as opp_calc_stage_end_datetime,\n        opportunity_history.STAGE_NAME as opp_calc_stage_name,\n        opportunity_history.AMOUNT as opp_calc_AMOUNT,\n        opportunity_history.EXPECTED_REVENUE  as opp_calc_EXPECTED_REVENUE,\n        opportunity_history.CLOSE_DATE  as opp_calc_CLOSE_DATE,\n        opportunity_history.PROBABILITY  as opp_calc_PROBABILITY,\n        opportunity_history.FORECAST_CATEGORY  as opp_calc_FORECAST_CATEGORY,\n        --opportunity_history.CURRENCY_ISO_CODE  as opp_calc_CURRENCY_ISO_CODE,\n        opportunity_history.IS_DELETED as opp_calc_IS_DELETED,\n        opportunity_history.PREV_AMOUNT  as opp_calc_PREV_AMOUNT,\n        opportunity_history.PREV_CLOSE_DATE  as opp_calc_PREV_CLOSE_DATE,\n        case when opportunity_history.SYSTEM_MODSTAMP = opportunity_history.CREATED_DATE then 'Y' else 'N' end  as Active_Flag,\n        opportunity_history.Source_type AS Source_type,\n        'D_OPPORTUNITY_CALC_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          opportunity join opportunity_history \n          on opportunity_history.OPPORTUNITY_ID = opportunity.Source_ID \n          and opportunity_history.Source_type = opportunity.Source_type  \n)  \n \nselect * from Dim_Opportunity_Calc"}, "error": null, "status": "SUCCESS 279742", "execution_time": 9.793347358703613, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:26.908021Z", "completed_at": "2021-05-19T01:00:26.942397Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:26.942634Z", "completed_at": "2021-05-19T01:00:36.266195Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Contact') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Contact"], "unique_id": "model.sales_dataflo.VW_Contact", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Contact.sql", "original_file_path": "ETL/Target/Views/VW_Contact.sql", "name": "VW_Contact", "resource_type": "model", "alias": "VW_Contact", "checksum": {"name": "sha256", "checksum": "1c1f291bdb70ca35558ad27cde87581411af1580e9bf14144b75de2fd8954bb3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Contact.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5170738697052, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:36.703981Z", "completed_at": "2021-05-19T01:00:36.728973Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:36.729254Z", "completed_at": "2021-05-19T01:00:38.794470Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Address') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Address"], "unique_id": "model.sales_dataflo.VW_Address", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Address.sql", "original_file_path": "ETL/Target/Views/VW_Address.sql", "name": "VW_Address", "resource_type": "model", "alias": "VW_Address", "checksum": {"name": "sha256", "checksum": "f0ebbb7edc50e98cad8153165e55fcdbbde9568c33a7923946d19c6559f0f298"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Address"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Address"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Address.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Address", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Address"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.318863868713379, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:39.351159Z", "completed_at": "2021-05-19T01:00:39.380046Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:39.380297Z", "completed_at": "2021-05-19T01:00:41.240834Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Opportunity_Stage') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Opportunity_Stage"], "unique_id": "model.sales_dataflo.VW_Opportunity_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Opportunity_Stage.sql", "original_file_path": "ETL/Target/Views/VW_Opportunity_Stage.sql", "name": "VW_Opportunity_Stage", "resource_type": "model", "alias": "VW_Opportunity_Stage", "checksum": {"name": "sha256", "checksum": "9a5f130aa5caca211e8f5d343234cb9c22dba59a9f534ac607e850f61aec7c18"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Opportunity_Stage"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Opportunity_Stage"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Opportunity_Stage.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity_Stage", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity_Stage"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3958706855773926, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:41.672543Z", "completed_at": "2021-05-19T01:00:41.696750Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:41.696973Z", "completed_at": "2021-05-19T01:00:43.642564Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Opportunity') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Opportunity"], "unique_id": "model.sales_dataflo.VW_Opportunity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Opportunity.sql", "original_file_path": "ETL/Target/Views/VW_Opportunity.sql", "name": "VW_Opportunity", "resource_type": "model", "alias": "VW_Opportunity", "checksum": {"name": "sha256", "checksum": "e1b79b8223f6a0be455932747ce223658ea532919586b62d101a4010995a0221"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Opportunity.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3962905406951904, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:44.071003Z", "completed_at": "2021-05-19T01:00:44.096128Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:44.096379Z", "completed_at": "2021-05-19T01:00:46.042677Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Lead') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Lead"], "unique_id": "model.sales_dataflo.VW_Lead", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Lead.sql", "original_file_path": "ETL/Target/Views/VW_Lead.sql", "name": "VW_Lead", "resource_type": "model", "alias": "VW_Lead", "checksum": {"name": "sha256", "checksum": "62dcf4bff6ebf102e926c44b90ba9cbfd4404405f9c3146c53c79c18ccfa5320"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Lead.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.5311176776885986, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:46.470093Z", "completed_at": "2021-05-19T01:00:46.495918Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:46.496374Z", "completed_at": "2021-05-19T01:00:48.573411Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Employee') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Employee"], "unique_id": "model.sales_dataflo.VW_Employee", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Employee.sql", "original_file_path": "ETL/Target/Views/VW_Employee.sql", "name": "VW_Employee", "resource_type": "model", "alias": "VW_Employee", "checksum": {"name": "sha256", "checksum": "d3ce3a49096034105f23527148f02ffb69aed09f23971d3eb6ab61d7b0e82c23"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Employee"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Employee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Employee.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.520801305770874, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:49.003807Z", "completed_at": "2021-05-19T01:00:49.029948Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:49.030396Z", "completed_at": "2021-05-19T01:00:51.106931Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Account') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Account"], "unique_id": "model.sales_dataflo.VW_Account", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Account.sql", "original_file_path": "ETL/Target/Views/VW_Account.sql", "name": "VW_Account", "resource_type": "model", "alias": "VW_Account", "checksum": {"name": "sha256", "checksum": "70b956dd282029fc4941e66a4f34ea75840506ff718fba1f48546f17b9017c1f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Account"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Account.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3368518352508545, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:51.527020Z", "completed_at": "2021-05-19T01:00:51.554638Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:51.554938Z", "completed_at": "2021-05-19T01:00:53.436719Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n-- depends_on: {{ ref('Dim_Employee') }}\r\n-- depends_on: {{ ref('Dim_Metrics') }}\r\n-- depends_on: {{ ref('Dim_Opportunity') }}\r\n-- depends_on: {{ ref('Dim_Lead') }}\r\n-- depends_on: {{ ref('Dim_Account') }}\r\n-- depends_on: {{ ref('Dim_Contact') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HS')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE):: DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n    ) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n\r\n    {% if  entity_type  == 'SF'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '7', '3','Dim_Lead','INDUSTRY','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '18', '3','Dim_Lead','LEAD_SOURCE','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '19', '3','Dim_Lead','STATUS','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '28', '5','Dim_Account','EMPLOYEE_ID','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '30', '3','Dim_Lead','EMPLOYEE_ID','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '31', '3','Dim_Lead','LEAD_CONTACT_ADDRESS','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '32', '2','Dim_Opportunity','OPPORTUNITY_TYPE','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),                                       \r\n                   ]  %}\r\n                    (\r\n                        {{ metrics }} as\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '7', '3','Dim_Lead','INDUSTRY','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '18', '3','Dim_Lead','LEAD_SOURCE','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '19', '3','Dim_Lead','STATUS','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '28', '5','Dim_Account','Account_Type','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '30', '3','Dim_Lead','EMPLOYEE_ID','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '31', '3','Dim_Lead','LEAD_CONTACT_ADDRESS','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '32', '2','Dim_Opportunity','OPPORTUNITY_TYPE','INITIAL_CREATE_DT')),                                       \r\n                   ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}  \r\n    {% elif entity_type  == 'HS'  %}  \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)), \r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1', '62', '1','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1','68','1','Dim_Opportunity','FORECAST_CATEGORY','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t    (run_metrics_hist_sales_segment(entity_name,'1=1', '52', '1','Dim_Opportunity','COMPETITOR','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [ (run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')), \r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1=1', '62', '1','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1','68','1','Dim_Opportunity','FORECAST_CATEGORY','INITIAL_CREATE_DT')),\r\n\t\t\t\t    (run_metrics_hist_sales_segment(entity_name,'1=1', '52', '1','Dim_Opportunity','COMPETITOR','INITIAL_CREATE_DT')),\r\n                 ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}     \r\n    {% endif -%}   \r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}     \r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Temp_Sales_Segmented"], "unique_id": "model.sales_dataflo.Temp_Sales_Segmented", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Temp_Sales_Segmented.sql", "original_file_path": "ETL/Target/Tables/Temp_Sales_Segmented.sql", "name": "Temp_Sales_Segmented", "resource_type": "model", "alias": "Temp_Sales_Segmented", "checksum": {"name": "sha256", "checksum": "90cda0a9684bd86105b6eb36b62a1f91edab29562ce031973a2d0cab799aefbb"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Metrics"], ["Dim_Opportunity"], ["Dim_Lead"], ["Dim_Account"], ["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_metrics_hist_sales_segment", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Metrics", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Temp_Sales_Segmented.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '7' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '18' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '19' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '28' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '30' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '31' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '32' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n        \n\n\n      \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('62' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '62' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('68' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(FORECAST_CATEGORY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '68' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('52' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(COMPETITOR as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '52' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '7' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '18' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '19' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '28' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '30' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '31' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '32' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n        \n\n\n      \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('62' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '62' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('68' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(FORECAST_CATEGORY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '68' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('52' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(COMPETITOR as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '52' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    "}, "error": "Database Error in model Temp_Sales_Segmented (ETL/Target/Tables/Temp_Sales_Segmented.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 221 at position 52 unexpected 'as'.\n  syntax error line 428 at position 52 unexpected 'as'.\n  syntax error line 635 at position 52 unexpected 'as'.\n  syntax error line 842 at position 52 unexpected 'as'.\n  syntax error line 1,049 at position 52 unexpected 'as'.\n  syntax error line 1,256 at position 52 unexpected 'as'.\n  syntax error line 1,463 at position 52 unexpected 'as'.\n  syntax error line 1,670 at position 52 unexpected 'as'.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Temp_Sales_Segmented.sql", "status": "ERROR", "execution_time": 5.467188358306885, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_TimeFrame') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_TimeFrame"], "unique_id": "model.sales_dataflo.VW_TimeFrame", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_TimeFrame.sql", "original_file_path": "ETL/Target/Views/VW_TimeFrame.sql", "name": "VW_TimeFrame", "resource_type": "model", "alias": "VW_TimeFrame", "checksum": {"name": "sha256", "checksum": "05c9ee70e7f7f4407cce06073f0f9ce1aa51daaa8f90ab2f1aaf4cbab5aa3359"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_TimeFrame"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_TimeFrame"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_TimeFrame.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.542509078979492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:00:59.336051Z", "completed_at": "2021-05-19T01:00:59.371019Z"}, {"name": "execute", "started_at": "2021-05-19T01:00:59.371518Z", "completed_at": "2021-05-19T01:01:01.449318Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n-- depends_on: {{ ref('Dim_Employee') }}\r\n-- depends_on: {{ ref('Dim_Metrics') }}\r\n-- depends_on: {{ ref('Dim_Opportunity') }}\r\n-- depends_on: {{ ref('Dim_Lead') }}\r\n-- depends_on: {{ ref('Dim_Account') }}\r\n-- depends_on: {{ ref('Dim_Contact') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HSS')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE):: DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n    ) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n\r\n    {% if  entity_type  == 'SF'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_perf_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(lead_to_opp_flag) = '\"'\"'TRUE'\"'\"'', '3', '4','Dim_Lead','lead_CONVERTED_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'1 = 1', '4', '4','Dim_Lead','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'1 = 1', '27', '5','Dim_Account','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'1 = 1', '29', '6','Dim_Contact','initial_create_dt',hist_strt_dt,hist_end_dt))                    \r\n                            ]  %}\r\n                    (\r\n                        {{ metrics }} \r\n                    ) \r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(lead_to_opp_flag) = '\"'\"'TRUE'\"'\"'', '3', '4','Dim_Lead','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '4', '4','Dim_Lead','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '27', '5','Dim_Account','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '29', '6','Dim_Contact','initial_create_dt'))                    \r\n                            ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}  \r\n    {% elif  entity_type  == 'HSS'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_perf_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt))\r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '79', '1','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt))\r\n                               ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt'))                    \r\n                                (run_metrics_perf_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '79', '1','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt))\r\n                                ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}        \r\n    {% endif -%}   \r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}     \r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "sales"], "unique_id": "model.sales_dataflo.sales", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/sales.sql", "original_file_path": "ETL/Target/Tables/sales.sql", "name": "sales", "resource_type": "model", "alias": "sales", "checksum": {"name": "sha256", "checksum": "5db52d0842939d205045dd2c621d7f14089ab747f65643d65f0b535905cee905"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Metrics"], ["Dim_Opportunity"], ["Dim_Lead"], ["Dim_Account"], ["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_metrics_perf_hist_sales", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Metrics", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/sales.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\nunion all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type \n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.week_START and timeframe.week_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.month_START and timeframe.month_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.QUARTER_START and timeframe.QUARTER_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n        \n        where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n        union all\n\n        SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on Emp.Emp_id = source.employee_id  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.year_START and timeframe.year_END \n          and cast(  as date) <= TimeFrameID\n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where Emp.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME\n                )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type \n                    ) \n\n                    "}, "error": "Database Error in model sales (ETL/Target/Tables/sales.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 225 at position 10 unexpected 'on'.\n  syntax error line 226 at position 40 unexpected 'between'.\n  syntax error line 229 at position 13 unexpected 'TimeFrameID'.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/sales.sql", "status": "ERROR", "execution_time": 4.525340557098389, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n-- depends_on: {{ ref('Dim_Employee') }}\r\n-- depends_on: {{ ref('Dim_Metrics') }}\r\n-- depends_on: {{ ref('Dim_Opportunity') }}\r\n-- depends_on: {{ ref('Dim_Lead') }}\r\n-- depends_on: {{ ref('Dim_Account') }}\r\n-- depends_on: {{ ref('Dim_Contact') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HS')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE):: DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n    ) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n\r\n    {% if  entity_type  == 'SF'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '7', '3','Dim_Lead','INDUSTRY','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '18', '3','Dim_Lead','LEAD_SOURCE','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '19', '3','Dim_Lead','STATUS','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '28', '5','Dim_Account','EMPLOYEE_ID','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '30', '3','Dim_Lead','EMPLOYEE_ID','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1 = 1', '31', '3','Dim_Lead','LEAD_CONTACT_ADDRESS','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1 = 1', '32', '2','Dim_Opportunity','OPPORTUNITY_TYPE','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt))                                       \r\n                   ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '7', '3','Dim_Lead','INDUSTRY','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '18', '3','Dim_Lead','LEAD_SOURCE','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '19', '3','Dim_Lead','STATUS','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '28', '5','Dim_Account','Account_Type','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '30', '3','Dim_Lead','EMPLOYEE_ID','INITIAL_CREATE_DT')),\r\n                    (run_metrics_sales_segment(entity_name,'1 = 1', '31', '3','Dim_Lead','LEAD_CONTACT_ADDRESS','INITIAL_CREATE_DT')),\r\n\t\t\t\t\t(run_metrics_sales_segment(entity_name,'1 = 1', '32', '2','Dim_Opportunity','OPPORTUNITY_TYPE','INITIAL_CREATE_DT'))                                       \r\n                   ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}  \r\n    {% elif entity_type  == 'HS'  %}  \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)), \r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1', '62', '1','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1','68','1','Dim_Opportunity','FORECAST_CATEGORY','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n\t\t\t\t    (run_metrics_hist_sales_segment(entity_name,'1=1', '52', '1','Dim_Opportunity','COMPETITOR','INITIAL_CREATE_DT',hist_strt_dt,hist_end_dt)),\r\n                    ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [ (run_metrics_hist_sales_segment(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')), \r\n\t\t\t\t\t(run_metrics_hist_sales_segment(entity_name,'1=1', '62', '1','Dim_Opportunity','STAGE_NAME','INITIAL_CREATE_DT')),\r\n                    (run_metrics_hist_sales_segment(entity_name,'1=1','68','1','Dim_Opportunity','FORECAST_CATEGORY','INITIAL_CREATE_DT')),\r\n\t\t\t\t    (run_metrics_hist_sales_segment(entity_name,'1=1', '52', '1','Dim_Opportunity','COMPETITOR','INITIAL_CREATE_DT')),\r\n                 ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}     \r\n    {% endif -%}   \r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}     \r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "sales_segmented"], "unique_id": "model.sales_dataflo.sales_segmented", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/sales_segmented.sql", "original_file_path": "ETL/Target/Tables/sales_segmented.sql", "name": "sales_segmented", "resource_type": "model", "alias": "sales_segmented", "checksum": {"name": "sha256", "checksum": "bf0e03e9399a29ad7da9bfd7c7004b2e2528cec6f6c9e009d91c04363f6e572f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Metrics"], ["Dim_Opportunity"], ["Dim_Lead"], ["Dim_Account"], ["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_metrics_hist_sales_segment", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Metrics", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/sales_segmented.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '7' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '18' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '19' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '28' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '30' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '31' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '32' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n        \n\n\n      \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('62' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '62' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('68' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(FORECAST_CATEGORY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '68' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('52' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(COMPETITOR as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '52' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '7' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '18' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '19' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '28' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '30' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '31' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '32' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n        \n\n\n      \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '5' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('62' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '62' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('68' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(FORECAST_CATEGORY as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '68' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type, TimeFrameID as join_Date  FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1=1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('52' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(COMPETITOR as varchar(1000)) As Segment_name,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '52' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name,\n        Reporting_Currency,\n        POINT_IN_TIME\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name, POINT_IN_TIME, nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , TimeFrame_Type,'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    "}, "error": null, "status": "SUCCESS 1", "execution_time": 113.73302793502808, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:01:06.409956Z", "completed_at": "2021-05-19T01:01:10.816833Z"}, {"name": "execute", "started_at": "2021-05-19T01:01:10.817219Z", "completed_at": "2021-05-19T01:02:59.716980Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with metrics as (\r\n\r\n    select *\r\n    from {{ ref('Stg_Ad_Analytics_By_Creative')}} \r\n), creatives as (\r\n\r\n    select *\r\n    from {{ ref('Dim_Creative_History') }}\r\n\r\n), campaigns as (\r\n    \r\n    select *\r\n    from {{ ref('Dim_Campaign_History') }}\r\n\r\n), campaign_groups as (\r\n    \r\n    select *\r\n    from {{ ref('Dim_Campaign_Group_History') }}\r\n\r\n), accounts as (\r\n    \r\n    select *\r\n    from {{ ref('Dim_Account_History') }}\r\n\r\n), joined as (\r\n\r\n    select\r\n        metrics.creative_id,\r\n        metrics.day as date_day,\r\n        metrics.clicks,\r\n        metrics.impressions,\r\n        metrics.cost_in_local_currency as cost,\r\n        metrics.daily_creative_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        campaign_groups.campaign_group_name,\r\n        campaign_groups.campaign_group_id,\r\n        accounts.account_name,\r\n        accounts.account_id,\r\n        metrics.source_type\r\n    from metrics\r\n    left join creatives\r\n        on metrics.creative_id = creatives.creative_id\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} >= creatives.valid_from\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} <= coalesce(creatives.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\r\n    left join campaigns\r\n        on creatives.campaign_id = campaigns.campaign_id\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} >= campaigns.valid_from\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} <= coalesce(campaigns.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\r\n    left join campaign_groups\r\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} >= campaign_groups.valid_from\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} <= coalesce(campaign_groups.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\r\n    left join accounts\r\n        on campaign_groups.account_id = accounts.account_id\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} >= accounts.valid_from\r\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.day') }} <= coalesce(accounts.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\r\n\r\n)\r\n\r\nselect *\r\nfrom joined", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Ads", "Dim_Ad_LI"], "unique_id": "model.sales_dataflo.Dim_Ad_LI", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Ads/Dim_Ad_LI.sql", "original_file_path": "ETL/Target/Tables/Ads/Dim_Ad_LI.sql", "name": "Dim_Ad_LI", "resource_type": "model", "alias": "Dim_Ad_LI", "checksum": {"name": "sha256", "checksum": "dd1599b166d534a10595fdbfd90c6380a1d366a881c760292fa9908e66585080"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Stg_Ad_Analytics_By_Creative"], ["Dim_Creative_History"], ["Dim_Campaign_History"], ["Dim_Campaign_Group_History"], ["Dim_Account_History"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.timestamp_add", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Stg_Ad_Analytics_By_Creative", "model.sales_dataflo.Dim_Creative_History", "model.sales_dataflo.Dim_Campaign_History", "model.sales_dataflo.Dim_Campaign_Group_History", "model.sales_dataflo.Dim_Account_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Ads/Dim_Ad_LI.sql", "deferred": false, "compiled_sql": "with metrics as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Analytics_By_Creative \n), creatives as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Creative_History\n\n), campaigns as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign_History\n\n), campaign_groups as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign_Group_History\n\n), accounts as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account_History\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.day as date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost_in_local_currency as cost,\n        metrics.daily_creative_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id,\n        metrics.source_type\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= creatives.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(creatives.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= campaigns.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(campaigns.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= campaign_groups.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(campaign_groups.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= accounts.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(accounts.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with metrics as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Stg_Ad_Analytics_By_Creative \n), creatives as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Creative_History\n\n), campaigns as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign_History\n\n), campaign_groups as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign_Group_History\n\n), accounts as (\n    \n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account_History\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.day as date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost_in_local_currency as cost,\n        metrics.daily_creative_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id,\n        metrics.source_type\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= creatives.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(creatives.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= campaigns.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(campaigns.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= campaign_groups.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(campaign_groups.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n >= accounts.valid_from\n        and \n\n    timestampadd(\n        day,\n        1,\n        metrics.day\n        )\n\n <= coalesce(accounts.valid_to, \n\n    timestampadd(\n        day,\n        1,\n        \n    current_timestamp::\n    timestamp_ntz\n\n\n        )\n\n)\n\n)\n\nselect *\nfrom joined"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.8759286403656006, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:03:00.145641Z", "completed_at": "2021-05-19T01:03:00.196564Z"}, {"name": "execute", "started_at": "2021-05-19T01:03:00.196896Z", "completed_at": "2021-05-19T01:03:02.594846Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Dim_GA_Ads')}}\r\n\r\n), fields as (\r\n\r\n    select\r\n        date_day as date_day,\r\n        platform,\r\n        account_name,\r\n        account_id,\r\n        campaign_name,\r\n        campaign_id,\r\n        ad_group_name,\r\n        ad_group_id,\r\n        sum(spend) as spend,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions\r\n    from base\r\n    {{ dbt_utils.group_by(8) }}\r\n\r\n)\r\n\r\nselect *\r\nfrom fields", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Ad_GA"], "unique_id": "model.sales_dataflo.Dim_Ad_GA", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Ad_GA.sql", "original_file_path": "ETL/Target/Tables/Dim_Ad_GA.sql", "name": "Dim_Ad_GA", "resource_type": "model", "alias": "Dim_Ad_GA", "checksum": {"name": "sha256", "checksum": "9354675918e067377ca65679f62267d6aee69df080dfbfc3ecccba5d5ca3c106"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_GA_Ads"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_GA_Ads"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Ad_GA.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n\n), fields as (\n\n    select\n        date_day as date_day,\n        platform,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n\n), fields as (\n\n    select\n        date_day as date_day,\n        platform,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.395408868789673, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:03:03.024104Z", "completed_at": "2021-05-19T01:03:03.052818Z"}, {"name": "execute", "started_at": "2021-05-19T01:03:03.053090Z", "completed_at": "2021-05-19T01:03:04.994619Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Campaign') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Campaign"], "unique_id": "model.sales_dataflo.VW_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Campaign.sql", "original_file_path": "ETL/Target/Views/VW_Campaign.sql", "name": "VW_Campaign", "resource_type": "model", "alias": "VW_Campaign", "checksum": {"name": "sha256", "checksum": "81a5fbb2705d231938ef8396d8391175aba3f01a1d5eda7b06c8cde05dca7dd0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Campaign"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Campaign.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.551605224609375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:03:05.422252Z", "completed_at": "2021-05-19T01:03:05.448793Z"}, {"name": "execute", "started_at": "2021-05-19T01:03:05.449262Z", "completed_at": "2021-05-19T01:03:07.550340Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "With Campaign AS(\r\n    select *  from {{ ref('Dim_Campaign') }}\r\n),Employee AS(\r\n    select *  from {{ ref('Dim_Employee') }}\r\n),Opportunity AS(\r\n\r\n select *  from {{ ref('Dim_Opportunity') }}\r\n\r\n ),lead AS(\r\n\r\n select *  from {{ ref('Dim_Lead') }}\r\n\r\n ),insight AS(\r\n\r\n    select \r\n      oppo.OPPORTUNITY_ID\r\n      ,oppo.OPPORTUNITY_NAME\r\n      ,oppo.OPPORTUNITY_TYPE\r\n      ,oppo.ACCOUNT_ID\r\n      ,oppo.EMPLOYEE_ID\r\n      ,oppo.SOURCE_ID as oppoSOURCE_ID\r\n      ,oppo.STAGE_ID\r\n      ,oppo.IS_WON\r\n      ,oppo.IS_CLOSED\r\n      ,oppo.STAGE_NAME as oppoSTAGE_NAME\r\n      ,oppo.FORECAST_CATEGORY\r\n      ,oppo.AMOUNT\r\n      ,oppo.AMOUNT_WITHOUT_DISC\r\n      ,oppo.EXPECTD_CLOUSER_DT\r\n      ,oppo.CONTACT_ID\r\n      ,oppo.CONTACT_NAME\r\n      ,oppo.CONTACT_NUMBER\r\n      ,oppo.CONTACT_EMAIL\r\n      ,oppo.CONTACT_ADDRESS\r\n      ,oppo.INITIAL_CREATE_DT as oppoINITIAL_CREATE_DT\r\n      ,oppo.LAST_UPDATED_DT\r\n      ,oppo.CLOSE_DATE\r\n      ,oppo.PROSPECT_DT\r\n      ,oppo.STAGE_CALC_ID\r\n      ,oppo.STAGE_START_DT\r\n      ,oppo.STAGE_END_DT\r\n      ,oppo.LEAD_LOST_REASON as oppoLEAD_LOST_REASON \r\n      ,oppo.COMPETITOR\r\n      ,oppo.ON_HOLD_FLAG\r\n      ,oppo.SUB_PRODUCT_ID\r\n      ,oppo.SUB_PRODUCT_NAME\r\n      ,oppo.PRD_AMOUNT_WITHOUT_DISC\r\n      ,oppo.PRD_DISCOUNT\r\n      ,oppo.ACTIVE_FLAG as oppoACTIVE_FLAG\r\n      ,oppo.DW_CURR_FLG\r\n      ,oppo.EFFCT_START_DATE\r\n      ,oppo.EFFCT_END_DATE\r\n      ,oppo.SOURCE_TYPE as oppoSOURCE_TYPE\r\n      ,oppo.DW_SESSION_NM\r\n      ,oppo.DW_INS_UPD_DTS\r\n\r\n      ,emp.EMPLOYEE_ID as empid\r\n      ,emp.SOURCE_EMP_ID\r\n      ,emp.ENTITY_ID\r\n      ,emp.ORG_NAME\r\n      ,emp.EMPLOYEE_CODE\r\n      ,emp.FIRST_NAME\r\n      ,emp.MIDDLE_NAME\r\n      ,emp.LAST_NAME\r\n      ,emp.EMP_FULL_NM\r\n      ,emp.EMP_ROLE_ID\r\n      ,emp.EMP_POSITION_LEVEL\r\n      ,emp.EMP_GENDER\r\n      ,emp.EMP_PHONE_NUMBER\r\n      ,emp.EMP_EMAIL\r\n      ,emp.SALES_BRANCH_ID\r\n      ,emp.SALES_BRANCH_NAME\r\n      ,emp.SALES_REGION_ID\r\n      ,emp.SALES_REGION_NAME\r\n      ,emp.SALES_ZONE_ID\r\n      ,emp.SALES_ZONE_NAME\r\n      ,emp.BUSINESS_UNIT_ID\r\n      ,emp.BUSINESS_UNIT_NAME\r\n      ,emp.EMP_CREATE_DT\r\n      ,emp.EMP_LAST_UPDATE_DT\r\n      ,emp.MNGR_EMP_ID\r\n      ,emp.MNGR_POSITION_LEVEL\r\n      ,emp.MNGR_ROLE_ID\r\n      ,emp.EMP_FINANCIAL_YEAR_START\r\n      ,emp.EMP_START_OF_WEEK\r\n      ,emp.WEEKLY_WORKING_DAYS\r\n      ,emp.EMP_ACTIVE\r\n      ,emp.DW_SESSION_NM as empDW_SESSION_NM\r\n      ,emp.DW_INS_UPD_DTS as empDW_INS_UPD_DTS\r\n\r\n      ,lead.LEAD_ID\r\n      ,lead.LEAD_SOURCE\r\n      ,lead.SOURCE_ID as leadSOURCE_ID\r\n      ,lead.LEAD_CONTACT_ADDRESS\r\n      ,lead.STATUS as leadSTATUS\r\n      ,lead.STAGE_NAME as leadSTAGE_NAME\r\n      ,lead.PRODUCT_ID\r\n      ,lead.LEAD_TO_OPP_FLAG\r\n      ,lead.LEAD_LOST_FLAG\r\n      ,lead.LEAD_CONVERTED_DATE\r\n      ,lead.CONVERTED_OPPORTUNITY_ID\r\n      ,lead.LEAD_LOST_DT\r\n      ,lead.LEAD_LOST_REASON\r\n      ,lead.INDUSTRY\r\n      ,lead.EMPLOYEE_ID as leadEMPLOYEE_ID\r\n      ,lead.INITIAL_CREATE_DT as leadINITIAL_CREATE_DT\r\n      ,lead.LEAD_LAST_MODIFIED_DATE\r\n      ,lead.SOURCE_TYPE as leadSOURCE_TYPE\r\n      ,lead.DW_SESSION_NM as leadDW_SESSION_NM\r\n      ,lead.DW_INS_UPD_DTS as leadDW_INS_UPD_DTS\r\n\r\n      ,camp.CAMPAIGN_ID\r\n      ,camp.CAMPAIGN_OWNER_ID\r\n      ,camp.CAMPAIGN_NAME\r\n      ,camp.ACTIVE_FLAG as campACTIVE_FLAG\r\n      ,camp.SOURCE_ID as campSOURCE_ID\r\n      ,camp.TYPE as campTYPE\r\n      ,camp.STATUS as campSTATUS\r\n      ,camp.START_DATE\r\n      ,camp.END_DATE\r\n      ,camp.EXPECTED_REVENUE\r\n      ,camp.BUDGETED_COST\r\n      ,camp.ACTUAL_COST\r\n      ,camp.EXPECTED_RESPONSE\r\n      ,camp.NUMBER_SENT\r\n      ,camp.NUMBER_OF_LEADS\r\n      ,camp.NUMBER_OF_CONVERTED_LEADS\r\n      ,camp.NUMBER_OF_CONTACTS\r\n      ,camp.NUMBER_OF_RESPONSES\r\n      ,camp.NUMBER_OF_OPPORTUNITIES\r\n      ,camp.NUMBER_OF_WON_OPPORTUNITIES\r\n      ,camp.AMOUNT_ALL_OPPORTUNITIES\r\n      ,camp.AMOUNT_WON_OPPORTUNITIES\r\n      ,camp.SOURCE_TYPE as campSOURCE_TYPE\r\n      ,camp.DW_SESSION_NM as campDW_SESSION_NM\r\n      ,camp.DW_INS_UPD_DTS as campDW_INS_UPD_DTS\r\n     \r\n    from  Opportunity as oppo\r\n    left join Employee as EMP on oppo.employee_id  =  EMP.source_Emp_id\r\n    left join lead on oppo.employee_id = lead.employee_id\r\n    left join Campaign as camp on oppo.EMPLOYEE_ID = camp.CAMPAIGN_OWNER_ID\r\n    \r\n\r\n\r\n )\r\nselect *  from insight --where CAMPAIGN_OWNER_ID ='0055g000000Y5auAAC' 0055g000000Y5auAAC", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "ml_insights_data", "ml_insights_data"], "unique_id": "model.sales_dataflo.ml_insights_data", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "ml_insights_data/ml_insights_data.sql", "original_file_path": "ETL/ml_insights_data/ml_insights_data.sql", "name": "ml_insights_data", "resource_type": "model", "alias": "ml_insights_data", "checksum": {"name": "sha256", "checksum": "33abcdcdce7b91f8b7d626b0b18a91c56d9950dc38b1dc7b88c8df2213d491a6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Campaign"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_Lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Campaign", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_Lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/ml_insights_data/ml_insights_data.sql", "deferred": false, "compiled_sql": "With Campaign AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign\n),Employee AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n),Opportunity AS(\n\n select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n\n ),lead AS(\n\n select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n\n ),insight AS(\n\n    select \n      oppo.OPPORTUNITY_ID\n      ,oppo.OPPORTUNITY_NAME\n      ,oppo.OPPORTUNITY_TYPE\n      ,oppo.ACCOUNT_ID\n      ,oppo.EMPLOYEE_ID\n      ,oppo.SOURCE_ID as oppoSOURCE_ID\n      ,oppo.STAGE_ID\n      ,oppo.IS_WON\n      ,oppo.IS_CLOSED\n      ,oppo.STAGE_NAME as oppoSTAGE_NAME\n      ,oppo.FORECAST_CATEGORY\n      ,oppo.AMOUNT\n      ,oppo.AMOUNT_WITHOUT_DISC\n      ,oppo.EXPECTD_CLOUSER_DT\n      ,oppo.CONTACT_ID\n      ,oppo.CONTACT_NAME\n      ,oppo.CONTACT_NUMBER\n      ,oppo.CONTACT_EMAIL\n      ,oppo.CONTACT_ADDRESS\n      ,oppo.INITIAL_CREATE_DT as oppoINITIAL_CREATE_DT\n      ,oppo.LAST_UPDATED_DT\n      ,oppo.CLOSE_DATE\n      ,oppo.PROSPECT_DT\n      ,oppo.STAGE_CALC_ID\n      ,oppo.STAGE_START_DT\n      ,oppo.STAGE_END_DT\n      ,oppo.LEAD_LOST_REASON as oppoLEAD_LOST_REASON \n      ,oppo.COMPETITOR\n      ,oppo.ON_HOLD_FLAG\n      ,oppo.SUB_PRODUCT_ID\n      ,oppo.SUB_PRODUCT_NAME\n      ,oppo.PRD_AMOUNT_WITHOUT_DISC\n      ,oppo.PRD_DISCOUNT\n      ,oppo.ACTIVE_FLAG as oppoACTIVE_FLAG\n      ,oppo.DW_CURR_FLG\n      ,oppo.EFFCT_START_DATE\n      ,oppo.EFFCT_END_DATE\n      ,oppo.SOURCE_TYPE as oppoSOURCE_TYPE\n      ,oppo.DW_SESSION_NM\n      ,oppo.DW_INS_UPD_DTS\n\n      ,emp.EMPLOYEE_ID as empid\n      ,emp.SOURCE_EMP_ID\n      ,emp.ENTITY_ID\n      ,emp.ORG_NAME\n      ,emp.EMPLOYEE_CODE\n      ,emp.FIRST_NAME\n      ,emp.MIDDLE_NAME\n      ,emp.LAST_NAME\n      ,emp.EMP_FULL_NM\n      ,emp.EMP_ROLE_ID\n      ,emp.EMP_POSITION_LEVEL\n      ,emp.EMP_GENDER\n      ,emp.EMP_PHONE_NUMBER\n      ,emp.EMP_EMAIL\n      ,emp.SALES_BRANCH_ID\n      ,emp.SALES_BRANCH_NAME\n      ,emp.SALES_REGION_ID\n      ,emp.SALES_REGION_NAME\n      ,emp.SALES_ZONE_ID\n      ,emp.SALES_ZONE_NAME\n      ,emp.BUSINESS_UNIT_ID\n      ,emp.BUSINESS_UNIT_NAME\n      ,emp.EMP_CREATE_DT\n      ,emp.EMP_LAST_UPDATE_DT\n      ,emp.MNGR_EMP_ID\n      ,emp.MNGR_POSITION_LEVEL\n      ,emp.MNGR_ROLE_ID\n      ,emp.EMP_FINANCIAL_YEAR_START\n      ,emp.EMP_START_OF_WEEK\n      ,emp.WEEKLY_WORKING_DAYS\n      ,emp.EMP_ACTIVE\n      ,emp.DW_SESSION_NM as empDW_SESSION_NM\n      ,emp.DW_INS_UPD_DTS as empDW_INS_UPD_DTS\n\n      ,lead.LEAD_ID\n      ,lead.LEAD_SOURCE\n      ,lead.SOURCE_ID as leadSOURCE_ID\n      ,lead.LEAD_CONTACT_ADDRESS\n      ,lead.STATUS as leadSTATUS\n      ,lead.STAGE_NAME as leadSTAGE_NAME\n      ,lead.PRODUCT_ID\n      ,lead.LEAD_TO_OPP_FLAG\n      ,lead.LEAD_LOST_FLAG\n      ,lead.LEAD_CONVERTED_DATE\n      ,lead.CONVERTED_OPPORTUNITY_ID\n      ,lead.LEAD_LOST_DT\n      ,lead.LEAD_LOST_REASON\n      ,lead.INDUSTRY\n      ,lead.EMPLOYEE_ID as leadEMPLOYEE_ID\n      ,lead.INITIAL_CREATE_DT as leadINITIAL_CREATE_DT\n      ,lead.LEAD_LAST_MODIFIED_DATE\n      ,lead.SOURCE_TYPE as leadSOURCE_TYPE\n      ,lead.DW_SESSION_NM as leadDW_SESSION_NM\n      ,lead.DW_INS_UPD_DTS as leadDW_INS_UPD_DTS\n\n      ,camp.CAMPAIGN_ID\n      ,camp.CAMPAIGN_OWNER_ID\n      ,camp.CAMPAIGN_NAME\n      ,camp.ACTIVE_FLAG as campACTIVE_FLAG\n      ,camp.SOURCE_ID as campSOURCE_ID\n      ,camp.TYPE as campTYPE\n      ,camp.STATUS as campSTATUS\n      ,camp.START_DATE\n      ,camp.END_DATE\n      ,camp.EXPECTED_REVENUE\n      ,camp.BUDGETED_COST\n      ,camp.ACTUAL_COST\n      ,camp.EXPECTED_RESPONSE\n      ,camp.NUMBER_SENT\n      ,camp.NUMBER_OF_LEADS\n      ,camp.NUMBER_OF_CONVERTED_LEADS\n      ,camp.NUMBER_OF_CONTACTS\n      ,camp.NUMBER_OF_RESPONSES\n      ,camp.NUMBER_OF_OPPORTUNITIES\n      ,camp.NUMBER_OF_WON_OPPORTUNITIES\n      ,camp.AMOUNT_ALL_OPPORTUNITIES\n      ,camp.AMOUNT_WON_OPPORTUNITIES\n      ,camp.SOURCE_TYPE as campSOURCE_TYPE\n      ,camp.DW_SESSION_NM as campDW_SESSION_NM\n      ,camp.DW_INS_UPD_DTS as campDW_INS_UPD_DTS\n     \n    from  Opportunity as oppo\n    left join Employee as EMP on oppo.employee_id  =  EMP.source_Emp_id\n    left join lead on oppo.employee_id = lead.employee_id\n    left join Campaign as camp on oppo.EMPLOYEE_ID = camp.CAMPAIGN_OWNER_ID\n    \n\n\n )\nselect *  from insight --where CAMPAIGN_OWNER_ID ='0055g000000Y5auAAC' 0055g000000Y5auAAC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "With Campaign AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign\n),Employee AS(\n    select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n),Opportunity AS(\n\n select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n\n ),lead AS(\n\n select *  from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n\n ),insight AS(\n\n    select \n      oppo.OPPORTUNITY_ID\n      ,oppo.OPPORTUNITY_NAME\n      ,oppo.OPPORTUNITY_TYPE\n      ,oppo.ACCOUNT_ID\n      ,oppo.EMPLOYEE_ID\n      ,oppo.SOURCE_ID as oppoSOURCE_ID\n      ,oppo.STAGE_ID\n      ,oppo.IS_WON\n      ,oppo.IS_CLOSED\n      ,oppo.STAGE_NAME as oppoSTAGE_NAME\n      ,oppo.FORECAST_CATEGORY\n      ,oppo.AMOUNT\n      ,oppo.AMOUNT_WITHOUT_DISC\n      ,oppo.EXPECTD_CLOUSER_DT\n      ,oppo.CONTACT_ID\n      ,oppo.CONTACT_NAME\n      ,oppo.CONTACT_NUMBER\n      ,oppo.CONTACT_EMAIL\n      ,oppo.CONTACT_ADDRESS\n      ,oppo.INITIAL_CREATE_DT as oppoINITIAL_CREATE_DT\n      ,oppo.LAST_UPDATED_DT\n      ,oppo.CLOSE_DATE\n      ,oppo.PROSPECT_DT\n      ,oppo.STAGE_CALC_ID\n      ,oppo.STAGE_START_DT\n      ,oppo.STAGE_END_DT\n      ,oppo.LEAD_LOST_REASON as oppoLEAD_LOST_REASON \n      ,oppo.COMPETITOR\n      ,oppo.ON_HOLD_FLAG\n      ,oppo.SUB_PRODUCT_ID\n      ,oppo.SUB_PRODUCT_NAME\n      ,oppo.PRD_AMOUNT_WITHOUT_DISC\n      ,oppo.PRD_DISCOUNT\n      ,oppo.ACTIVE_FLAG as oppoACTIVE_FLAG\n      ,oppo.DW_CURR_FLG\n      ,oppo.EFFCT_START_DATE\n      ,oppo.EFFCT_END_DATE\n      ,oppo.SOURCE_TYPE as oppoSOURCE_TYPE\n      ,oppo.DW_SESSION_NM\n      ,oppo.DW_INS_UPD_DTS\n\n      ,emp.EMPLOYEE_ID as empid\n      ,emp.SOURCE_EMP_ID\n      ,emp.ENTITY_ID\n      ,emp.ORG_NAME\n      ,emp.EMPLOYEE_CODE\n      ,emp.FIRST_NAME\n      ,emp.MIDDLE_NAME\n      ,emp.LAST_NAME\n      ,emp.EMP_FULL_NM\n      ,emp.EMP_ROLE_ID\n      ,emp.EMP_POSITION_LEVEL\n      ,emp.EMP_GENDER\n      ,emp.EMP_PHONE_NUMBER\n      ,emp.EMP_EMAIL\n      ,emp.SALES_BRANCH_ID\n      ,emp.SALES_BRANCH_NAME\n      ,emp.SALES_REGION_ID\n      ,emp.SALES_REGION_NAME\n      ,emp.SALES_ZONE_ID\n      ,emp.SALES_ZONE_NAME\n      ,emp.BUSINESS_UNIT_ID\n      ,emp.BUSINESS_UNIT_NAME\n      ,emp.EMP_CREATE_DT\n      ,emp.EMP_LAST_UPDATE_DT\n      ,emp.MNGR_EMP_ID\n      ,emp.MNGR_POSITION_LEVEL\n      ,emp.MNGR_ROLE_ID\n      ,emp.EMP_FINANCIAL_YEAR_START\n      ,emp.EMP_START_OF_WEEK\n      ,emp.WEEKLY_WORKING_DAYS\n      ,emp.EMP_ACTIVE\n      ,emp.DW_SESSION_NM as empDW_SESSION_NM\n      ,emp.DW_INS_UPD_DTS as empDW_INS_UPD_DTS\n\n      ,lead.LEAD_ID\n      ,lead.LEAD_SOURCE\n      ,lead.SOURCE_ID as leadSOURCE_ID\n      ,lead.LEAD_CONTACT_ADDRESS\n      ,lead.STATUS as leadSTATUS\n      ,lead.STAGE_NAME as leadSTAGE_NAME\n      ,lead.PRODUCT_ID\n      ,lead.LEAD_TO_OPP_FLAG\n      ,lead.LEAD_LOST_FLAG\n      ,lead.LEAD_CONVERTED_DATE\n      ,lead.CONVERTED_OPPORTUNITY_ID\n      ,lead.LEAD_LOST_DT\n      ,lead.LEAD_LOST_REASON\n      ,lead.INDUSTRY\n      ,lead.EMPLOYEE_ID as leadEMPLOYEE_ID\n      ,lead.INITIAL_CREATE_DT as leadINITIAL_CREATE_DT\n      ,lead.LEAD_LAST_MODIFIED_DATE\n      ,lead.SOURCE_TYPE as leadSOURCE_TYPE\n      ,lead.DW_SESSION_NM as leadDW_SESSION_NM\n      ,lead.DW_INS_UPD_DTS as leadDW_INS_UPD_DTS\n\n      ,camp.CAMPAIGN_ID\n      ,camp.CAMPAIGN_OWNER_ID\n      ,camp.CAMPAIGN_NAME\n      ,camp.ACTIVE_FLAG as campACTIVE_FLAG\n      ,camp.SOURCE_ID as campSOURCE_ID\n      ,camp.TYPE as campTYPE\n      ,camp.STATUS as campSTATUS\n      ,camp.START_DATE\n      ,camp.END_DATE\n      ,camp.EXPECTED_REVENUE\n      ,camp.BUDGETED_COST\n      ,camp.ACTUAL_COST\n      ,camp.EXPECTED_RESPONSE\n      ,camp.NUMBER_SENT\n      ,camp.NUMBER_OF_LEADS\n      ,camp.NUMBER_OF_CONVERTED_LEADS\n      ,camp.NUMBER_OF_CONTACTS\n      ,camp.NUMBER_OF_RESPONSES\n      ,camp.NUMBER_OF_OPPORTUNITIES\n      ,camp.NUMBER_OF_WON_OPPORTUNITIES\n      ,camp.AMOUNT_ALL_OPPORTUNITIES\n      ,camp.AMOUNT_WON_OPPORTUNITIES\n      ,camp.SOURCE_TYPE as campSOURCE_TYPE\n      ,camp.DW_SESSION_NM as campDW_SESSION_NM\n      ,camp.DW_INS_UPD_DTS as campDW_INS_UPD_DTS\n     \n    from  Opportunity as oppo\n    left join Employee as EMP on oppo.employee_id  =  EMP.source_Emp_id\n    left join lead on oppo.employee_id = lead.employee_id\n    left join Campaign as camp on oppo.EMPLOYEE_ID = camp.CAMPAIGN_OWNER_ID\n    \n\n\n )\nselect *  from insight --where CAMPAIGN_OWNER_ID ='0055g000000Y5auAAC' 0055g000000Y5auAAC"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.461041212081909, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:03:07.976843Z", "completed_at": "2021-05-19T01:03:08.034233Z"}, {"name": "execute", "started_at": "2021-05-19T01:03:08.034608Z", "completed_at": "2021-05-19T01:03:10.012855Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n-- depends_on: {{ ref('Dim_Employee') }}\r\n-- depends_on: {{ ref('Dim_Metrics') }}\r\n-- depends_on: {{ ref('Dim_Opportunity') }}\r\n-- depends_on: {{ ref('Dim_Lead') }}\r\n-- depends_on: {{ ref('Dim_Account') }}\r\n-- depends_on: {{ ref('Dim_Contact') }}\r\n-- depends_on: {{ ref('Dim_Engagement') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HS')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE):: DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n    ) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n\r\n    {% if  entity_type  == 'SF'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(lead_to_opp_flag) = '\"'\"'TRUE'\"'\"'', '3', '4','Dim_Lead','lead_CONVERTED_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'1 = 1', '4', '4','Dim_Lead','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'1 = 1', '27', '5','Dim_Account','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'1 = 1', '29', '6','Dim_Contact','initial_create_dt',hist_strt_dt,hist_end_dt)),                    \r\n                            ]  %}\r\n                    (\r\n                        {{ metrics }} as\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(lead_to_opp_flag) = '\"'\"'TRUE'\"'\"'', '3', '4','Dim_Lead','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '4', '4','Dim_Lead','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '27', '5','Dim_Account','initial_create_dt')),\r\n                                (run_metrics_sales(entity_name,'1 = 1', '29', '6','Dim_Contact','initial_create_dt')),                 \r\n                            ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}  \r\n    {% elif  entity_type  == 'HS'  %} \r\n        {% if  hist_load  == 'true'  %} \r\n\r\n            {%- for metrics in [(run_metrics_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '79', '1','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(TYPE) = '\"'\"'CALL'\"'\"'', '39', '1','Dim_Engagement','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(TYPE) = '\"'\"'TASK'\"'\"'', '89', '1','Dim_Engagement','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(TYPE) = '\"'\"'MEETING'\"'\"'', '71', '1','Dim_Engagement','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(TYPE) = '\"'\"'NOTE'\"'\"'', '76', '1','Dim_Engagement','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                (run_metrics_hist_sales(entity_name,'upper(TYPE) = '\"'\"'EMAIL'\"'\"'', '66', '1','Dim_Engagement','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                               ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%} \r\n        {% else -%}     \r\n            {%- for metrics in [(run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity','CLOSE_DATE')),\r\n                                (run_metrics_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity','initial_create_dt')) ,                   \r\n                                (run_metrics_hist_sales(entity_name,'upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '79', '1','Dim_Opportunity','initial_create_dt',hist_strt_dt,hist_end_dt)),\r\n                                ]  %}\r\n                    (\r\n                        {{ metrics }}\r\n                    )\r\n\r\n                    {% if not loop.last -%}\r\n                        union all\r\n                    {% endif -%}        \r\n            {%- endfor -%}\r\n        {% endif -%}        \r\n    {% endif -%}   \r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}     \r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Temp_Sales"], "unique_id": "model.sales_dataflo.Temp_Sales", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Temp_Sales.sql", "original_file_path": "ETL/Target/Tables/Temp_Sales.sql", "name": "Temp_Sales", "resource_type": "model", "alias": "Temp_Sales", "checksum": {"name": "sha256", "checksum": "8bb4c048acb68433aae784b4b332a0799650fd7c434e5b73b173c633fee6ffdd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Metrics"], ["Dim_Opportunity"], ["Dim_Lead"], ["Dim_Account"], ["Dim_Contact"], ["Dim_Engagement"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_metrics_hist_sales", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Metrics", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_Contact", "model.sales_dataflo.Dim_Engagement"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Temp_Sales.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n        \n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('79' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '79' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'CALL' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('39' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '39' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'TASK' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('89' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '89' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'MEETING' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('71' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '71' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'NOTE' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('76' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '76' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'EMAIL' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('66' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '66' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement\n\n\n\n\n\n\n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( lead_CONVERTED_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '3' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '4' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '27' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1094\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/02/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/01/2020','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '29' = metrics.METRIC_ID\n          where timeframe.source_type = 'SF_RKLIVE_06012021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type as\n                    )\n\n                    union all\n        \n\n\n     \n        \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '1' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( CLOSE_DATE as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '10' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '23' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('79' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( Amount  ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '79' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'CALL' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('39' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '39' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'TASK' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('89' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '89' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'MEETING' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('71' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '71' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'NOTE' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('76' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '76' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    union all\n                    \n                    (\n                        with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017','dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021','dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  order by TimeFrameID\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , source_type,  TimeFrameID as join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \n join timeframe on source_type = timeframe.source_type\n),\nMetrics AS\n( SELECT  METRIC_ID , POINT_IN_TIME FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Metrics \n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Engagement  Where upper(TYPE) = 'EMAIL' )  \n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        cast (Emp_id AS varchar (100) ) AS employee_code,\n        cast('66' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        metrics.POINT_IN_TIME as POINT_IN_TIME,\n       'USD' AS   Reporting_Currency,\n        sum( 0   ) as AMOUNT,\n        count(SOURCE_ID)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID and Emp.source_type = timeframe.source_type\n          left join Source \n          on cast (Emp.Emp_id AS varchar (1000)) = cast (source.employee_id AS varchar (1000))  and Emp.source_type = source.source_type\n          and cast( initial_create_dt as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n          join Metrics\n          on '66' = metrics.METRIC_ID\n          where timeframe.source_type = 'HS_RKLIVE_01042021'\n        group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        POINT_IN_TIME,\n        Reporting_Currency        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,POINT_IN_TIME,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average ,  TimeFrame_Type, 'USD'  as Reporting_Currency,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n                    )\n\n                    "}, "error": "Database Error in model Temp_Sales (ETL/Target/Tables/Temp_Sales.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 219 at position 52 unexpected 'as'.\n  syntax error line 423 at position 52 unexpected 'as'.\n  syntax error line 627 at position 52 unexpected 'as'.\n  syntax error line 831 at position 52 unexpected 'as'.\n  syntax error line 1,035 at position 52 unexpected 'as'.\n  syntax error line 1,239 at position 52 unexpected 'as'.\n  syntax error line 1,443 at position 52 unexpected 'as'.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Temp_Sales.sql", "status": "ERROR", "execution_time": 6.7305073738098145, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled')) }}\r\n\r\nwith base as (\r\n\r\n    select *\r\n    from {{ ref('Dim_Ad')}}\r\n\r\n),fields as (\r\n\r\n    select\r\n        cast(date_day as date) as date_day,\r\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\r\n        campaign_name,\r\n        cast(ad_set_id as {{ dbt_utils.type_string() }}) as ad_group_id,\r\n        ad_set_name as ad_group_name,\r\n        coalesce(clicks, 0) as clicks,\r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(REACH, 0) as REACH,\r\n        coalesce(CPC, 0) as CPC,\r\n        coalesce(CPM, 0) as CPM,\r\n        coalesce(CTR, 0) as CTR,\r\n        coalesce(FREQUENCY, 0) as FREQUENCY,\r\n        Source_type as platform\r\n    from base\r\n    \r\n)\r\n\r\nselect *\r\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Facebook"], "unique_id": "model.sales_dataflo.Dim_Facebook", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Facebook.sql", "original_file_path": "ETL/Target/Tables/Dim_Facebook.sql", "name": "Dim_Facebook", "resource_type": "model", "alias": "Dim_Facebook", "checksum": {"name": "sha256", "checksum": "e79d39ab1cafd93ec849f009380705590aff89ffab0c4a9aa6bb56c118f087d2"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Ad"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.sales_dataflo.Dim_Ad"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "--depends_on: {{ ref('Temp_Sales_Segmented') }}\r\n-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in('SF','HS')\", \"ENTITY_DATASORUCE_NAME||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE)::DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n{% set pits = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".TEMP_SALES_SEGMENTED\", \"METRIC_ID||'#'||POINT_IN_TIME\") %}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Report_Date1'\r\n      )\r\n\t  \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n    {% if  hist_load  == 'true' %} \r\n\t\t   {% for V_PIT in pits %}\r\n\t\t   {% set metricid, pit= V_PIT.split('#') %}\r\n\t\t\t\t\t{% if  pit  == 'TRUE' %} \r\n\t\t\t\t\t\t\t{%- for metrics in [(fact_table_pit_segmented_hist(entity_name,metricid,hist_strt_dt,hist_end_dt))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }} \r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% else -%}\r\n\t\t\t\t\t\t\t{%- for metrics in [(fact_table_segmented_hist(entity_name,metricid,hist_strt_dt,hist_end_dt))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% endif -%}\r\n\t\t\t    {% if not loop.last -%}\r\n\t\t\t\t\tunion all\r\n\t\t\t\t{% endif -%}\r\n\t\t\t{%- endfor -%} \r\n    {%- else -%}\r\n        {% for V_PIT in pit %}\r\n        {% set metricid, pit= V_PIT.split('#') %}\r\n\t\t\t\t\t{% if  pit  == 'TRUE' %} \r\n\t\t\t\t\t\t{%- for metrics in [(fact_table_pit_segmented(entity_name,metricid))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% else -%}\r\n\t\t\t\t\t\t{%- for metrics in [(fact_table_segmented(entity_name,metricid))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% endif -%}\t\r\n\t\t    {% if not loop.last -%}\r\n\t\t\t\tunion all\r\n\t\t\t{% endif -%}\r\n\t\t{%- endfor -%}\t   \r\n    {% endif -%} \r\n  {% if not loop.last -%}\r\n\t\tunion all\r\n\t{% endif -%}\t\r\n{%- endfor -%}", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales_Segmented"], "unique_id": "model.sales_dataflo.Fact_Sales_Segmented", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales_Segmented.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales_Segmented.sql", "name": "Fact_Sales_Segmented", "resource_type": "model", "alias": "Fact_Sales_Segmented", "checksum": {"name": "sha256", "checksum": "be25e250eae6832975b82e6e95eb55f337f77f7240781392d0b8fd476130b9f0"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Report_Date1"}, "tags": [], "refs": [["Temp_Sales_Segmented"], ["Dim_TimeFrame"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query"], "nodes": ["model.sales_dataflo.Temp_Sales_Segmented", "model.sales_dataflo.Dim_TimeFrame"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__linkedin_ads_enabled')) }}\r\n\r\nwith base as (\r\n\r\n    select *\r\n    from {{ ref('Dim_Ad_LI')}}\r\n\r\n), fields as (\r\n\r\n    select\r\n        cast(date_day as date) as date_day,\r\n        account_name,\r\n        account_id,\r\n        campaign_name,\r\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\r\n        campaign_group_name as ad_group_name,\r\n        cast(campaign_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\r\n        coalesce(clicks, 0) as clicks,\r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(cost, 0) as spend,\r\n        Source_type as platform\r\n    from base\r\n\r\n\r\n)\r\n\r\nselect *\r\nfrom fields", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_LinkedIn"], "unique_id": "model.sales_dataflo.Dim_LinkedIn", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_LinkedIn.sql", "original_file_path": "ETL/Target/Tables/Dim_LinkedIn.sql", "name": "Dim_LinkedIn", "resource_type": "model", "alias": "Dim_LinkedIn", "checksum": {"name": "sha256", "checksum": "358925adf716d3f0d9ed88b4f72def8e12735127dbb6702f5278c42467689f0d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Ad_LI"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Ad_LI"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_LinkedIn.sql", "deferred": false, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Ad_LI\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        campaign_group_name as ad_group_name,\n        cast(campaign_group_id as \n    varchar\n) as ad_group_id,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend,\n        Source_type as platform\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Ad_LI\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        campaign_group_name as ad_group_name,\n        cast(campaign_group_id as \n    varchar\n) as ad_group_id,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend,\n        Source_type as platform\n    from base\n\n\n)\n\nselect *\nfrom fields"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.758355140686035, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:03:17.176162Z", "completed_at": "2021-05-19T01:03:17.213099Z"}, {"name": "execute", "started_at": "2021-05-19T01:03:17.213438Z", "completed_at": "2021-05-19T01:03:19.507609Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--depends_on: {{ ref('Temp_Sales') }}\r\n-- depends_on: {{ ref('Dim_TimeFrame') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Sales')~\" where DATASOURCE_TYPE in ('SF','HS')\", \"ENTITY_DATASORUCE_NAME||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE)::DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n{% set pits = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Schema')~ \".TEMP_SALES\", \"METRIC_ID||'#'||POINT_IN_TIME\") %}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false \r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n        unique_key= 'Report_Date'\r\n  )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n    {% if  hist_load  == 'true' %} \r\n\t\t   {% for V_PIT in pits %}\r\n\t\t   {% set metricid, pit= V_PIT.split('#') %}\r\n\t\t\t\t\t{% if  pit  == 'TRUE' %} \r\n\t\t\t\t\t\t\t{%- for metrics in [(fact_table_pit_hist(entity_name,metricid,hist_strt_dt,hist_end_dt))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% else -%}\r\n\t\t\t\t\t\t\t{%- for metrics in [(fact_table_hist(entity_name,metricid,hist_strt_dt,hist_end_dt))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }} \r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% endif -%}\r\n\t\t\t    {% if not loop.last -%}\r\n\t\t\t\t\tunion all\r\n\t\t\t\t{% endif -%}\r\n\t\t\t{%- endfor -%} \r\n    {%- else -%}\r\n        {% for V_PIT in pit %}\r\n        {% set metricid, pit= V_PIT.split('#') %}\r\n\t\t\t\t\t{% if  pit  == 'TRUE' %} \r\n\t\t\t\t\t\t{%- for metrics in [(fact_table_pit(entity_name,metricid))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% else -%}\r\n\t\t\t\t\t\t{%- for metrics in [(fact_table(entity_name,metricid))                \r\n\t\t\t\t\t\t\t\t  ]  %}\r\n\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t  {{ metrics }}\r\n\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t{% if not loop.last -%}\r\n\t\t\t\t\t\t\t\tunion all\r\n\t\t\t\t\t\t\t{% endif -%}\r\n\t\t\t\t\t\t{%- endfor -%}  \r\n\t\t\t\t\t{% endif -%}\t\r\n\t\t    {% if not loop.last -%}\r\n\t\t\t\tunion all\r\n\t\t\t{% endif -%}\r\n\t\t{%- endfor -%}\t   \r\n    {% endif -%} \r\n  {% if not loop.last -%}\r\n\t\tunion all\r\n\t{% endif -%}\t\r\n{%- endfor -%}", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales"], "unique_id": "model.sales_dataflo.Fact_Sales", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales.sql", "name": "Fact_Sales", "resource_type": "model", "alias": "Fact_Sales", "checksum": {"name": "sha256", "checksum": "53023eb115f65af78aaa7a93071283f267fd9915c50df5a1a3994533583aed40"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert", "unique_key": "Report_Date"}, "tags": [], "refs": [["Temp_Sales"], ["Dim_TimeFrame"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query"], "nodes": ["model.sales_dataflo.Temp_Sales", "model.sales_dataflo.Dim_TimeFrame"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_Session') }}\r\n-- depends_on: {{ ref('Dim_Channel_Traffic') }}\r\n-- depends_on: {{ ref('Dim_Social_Media_Acquisitions') }}\r\n-- depends_on: {{ ref('Dim_Page_Tracking') }}\r\n-- depends_on: {{ ref('Dim_Goal_Conversions') }}\r\n-- depends_on: {{ ref('Dim_Events_Overview') }}\r\n-- depends_on: {{ ref('Dim_LinkedIn') }}\r\n-- depends_on: {{ ref('Dim_GA_Ads') }}\r\n-- depends_on: {{ ref('Dim_Site') }}\r\n-- depends_on: {{ ref('Dim_Calendar') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE in ('GA_ADS','LI_ADS','GSC','GA')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE)::DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n    {% if entity_type =='GA' and hist_load  == 'true' %} \r\n        {%- for metrics in [(run_ns_metrics('1 = 1', '139', '10','Dim_Session','Sum(SESSIONS_PER_USER)')) ,  \r\n                            (run_ns_metrics('1 = 1', '140', '10','Dim_Channel_Traffic','Sum(SESSIONS)')) , \r\n                            (run_ns_metrics('1 = 1', '141', '10','Dim_Social_Media_Acquisitions','Sum(PERCENT_NEW_SESSIONS)')) , \r\n                            (run_ns_metrics('1 = 1', '142', '10','Dim_Social_Media_Acquisitions','Sum(NEW_USERS)')),   \r\n                            (run_ns_metrics('1 = 1', '143', '10','Dim_Social_Media_Acquisitions','Sum(PAGEVIEWS)')),\r\n                            (run_ns_metrics('1 = 1', '144', '10','Dim_Page_Tracking','Sum(PAGEVIEWS_PER_SESSION)')), \r\n                            (run_ns_metrics('1 = 1', '145', '10','Dim_Session','Sum(BOUNCE_RATE)')),  \r\n                            (run_ns_metrics('1 = 1', '147', '10','Dim_Social_Media_Acquisitions','Sum(AVG_SESSION_DURATION)')), \r\n                            (run_ns_metrics('1 = 1', '151', '10','Dim_Goal_Conversions','Sum(GOAL_COMPLETIONS_ALL)')),\r\n                            (run_ns_metrics('1 = 1', '152', '10','Dim_Goal_Conversions','Sum(GOAL_CONVERSION_RATE_ALL)')),   \r\n                            (run_ns_metrics('1 = 1', '158', '10','Dim_Social_Media_Acquisitions','Sum(TRANSACTIONS_PER_SESSION)')),\r\n                            (run_ns_metrics('1 = 1', '163', '10','Dim_Events_Overview','Sum(TOTAL_EVENTS)')),\r\n                            (run_ns_metrics('1 = 1', '164', '10','Dim_Social_Media_Acquisitions','Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)')),                    \r\n                            (run_ns_metrics('1 = 1', '166', '10','Dim_Page_Tracking','sum(TIME_ON_PAGE)')),\r\n                            (run_ns_metrics('1 = 1', '167', '10','Dim_Page_Tracking','sum(UNIQUE_PAGEVIEWS)')),\r\n                        ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%}   \r\n    \r\n    {% elif entity_type =='LI_ADS' and hist_load  == 'true' %} \r\n         {%- for metrics in [(run_ads_ns_metrics('1 = 1', '172', '10','Dim_LinkedIn','Sum(spend)')) ,  \r\n                    (run_ads_ns_metrics('1 = 1', '173', '10','Dim_LinkedIn','Sum(clicks)')) , \r\n                    (run_ads_ns_metrics('1 = 1', '175', '10','Dim_LinkedIn','Sum(impressions)')),   \r\n                    (run_ads_ns_metrics('1 = 1', '177', '10','Dim_LinkedIn','Sum(clicks)/ Sum(impressions)')),\r\n                    (run_ads_ns_metrics('1 = 1', '179', '10','Dim_LinkedIn','Sum(spend)/ Sum(clicks)')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n   \r\n\r\n    {% elif entity_type =='FBB_ADS' and hist_load  == 'true' %} \r\n          {%- for metrics in [(run_ads_ns_metrics('1 = 1', '172', '10','Dim_Facebook','Sum(spend)')) ,  \r\n                    (run_ads_ns_metrics('1 = 1', '173', '10','Dim_Facebook','Sum(clicks)')) , \r\n                    (run_ads_ns_metrics('1 = 1', '175', '10','Dim_Facebook','Sum(impressions)')),   \r\n                    (run_ads_ns_metrics('1 = 1', '177', '10','Dim_Facebook','Sum(CTR)')),\r\n                    (run_ads_ns_metrics('1 = 1', '179', '10','Dim_Facebook','Sum(CPC)')),\r\n                    (run_ads_ns_metrics('1 = 1', '188', '10','Dim_Facebook','Sum(CPM)')),\r\n                    (run_ads_ns_metrics('1 = 1', '189', '10','Dim_Facebook','Sum(REACH)')),\r\n                    (run_ads_ns_metrics('1 = 1', '190 ', '10','Dim_Facebook','Sum(FREQUENCY)')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n        \r\n    {% elif entity_type =='GA_ADS' and hist_load  == 'true' %} \r\n         {%- for metrics in [(run_ads_ns_metrics('1 = 1', '172', '10','Dim_GA_Ads','Sum(spend)')) ,  \r\n                    (run_ads_ns_metrics('1 = 1', '173', '10','Dim_GA_Ads','Sum(clicks)')) , \r\n                    (run_ads_ns_metrics('1 = 1', '175', '10','Dim_GA_Ads','Sum(impressions)')),   \r\n                    (run_ads_ns_metrics('1 = 1', '177', '10','Dim_GA_Ads','Sum(clicks)/ Sum(impressions)')),\r\n                    (run_ads_ns_metrics('1 = 1', '179', '10','Dim_GA_Ads','Sum(spend)/ Sum(clicks)')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n\r\n    {% elif entity_type =='GSC' and hist_load  == 'true' %} \r\n         {%- for metrics in [(run_ads_ns_metrics('1 = 1', '195', '10','Dim_Site','Sum(clicks)')) , \r\n                    (run_ads_ns_metrics('1 = 1', '198', '10','Dim_Site','Sum(impressions)')),\r\n                    (run_ads_ns_metrics('1 = 1', '199', '10','Dim_Site','Sum(CTR)')) ,\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n    {% endif -%}\r\n    {% if not loop.last -%}\r\n            union all\r\n        {% endif -%} \r\n\r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Marketing"], "unique_id": "model.sales_dataflo.Fact_Marketing", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Marketing.sql", "original_file_path": "ETL/Target/Tables/Fact_Marketing.sql", "name": "Fact_Marketing", "resource_type": "model", "alias": "Fact_Marketing", "checksum": {"name": "sha256", "checksum": "f3ee6b0100a13c7b7f3ed258206b944c0919df056a680f555417ba5443888432"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Session"], ["Dim_Channel_Traffic"], ["Dim_Social_Media_Acquisitions"], ["Dim_Page_Tracking"], ["Dim_Goal_Conversions"], ["Dim_Events_Overview"], ["Dim_LinkedIn"], ["Dim_GA_Ads"], ["Dim_Site"], ["Dim_Calendar"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_ns_metrics", "macro.sales_dataflo.run_ads_ns_metrics", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.sales_dataflo.Dim_Session", "model.sales_dataflo.Dim_Channel_Traffic", "model.sales_dataflo.Dim_Social_Media_Acquisitions", "model.sales_dataflo.Dim_Page_Tracking", "model.sales_dataflo.Dim_Goal_Conversions", "model.sales_dataflo.Dim_Events_Overview", "model.sales_dataflo.Dim_LinkedIn", "model.sales_dataflo.Dim_GA_Ads", "model.sales_dataflo.Dim_Site", "model.sales_dataflo.Dim_Calendar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Marketing.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS_PER_USER)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('140' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('141' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PERCENT_NEW_SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('142' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(NEW_USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('143' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('144' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('145' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(BOUNCE_RATE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('147' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(AVG_SESSION_DURATION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('151' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('152' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(GOAL_CONVERSION_RATE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('158' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('163' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TOTAL_EVENTS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('164' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(TRANSACTIONS)/decode(Sum(NEW_USERS),0,1)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('166' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(TIME_ON_PAGE)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('167' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        sum(UNIQUE_PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_MKT_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('172' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('173' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('175' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('177' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)/ Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )                \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('179' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(spend)/ Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n        \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('195' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(clicks)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('198' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/03/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('199' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID            \n    )\n        SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type, Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            "}, "error": "Database Error in model Fact_Marketing (ETL/Target/Tables/Fact_Marketing.sql)\n  001042 (XX000): SQL compilation error:\n  Compilation memory exhausted.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Fact_Marketing.sql", "status": "ERROR", "execution_time": 45.486374855041504, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- depends_on: {{ ref('Dim_Session') }}\r\n-- depends_on: {{ ref('Dim_Channel_Traffic') }}\r\n-- depends_on: {{ ref('Dim_Social_Media_Acquisitions') }}\r\n-- depends_on: {{ ref('Dim_Page_Tracking') }}\r\n-- depends_on: {{ ref('Dim_Goal_Conversions') }}\r\n-- depends_on: {{ ref('Dim_Events_Overview') }}\r\n-- depends_on: {{ ref('Dim_Geo_Network') }}\r\n-- depends_on: {{ ref('Dim_Traffic') }}\r\n-- depends_on: {{ ref('Dim_Adwords_Keyword') }}\r\n-- depends_on: {{ ref('Dim_Platform_Device') }}\r\n-- depends_on: {{ ref('Dim_LinkedIn') }}\r\n-- depends_on: {{ ref('Dim_GA_Ads') }}\r\n-- depends_on: {{ ref('Dim_Site') }}\r\n-- depends_on: {{ ref('Dim_Page') }}\r\n-- depends_on: {{ ref('Dim_Keyword_Site') }}\r\n-- depends_on: {{ ref('Dim_Calendar') }}\r\n\r\n{% set results = get_column_values_from_query(\"select * from \" ~ var('V_DB') ~ \".\" ~ var('V_Entity_Schema')~ \".\" ~ var('V_Mkt')~\" where DATASOURCE_TYPE in ('GA_ADS','LI_ADS','GSC','GA')\", \"ENTITY_DATASORUCE_NAME||'#'||DATASOURCE_TYPE||'#'||HISTORY_LOAD||'#'||TO_VARCHAR(nvl(HISTORY_START_DATE,HISTORY_ACTUAL_START_DATE)::DATE, 'DD/MM/YYYY')||'#'||TO_VARCHAR(HISTORY_END_DATE::DATE, 'DD/MM/YYYY')\") %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% set entity_name, entity_type,hist_load, hist_strt_dt, hist_end_dt= V_SF_Schema.split('#') %}\r\n    {% if entity_type =='GA' and hist_load  == 'true' %} \r\n        {%- for metrics in [(run_metrics('1 = 1', '93', '10','Dim_Platform_Device','DEVICE_CATEGORY','Count(*)')) ,  \r\n                    (run_metrics('1 = 1', '94', '10','Dim_Channel_Traffic','CHANNEL_GROUPING','Sum(SESSIONS)')) , \r\n                    (run_metrics('1 = 1', '95', '10','Dim_Social_Media_Acquisitions','SOCIAL_NETWORK','Count(*)')) , \r\n                    (run_metrics('1 = 1', '99', '10','Dim_Channel_Traffic','CHANNEL_GROUPING','Sum(SESSIONS)')),   \r\n                    (run_metrics('upper(KEYWORD)='\"'\"'ORGANIC'\"'\"'', '101', '10','Dim_Adwords_Keyword','KEYWORD','Sum(SESSIONS)')),\r\n                    (run_metrics('1 = 1', '102', '10','Dim_Channel_Traffic','CHANNEL_GROUPING','Sum(GOAL_COMPLETIONS_ALL)')), \r\n                    (run_metrics('1 = 1', '108', '10','Dim_Goal_Conversions','GOAL_COMPLETION_LOCATION','Sum(GOAL_COMPLETIONS_ALL)')),  \r\n                    (run_metrics('upper(KEYWORD)='\"'\"'PAID'\"'\"'', '109', '10','Dim_Adwords_Keyword','KEYWORD','Sum(SESSIONS)')), \r\n                    (run_metrics('1 = 1', '110', '10','Dim_Channel_Traffic','CHANNEL_GROUPING','Sum(GOAL_VALUE_ALL)')),\r\n                    (run_metrics('1 = 1', '112', '10','Dim_Goal_Conversions','GOAL_COMPLETION_LOCATION','Sum(GOAL_VALUE_ALL)')),   \r\n                    (run_metrics('1 = 1', '114', '10','Dim_Page_Tracking','LANDING_PAGE_PATH','Sum(PAGEVIEWS_PER_SESSION)')),\r\n                    (run_metrics('1 = 1', '115', '10','Dim_Traffic','PAGE_TITLE','Count(*)')),\r\n                    (run_metrics('1 = 1', '120', '10','Dim_Geo_Network','NETWORK_LOCATION','Sum(SESSIONS)')),                    \r\n                    (run_metrics('1 = 1', '125', '10','Dim_Channel_Traffic','CHANNEL_GROUPING','sum(USERS)')),\r\n                    (run_metrics('1 = 1', '130', '10','Dim_Social_Media_Acquisitions','NEW_USERS','sum(PAGEVIEWS)')),\r\n                    (run_metrics('1 = 1', '131', '10','Dim_Events_Overview','EVENT_CATEGORY','sum(SESSIONS_WITH_EVENT)')),\r\n                    (run_metrics('upper(CHANNEL_GROUPING)='\"'\"'ORGANIC'\"'\"'', '139', '10','Dim_Channel_Traffic','USERS','Sum(SESSIONS)'))                  \r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%}   \r\n    \r\n\r\n    {% elif entity_type =='LI_ADS' and hist_load  == 'true' %} \r\n         {%- for metrics in [(run_ad_metrics('1 = 1', '174', '10','Dim_LinkedIn','AD_GROUP_NAME','Sum(spend)')) , \r\n                    (run_ad_metrics('1 = 1', '176', '10','Dim_LinkedIn','CAMPAIGN_NAME','Sum(impressions)')),   \r\n                    (run_ad_metrics('1 = 1', '178', '10','Dim_LinkedIn','CAMPAIGN_NAME','Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))')),\r\n                    (run_ad_metrics('1 = 1', '180', '10','Dim_LinkedIn','CAMPAIGN_NAME','Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n    {% endif -%}\r\n\r\n    {% if entity_type =='FBB_ADS' and hist_load  == 'true' %} \r\n          {%- for metrics in [(run_ad_metrics('1 = 1', '176', '10','Dim_Facebook','CAMPAIGN_NAME','Sum(impressions)')),   \r\n                    (run_ad_metrics('1 = 1', '178', '10','Dim_Facebook','CAMPAIGN_NAME','Sum(CTR)')),\r\n                    (run_ad_metrics('1 = 1', '180', '10','Dim_Facebook','CAMPAIGN_NAME','Sum(CPC)')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n\r\n        {% elif entity_type =='GA_ADS' and hist_load  == 'true' %} \r\n         {%- for metrics in [(run_ad_metrics('1 = 1', '178', '10','Dim_GA_Ads','CAMPAIGN_NAME','Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))')),\r\n                    (run_ad_metrics('1 = 1', '180', '10','Dim_GA_Ads','CAMPAIGN_NAME','Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n  \r\n    {% elif entity_type =='GSC' and hist_load  == 'true' %} \r\n          {%- for metrics in [(run_ad_metrics('1 = 1', '196', '10','Dim_Page','PAGE','Sum(CLICKS)')),   \r\n                    (run_ad_metrics('1 = 1', '197', '10','Dim_Keyword_Site','KEYWORD','Sum(CLICKS)')),\r\n                    (run_ad_metrics('1 = 1', '200', '10','Dim_Page','PAGE','Sum(CTR)')),\r\n                    (run_ad_metrics('1 = 1', '201', '10','Dim_Keyword_Site','KEYWORD','Sum(CTR)')),\r\n                    (run_ad_metrics('1 = 1', '202', '10','Dim_Page','PAGE','Sum(IMPRESSIONS)')),\r\n                    (run_ad_metrics('1 = 1', '204', '10','Dim_Keyword_Site','KEYWORD','Sum(IMPRESSIONS)')),\r\n                    (run_ad_metrics('1 = 1', '205', '10','Dim_Site','COUNTRY','Sum(POSITION)')),\r\n                    (run_ad_metrics('1 = 1', '206', '10','Dim_Site','DEVICE','Sum(POSITION)')),\r\n                    (run_ad_metrics('1 = 1', '207', '10','Dim_Keyword_Site','KEYWORD','Sum(POSITION )')),\r\n                    (run_ad_metrics('1 = 1', '208', '10','Dim_Page','PAGE','Sum(POSITION)')),\r\n                    (run_ad_metrics('1 = 1', '209', '10','Dim_Site','DEVICE','Sum(CLICKS)')),\r\n                    (run_ad_metrics('1 = 1', '210', '10','Dim_Site','SEARCH_TYPE','Sum(CLICKS)')),\r\n                    (run_ad_metrics('1 = 1', '211', '10','Dim_Site','COUNTRY','Sum(IMPRESSIONS)')),\r\n                    (run_ad_metrics('1 = 1', '212', '10','Dim_Site','DEVICE','Sum(IMPRESSIONS)')),\r\n                    (run_ad_metrics('1 = 1', '213', '10','Dim_Site','SEARCH_TYPE','Sum(IMPRESSIONS)')),\r\n                    (run_ad_metrics('1 = 1', '214', '10','Dim_Site','SEARCH_TYPE','Sum(POSITION)')),\r\n                    (run_ad_metrics('1 = 1', '215', '10','Dim_Site','COUNTRY','Sum(CTR)')),\r\n                    (run_ad_metrics('1 = 1', '216', '10','Dim_Site','DEVICE','Sum(CTR)')),\r\n                    (run_ad_metrics('1 = 1', '217', '10','Dim_Site','SEARCH_TYPE','Sum(CTR)')),\r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n            {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n        {%- endfor -%} \r\n    {% endif -%}\r\n    {% if not loop.last -%}\r\n                union all\r\n            {% endif -%}\r\n\r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Marketing_Segmented"], "unique_id": "model.sales_dataflo.Fact_Marketing_Segmented", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Marketing_Segmented.sql", "original_file_path": "ETL/Target/Tables/Fact_Marketing_Segmented.sql", "name": "Fact_Marketing_Segmented", "resource_type": "model", "alias": "Fact_Marketing_Segmented", "checksum": {"name": "sha256", "checksum": "1659bc2ceef7ac2f3d592ca27d8bf589ecd98464c5b73aae4b6da638901b6f70"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_Session"], ["Dim_Channel_Traffic"], ["Dim_Social_Media_Acquisitions"], ["Dim_Page_Tracking"], ["Dim_Goal_Conversions"], ["Dim_Events_Overview"], ["Dim_Geo_Network"], ["Dim_Traffic"], ["Dim_Adwords_Keyword"], ["Dim_Platform_Device"], ["Dim_LinkedIn"], ["Dim_GA_Ads"], ["Dim_Site"], ["Dim_Page"], ["Dim_Keyword_Site"], ["Dim_Calendar"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.get_column_values_from_query", "macro.sales_dataflo.run_metrics", "macro.sales_dataflo.run_ad_metrics", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.sales_dataflo.Dim_Session", "model.sales_dataflo.Dim_Channel_Traffic", "model.sales_dataflo.Dim_Social_Media_Acquisitions", "model.sales_dataflo.Dim_Page_Tracking", "model.sales_dataflo.Dim_Goal_Conversions", "model.sales_dataflo.Dim_Events_Overview", "model.sales_dataflo.Dim_Geo_Network", "model.sales_dataflo.Dim_Traffic", "model.sales_dataflo.Dim_Adwords_Keyword", "model.sales_dataflo.Dim_Platform_Device", "model.sales_dataflo.Dim_LinkedIn", "model.sales_dataflo.Dim_GA_Ads", "model.sales_dataflo.Dim_Site", "model.sales_dataflo.Dim_Page", "model.sales_dataflo.Dim_Keyword_Site", "model.sales_dataflo.Dim_Calendar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Marketing_Segmented.sql", "deferred": false, "compiled_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='PAID' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where upper(CHANNEL_GROUPING)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='PAID' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where upper(CHANNEL_GROUPING)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )               \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )               \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Session\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site\n-- depends_on: DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n\n\n\n\n\n\n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='PAID' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where upper(CHANNEL_GROUPING)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Platform_Device  Where 1 = 1 )   \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('93' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE_CATEGORY as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('94' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('95' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SOCIAL_NETWORK as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('99' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('101' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('102' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('108' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_COMPLETIONS_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Adwords_Keyword  Where upper(KEYWORD)='PAID' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('109' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('110' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Goal_Conversions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('112' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(GOAL_COMPLETION_LOCATION as varchar(1000)) As Segment_name,\n        Sum(GOAL_VALUE_ALL)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page_Tracking  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('114' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(LANDING_PAGE_PATH as varchar(1000)) As Segment_name,\n        Sum(PAGEVIEWS_PER_SESSION)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('115' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE_TITLE as varchar(1000)) As Segment_name,\n        Count(*)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Geo_Network  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('120' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NETWORK_LOCATION as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('125' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CHANNEL_GROUPING as varchar(1000)) As Segment_name,\n        sum(USERS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Social_Media_Acquisitions  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('130' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(NEW_USERS as varchar(1000)) As Segment_name,\n        sum(PAGEVIEWS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Events_Overview  Where 1 = 1 )           \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('131' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(EVENT_CATEGORY as varchar(1000)) As Segment_name,\n        sum(SESSIONS_WITH_EVENT)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Channel_Traffic  Where upper(CHANNEL_GROUPING)='ORGANIC' )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        Source_type AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('139' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(USERS as varchar(1000)) As Segment_name,\n        Sum(SESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.Date  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.Date <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, TimeFrame_Type,Segment_name,Value,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('174' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(AD_GROUP_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('176' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(impressions)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn  Where 1 = 1 )\n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )               \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('178' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(clicks)/ (decode(Sum(impressions),0,1,Sum(impressions)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_GA_Ads  Where 1 = 1 )               \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('180' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(CAMPAIGN_NAME as varchar(1000)) As Segment_name,\n        Sum(spend)/ (decode(Sum(clicks),0,1,Sum(clicks)))  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n\n    \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('196' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('197' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('200' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('201' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('202' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('204' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('205' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('206' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Keyword_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('207' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(KEYWORD as varchar(1000)) As Segment_name,\n        Sum(POSITION )  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Page  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('208' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(PAGE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('209' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('210' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CLICKS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('211' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('212' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('213' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(IMPRESSIONS)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('214' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(POSITION)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('215' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(COUNTRY as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('216' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(DEVICE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            union all\n            \n        (\n             \nWith Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Site  Where 1 = 1 ) \n \n,date_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1550\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/03/2021', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\n,Metrics_Calc AS(\n    SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'D' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day = Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n         group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n    \n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'W' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'M' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_MNTH_STRT_DT and timeframe.CLDR_MNTH_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Q' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_QTR_STRT_DT and timeframe.CLDR_QTR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name\n\n    union\n         SELECT\n        Calendar_ID as Report_Date,\n        platform  AS entity_code,\n        'Y' as TimeFrame_Type,\n        cast('217' as number) as METRIC_ID,\n        cast('10' as number)  AS METRIC_CATEGORY_ID,\n\t\tcast(SEARCH_TYPE as varchar(1000)) As Segment_name,\n        Sum(CTR)  as Value\n     from Source \n     join timeframe \n        on source.date_day  between timeframe.CLDR_YEAR_START_DT and timeframe.CLDR_YEAR_END_DT\n        and source.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day    \n        group by\n        Report_Date,\n        entity_code,\n        TimeFrame_Type,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n\t\tSegment_name            \n    )\n SELECT Report_Date, entity_code, METRIC_ID,METRIC_CATEGORY_ID, Segment_name,Value,'D_ADS_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Date, METRIC_ID\n        )\n\n            "}, "error": "Database Error in model Fact_Marketing_Segmented (ETL/Target/Tables/Fact_Marketing_Segmented.sql)\n  001042 (XX000): SQL compilation error:\n  Compilation memory exhausted.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Fact_Marketing_Segmented.sql", "status": "ERROR", "execution_time": 57.25833296775818, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n\r\n    select *\r\n    from {{ ref('Dim_LinkedIn')}}\r\n\r\n),\r\ndate_range as \r\n(\r\n\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2021', 'dd/mm/yyyy')\",\r\n        end_date=\"dateadd(week, 53, current_date)\"\r\n       )\r\n    }}\r\n) ,\r\ntimeframe as (\r\n  select * from {{ ref('Dim_Calendar') }} \r\n  join date_range \r\n  on CALENDAR_ID = date_range.date_day\r\n  order by CALENDAR_ID \r\n)\r\nselect \r\n    'A' as platform,\r\n        Calendar_ID as Repot_date,\r\n        '100' as Metric_ID,\r\n        'W' as TimeFrame_Type,\r\n        Sum(clicks) as Sum_clicks,\r\n        Sum(impressions) as Sum_impressions,\r\n        Sum(spend) as Sum_spend,\r\n        Sum(clicks)/ Sum(impressions) as CTR_Click\r\nfrom base\r\njoin timeframe \r\n        on base.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\r\n        and base.date_day <= Calendar_ID\r\n        join date_range\r\n        on Calendar_ID = date_range.date_day         \r\ngroup by platform, \r\nRepot_date,\r\nMetric_ID,\r\nTimeFrame_Type", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "test"], "unique_id": "model.sales_dataflo.test", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/test.sql", "original_file_path": "ETL/Target/Tables/test.sql", "name": "test", "resource_type": "model", "alias": "test", "checksum": {"name": "sha256", "checksum": "be619b8fa3ec67990f4c8d1da7725cc679ae3b944495feccab3cec2927126fe9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "incremental_strategy": "delete+insert"}, "tags": [], "refs": [["Dim_LinkedIn"], ["Dim_Calendar"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_LinkedIn", "model.sales_dataflo.Dim_Calendar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/test.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n\n),\ndate_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 508\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\nselect \n    'A' as platform,\n        Calendar_ID as Repot_date,\n        '100' as Metric_ID,\n        'W' as TimeFrame_Type,\n        Sum(clicks) as Sum_clicks,\n        Sum(impressions) as Sum_impressions,\n        Sum(spend) as Sum_spend,\n        Sum(clicks)/ Sum(impressions) as CTR_Click\nfrom base\njoin timeframe \n        on base.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and base.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day         \ngroup by platform, \nRepot_date,\nMetric_ID,\nTimeFrame_Type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_LinkedIn\n\n),\ndate_range as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 508\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2021', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,\ntimeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar \n  join date_range \n  on CALENDAR_ID = date_range.date_day\n  order by CALENDAR_ID \n)\nselect \n    'A' as platform,\n        Calendar_ID as Repot_date,\n        '100' as Metric_ID,\n        'W' as TimeFrame_Type,\n        Sum(clicks) as Sum_clicks,\n        Sum(impressions) as Sum_impressions,\n        Sum(spend) as Sum_spend,\n        Sum(clicks)/ Sum(impressions) as CTR_Click\nfrom base\njoin timeframe \n        on base.date_day  between timeframe.WEEK_START_DATE and timeframe.WEEK_END_DATE\n        and base.date_day <= Calendar_ID\n        join date_range\n        on Calendar_ID = date_range.date_day         \ngroup by platform, \nRepot_date,\nMetric_ID,\nTimeFrame_Type"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.473165512084961, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T01:05:02.689005Z", "completed_at": "2021-05-19T01:05:04.402787Z"}, {"name": "execute", "started_at": "2021-05-19T01:05:04.403166Z", "completed_at": "2021-05-19T01:05:05.735922Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-05-19T01:05:08.282357Z", "elapsed_time": 836.0133249759674}