{"logs": [], "results": [{"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nwith source as \r\n(\r\n\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2015', 'dd/mm/yyyy')\",\r\n        end_date=\"dateadd(week, 53, current_date)\"\r\n       )\r\n    }}\r\n) ,Dim_Calendar as(\r\nselect\r\n      d.date_day AS Calendar_ID,\r\n      d.date_day as cldr_date,\r\n      cast({{ dbt_utils.date_trunc('month',  'd.date_day')}} as date) as cldr_mnth_strt_dt,    \r\n       cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as cldr_mnth_end_dt,\r\n        cast({{ dbt_utils.date_trunc('quarter', 'd.date_day')}} as date) as cldr_qtr_strt_dt,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as cldr_qtr_end_dt,\r\n        cast({{ dbt_utils.date_trunc('year', 'd.date_day')}} as date) as cldr_year_start_dt,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as cldr_year_end_dt,\r\n        cast({{ dbt_utils.date_trunc('week', 'd.date_day')}} as date) as week_start_date,\r\n        cast({{ dbt_utils.last_day('d.date_day', 'week') }} as date) as week_end_date,\r\n        {{ dbt_date.day_name('d.date_day', short=true) }} as day_short_name,\r\n      {{ dbt_date.month_name('d.date_day', short=true) }} as month_short_name,\r\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\r\n        cast({{ dbt_date.date_part('day', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_day_num,\r\n        cast({{ dbt_date.date_part('week', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_week_num,\r\n        'Q' || cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as cldr_qtr,\r\n        cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year,\r\n        cast(\r\n            case\r\n                when {{ dbt_date.date_part('dayofweek', 'd.date_day') }} = 0 then 7\r\n                else {{ dbt_date.date_part('dayofweek',  'd.date_day')  }}\r\n            end as {{ dbt_utils.type_int() }}\r\n            ) as day_of_week,\r\n        case\r\n            when {{ dbt_date.date_part('dayofweek',  'd.date_day') }} = 0 then 'Y'\r\n            else 'N'\r\n        end as weekend_flag,   \r\n      {{ dbt_utils.current_timestamp() }} as DW_INS_UPD_DTS,\r\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\r\nfrom\r\n    source  d\r\norder by 2)\r\n\r\nselect * from Dim_Calendar", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Calendar"], "unique_id": "model.sales_dataflo.Dim_Calendar", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Calendar.sql", "original_file_path": "ETL/Target/Tables/Dim_Calendar.sql", "name": "Dim_Calendar", "resource_type": "model", "alias": "Dim_Calendar", "checksum": {"name": "sha256", "checksum": "6c1a5e25cfe1b5820adf93549b6abe71b578439a125849f4b4b30f51610bfda7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day", "macro.dbt_date.day_name", "macro.dbt_date.month_name", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Calendar.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith source as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2561\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2015', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,Dim_Calendar as(\nselect\n      d.date_day AS Calendar_ID,\n      d.date_day as cldr_date,\n      cast(\n    date_trunc('month', d.date_day)\n as date) as cldr_mnth_strt_dt,    \n       cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        month,\n        1,\n        \n    date_trunc('month', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_mnth_end_dt,\n        cast(\n    date_trunc('quarter', d.date_day)\n as date) as cldr_qtr_strt_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        quarter,\n        1,\n        \n    date_trunc('quarter', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_qtr_end_dt,\n        cast(\n    date_trunc('year', d.date_day)\n as date) as cldr_year_start_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        year,\n        1,\n        \n    date_trunc('year', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_year_end_dt,\n        cast(\n    date_trunc('week', d.date_day)\n as date) as week_start_date,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        week,\n        1,\n        \n    date_trunc('week', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as week_end_date,\n        to_char(d.date_day, 'Dy') as day_short_name,\n      to_char(d.date_day, 'MON') as month_short_name,\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\n        cast(date_part('day', d.date_day) as \n    int\n) as cldr_day_num,\n        cast(date_part('week', d.date_day) as \n    int\n) as cldr_week_num,\n        'Q' || cast(date_part('quarter', d.date_day) as \n    int\n) as cldr_qtr,\n        cast(date_part('year', d.date_day) as \n    int\n) as year,\n        cast(\n            case\n                when date_part('dayofweek', d.date_day) = 0 then 7\n                else date_part('dayofweek', d.date_day)\n            end as \n    int\n\n            ) as day_of_week,\n        case\n            when date_part('dayofweek', d.date_day) = 0 then 'Y'\n            else 'N'\n        end as weekend_flag,   \n      \n    current_timestamp::\n    timestamp_ntz\n\n as DW_INS_UPD_DTS,\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\nfrom\n    source  d\norder by 2)\n\nselect * from Dim_Calendar", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith source as \n(\n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n     + \n    \n    p10.generated_number * pow(2, 10)\n     + \n    \n    p11.generated_number * pow(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2561\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2015', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(week, 53, current_date)\n\n)\n\nselect * from filtered\n\n\n) ,Dim_Calendar as(\nselect\n      d.date_day AS Calendar_ID,\n      d.date_day as cldr_date,\n      cast(\n    date_trunc('month', d.date_day)\n as date) as cldr_mnth_strt_dt,    \n       cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        month,\n        1,\n        \n    date_trunc('month', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_mnth_end_dt,\n        cast(\n    date_trunc('quarter', d.date_day)\n as date) as cldr_qtr_strt_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        quarter,\n        1,\n        \n    date_trunc('quarter', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_qtr_end_dt,\n        cast(\n    date_trunc('year', d.date_day)\n as date) as cldr_year_start_dt,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        year,\n        1,\n        \n    date_trunc('year', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as cldr_year_end_dt,\n        cast(\n    date_trunc('week', d.date_day)\n as date) as week_start_date,\n        cast(\n  cast(\n        \n  \n\n    dateadd(\n        day,\n        -1,\n        \n  \n\n    dateadd(\n        week,\n        1,\n        \n    date_trunc('week', d.date_day)\n\n        )\n\n\n\n        )\n\n\n\n        as date)\n as date) as week_end_date,\n        to_char(d.date_day, 'Dy') as day_short_name,\n      to_char(d.date_day, 'MON') as month_short_name,\n        cast(to_char(d.date_day, 'MMMM') as varchar(20))as month_name,\n        cast(date_part('day', d.date_day) as \n    int\n) as cldr_day_num,\n        cast(date_part('week', d.date_day) as \n    int\n) as cldr_week_num,\n        'Q' || cast(date_part('quarter', d.date_day) as \n    int\n) as cldr_qtr,\n        cast(date_part('year', d.date_day) as \n    int\n) as year,\n        cast(\n            case\n                when date_part('dayofweek', d.date_day) = 0 then 7\n                else date_part('dayofweek', d.date_day)\n            end as \n    int\n\n            ) as day_of_week,\n        case\n            when date_part('dayofweek', d.date_day) = 0 then 'Y'\n            else 'N'\n        end as weekend_flag,   \n      \n    current_timestamp::\n    timestamp_ntz\n\n as DW_INS_UPD_DTS,\n      'D_CALENDAR_DIM_LOAD' as DW_SESSION_NM\nfrom\n    source  d\norder by 2)\n\nselect * from Dim_Calendar"}, "error": null, "status": "SUCCESS 1", "execution_time": 7.34925389289856, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:18.001085Z", "completed_at": "2020-12-30T18:43:18.452202Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:18.452521Z", "completed_at": "2020-12-30T18:43:25.271084Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'employee_id'\r\n      )\r\n}}\r\n\r\nWith user AS(\r\n    select *  from {{ var('V_SF_Schema') }}.user\r\n),usr_role AS(\r\n    select *  from {{ var('V_SF_Schema') }}.user_role\r\n),Dim_Employee AS(\r\n SELECT\r\n   {{ dbt_utils.surrogate_key('user.id') }} AS employee_id,\r\n   ACCOUNT_ID AS emp_account_id,\r\n   user.id AS source_Emp_id,\r\n   cast('{{var(\"V_SF_CRM_ETL\")}}' as varchar(50)) AS Entity_id, \r\n   COMPANY_NAME AS org_name,\r\n   EMPLOYEE_NUMBER AS employee_code,\r\n   FIRST_NAME AS first_name,\r\n   NULL AS middle_name,\r\n   LAST_NAME AS last_name,\r\n   user.NAME AS emp_full_nm,\r\n   USER_ROLE_ID AS emp_role_id,\r\n   usr_role. NAME AS emp_position_level,\r\n   NULL  AS emp_gender,\r\n   PHONE AS emp_phone_number,\r\n   EMAIL AS emp_email,\r\n   NULL AS sales_branch_id,\r\n   NULL AS sales_branch_name,\r\n   NULL AS sales_region_id,\r\n   NULL AS sales_region_name,\r\n   NULL AS sales_zone_id,\r\n   NULL AS sales_zone_name,\r\n   NULL AS business_unit_id,\r\n   DEPARTMENT AS business_unit_name,\r\n   CREATED_DATE AS emp_create_dt,\r\n   user.LAST_MODIFIED_DATE AS emp_last_update_dt,\r\n   MANAGER_ID AS mngr_emp_id,\r\n   usr_role.NAME AS mngr_position_level,\r\n   USER_ROLE_ID AS mngr_role_id,\r\n   NULL AS emp_financial_year_start,\r\n   NULL AS emp_start_of_week,\r\n   NULL AS Weekly_working_days,\r\n   IS_ACTIVE AS  emp_active,\r\n   {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\r\n   {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n  FROM\r\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.ID\r\n)\r\n\r\nselect * from Dim_Employee", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Employee"], "unique_id": "model.sales_dataflo.Dim_Employee", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Employee.sql", "original_file_path": "ETL/Target/Tables/Dim_Employee.sql", "name": "Dim_Employee", "resource_type": "model", "alias": "Dim_Employee", "checksum": {"name": "sha256", "checksum": "5ff0579d624db3ed7de31c0151b92e0f9dad605861a4b84f6444ddf81500ef30"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "employee_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Employee.sql", "deferred": false, "compiled_sql": "\n\n\n\nWith user AS(\n    select *  from DBT_TEST_LIVEDATA_RK.user\n),usr_role AS(\n    select *  from DBT_TEST_LIVEDATA_RK.user_role\n),Dim_Employee AS(\n SELECT\n   md5(cast(\n    \n    coalesce(cast(user.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS employee_id,\n   ACCOUNT_ID AS emp_account_id,\n   user.id AS source_Emp_id,\n   cast('FIVETRAN_SF' as varchar(50)) AS Entity_id, \n   COMPANY_NAME AS org_name,\n   EMPLOYEE_NUMBER AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   user.NAME AS emp_full_nm,\n   USER_ROLE_ID AS emp_role_id,\n   usr_role. NAME AS emp_position_level,\n   NULL  AS emp_gender,\n   PHONE AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   DEPARTMENT AS business_unit_name,\n   CREATED_DATE AS emp_create_dt,\n   user.LAST_MODIFIED_DATE AS emp_last_update_dt,\n   MANAGER_ID AS mngr_emp_id,\n   usr_role.NAME AS mngr_position_level,\n   USER_ROLE_ID AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n     'SF'  as Source_type,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.ID\n)\n\nselect * from Dim_Employee", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWith user AS(\n    select *  from DBT_TEST_LIVEDATA_RK.user\n),usr_role AS(\n    select *  from DBT_TEST_LIVEDATA_RK.user_role\n),Dim_Employee AS(\n SELECT\n   md5(cast(\n    \n    coalesce(cast(user.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS employee_id,\n   ACCOUNT_ID AS emp_account_id,\n   user.id AS source_Emp_id,\n   cast('FIVETRAN_SF' as varchar(50)) AS Entity_id, \n   COMPANY_NAME AS org_name,\n   EMPLOYEE_NUMBER AS employee_code,\n   FIRST_NAME AS first_name,\n   NULL AS middle_name,\n   LAST_NAME AS last_name,\n   user.NAME AS emp_full_nm,\n   USER_ROLE_ID AS emp_role_id,\n   usr_role. NAME AS emp_position_level,\n   NULL  AS emp_gender,\n   PHONE AS emp_phone_number,\n   EMAIL AS emp_email,\n   NULL AS sales_branch_id,\n   NULL AS sales_branch_name,\n   NULL AS sales_region_id,\n   NULL AS sales_region_name,\n   NULL AS sales_zone_id,\n   NULL AS sales_zone_name,\n   NULL AS business_unit_id,\n   DEPARTMENT AS business_unit_name,\n   CREATED_DATE AS emp_create_dt,\n   user.LAST_MODIFIED_DATE AS emp_last_update_dt,\n   MANAGER_ID AS mngr_emp_id,\n   usr_role.NAME AS mngr_position_level,\n   USER_ROLE_ID AS mngr_role_id,\n   NULL AS emp_financial_year_start,\n   NULL AS emp_start_of_week,\n   NULL AS Weekly_working_days,\n   IS_ACTIVE AS  emp_active,\n     'SF'  as Source_type,\n   'D_EMPLOYEE_DIM_LOAD' AS DW_SESSION_NM,\n   \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n  FROM\n      user left join usr_role  on user.USER_ROLE_ID = usr_role.ID\n)\n\nselect * from Dim_Employee"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.3423378467559814, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:25.353314Z", "completed_at": "2020-12-30T18:43:25.385621Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:25.385883Z", "completed_at": "2020-12-30T18:43:26.627740Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Account_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS\r\n (\r\n select * from {{ var('V_SF_Schema') }}.Account\r\n  ),\r\nDIM_ACCOUNT as (\r\n      select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Account_ID,\r\n        NAME AS Account_Name,\r\n        TYPE AS Account_Type,\r\n        ID AS Source_ID,\r\n        IS_DELETED AS Active_Flag,\r\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\r\n        INDUSTRY AS INDUSTRY,\r\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\r\n        OWNER_ID AS Employee_ID,\r\n        CREATED_DATE as INITIAL_CREATE_DT,\r\n        {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM source\r\n    )\r\nselect * from DIM_ACCOUNT", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Account"], "unique_id": "model.sales_dataflo.Dim_Account", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Account.sql", "original_file_path": "ETL/Target/Tables/Dim_Account.sql", "name": "Dim_Account", "resource_type": "model", "alias": "Dim_Account", "checksum": {"name": "sha256", "checksum": "fb26f2be4c053b39559f133196ecbf10a327b90a2ed3bc5661f19dc22bae48eb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "Account_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Account.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS\n (\n select * from DBT_TEST_LIVEDATA_RK.Account\n  ),\nDIM_ACCOUNT as (\n      select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n          'SF'  as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ACCOUNT", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS\n (\n select * from DBT_TEST_LIVEDATA_RK.Account\n  ),\nDIM_ACCOUNT as (\n      select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n          'SF'  as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM source\n    )\nselect * from DIM_ACCOUNT"}, "error": null, "status": "SUCCESS 16234", "execution_time": 2.9310142993927, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:26.698093Z", "completed_at": "2020-12-30T18:43:26.728307Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:26.728552Z", "completed_at": "2020-12-30T18:43:29.548496Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'lead_id'\r\n      )\r\n}}\r\n\r\n    WITH lead AS (\r\n       select *  from {{ var('V_SF_Schema') }}.Lead\r\n    ),opportunity as(\r\n        select *  from {{ var('V_SF_Schema') }}.Opportunity \r\n    ),Dim_Lead as(\r\n    SELECT\r\n        {{ dbt_utils.surrogate_key('lead.id') }} AS lead_id,\r\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\r\n        lead.ID AS source_id,\r\n        concat(COALESCE(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country)) AS lead_contact_address,\r\n        lead.STATUS AS STATUS,\r\n        opportunity.STAGE_NAME AS STAGE_NAME,\r\n        NULL AS product_id,\r\n        NULL AS campaign_id,\r\n        lead.IS_CONVERTED AS lead_to_opp_flag,\r\n        null AS lead_lost_flag,\r\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\r\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\r\n        NULL AS lead_lost_dt,\r\n        NULL AS lead_lost_reason,\r\n        lead.INDUSTRY AS Industry,\r\n        LEAD.owner_id AS employee_id,\r\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\r\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\r\n        {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n        FROM\r\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.id \r\n    )    \r\n \r\nselect * from Dim_Lead", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Lead"], "unique_id": "model.sales_dataflo.Dim_Lead", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Lead.sql", "original_file_path": "ETL/Target/Tables/Dim_Lead.sql", "name": "Dim_Lead", "resource_type": "model", "alias": "Dim_Lead", "checksum": {"name": "sha256", "checksum": "add3eede36bc03d7182e10b93e5f878816155ec055ca1fd671a9ee0c9ab5ca89"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "lead_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Lead.sql", "deferred": false, "compiled_sql": "\n\n\n\n    WITH lead AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Lead\n    ),opportunity as(\n        select *  from DBT_TEST_LIVEDATA_RK.Opportunity \n    ),Dim_Lead as(\n    SELECT\n        md5(cast(\n    \n    coalesce(cast(lead.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS lead_id,\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\n        lead.ID AS source_id,\n        concat(COALESCE(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country)) AS lead_contact_address,\n        lead.STATUS AS STATUS,\n        opportunity.STAGE_NAME AS STAGE_NAME,\n        NULL AS product_id,\n        NULL AS campaign_id,\n        lead.IS_CONVERTED AS lead_to_opp_flag,\n        null AS lead_lost_flag,\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\n        NULL AS lead_lost_dt,\n        NULL AS lead_lost_reason,\n        lead.INDUSTRY AS Industry,\n        LEAD.owner_id AS employee_id,\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\n          'SF'  as Source_type,\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.id \n    )    \n \nselect * from Dim_Lead", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n    WITH lead AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Lead\n    ),opportunity as(\n        select *  from DBT_TEST_LIVEDATA_RK.Opportunity \n    ),Dim_Lead as(\n    SELECT\n        md5(cast(\n    \n    coalesce(cast(lead.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS lead_id,\n        lead.LEAD_SOURCE AS LEAD_SOURCE,\n        lead.ID AS source_id,\n        concat(COALESCE(lead.street,' ',lead.city,' ',lead.state,' ',lead.postal_code,' ',lead.country)) AS lead_contact_address,\n        lead.STATUS AS STATUS,\n        opportunity.STAGE_NAME AS STAGE_NAME,\n        NULL AS product_id,\n        NULL AS campaign_id,\n        lead.IS_CONVERTED AS lead_to_opp_flag,\n        null AS lead_lost_flag,\n        lead.CONVERTED_DATE AS lead_CONVERTED_DATE,\n        lead.CONVERTED_OPPORTUNITY_ID AS CONVERTED_OPPORTUNITY_ID,\n        NULL AS lead_lost_dt,\n        NULL AS lead_lost_reason,\n        lead.INDUSTRY AS Industry,\n        LEAD.owner_id AS employee_id,\n        lead.CREATED_DATE as INITIAL_CREATE_DT,\n        lead.LAST_MODIFIED_DATE as lead_LAST_MODIFIED_DATE,\n          'SF'  as Source_type,\n        'D_LEAD_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n        FROM\n          lead left join opportunity on lead.CONVERTED_OPPORTUNITY_ID = opportunity.id \n    )    \n \nselect * from Dim_Lead"}, "error": null, "status": "SUCCESS 114992", "execution_time": 4.7769246101379395, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:29.631555Z", "completed_at": "2020-12-30T18:43:29.662330Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:29.662556Z", "completed_at": "2020-12-30T18:43:34.337875Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'opportunity_id'\r\n      )\r\n}}\r\n\r\n    WITH OPPORTUNITY AS (\r\n       select *  from {{ var('V_SF_Schema') }}.opportunity \r\n    ),contact AS(\r\n        select *  from {{ var('V_SF_Schema') }}.contact    \r\n    ),\r\n    emp AS(\r\n        select *  from {{ var('V_SF_Schema') }}.user    \r\n    ),\r\n    --OPPORTUNITY_LINE_ITEM AS(\r\n    --      select OPPORTUNITY_ID,PRODUCT_2_ID ,PRODUCT_CODE,TOTAL_PRICE from {{ var('V_SF_Schema') }}.OPPORTUNITY_LINE_ITEM\r\n     --),\r\n    OPPORTUNITY_STAGE AS(\r\n        select *  from {{ var('V_SF_Schema') }}.opportunity_stage  \r\n    )\r\n    ,Dim_Opportunity as(\r\n    SELECT\r\n        {{ dbt_utils.surrogate_key('OPPORTUNITY.id') }} AS opportunity_id,\r\n        OPPORTUNITY.NAME AS opportunity_NAME,\r\n        OPPORTUNITY.TYPE AS opportunity_Type, \r\n        OPPORTUNITY.ACCOUNT_ID AS ACCOUNT_ID,        \r\n        OPPORTUNITY.OWNER_ID AS employee_id,\r\n        OPPORTUNITY.ID AS Source_id,\r\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\r\n        OPPORTUNITY.IS_WON as IS_WON,\r\n        OPPORTUNITY.IS_CLOSED as IS_CLOSED,\r\n        OPPORTUNITY.stage_name AS stage_name,\r\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \r\n        OPPORTUNITY.FORECAST_CATEGORY as FORECAST_CATEGORY,\r\n        OPPORTUNITY.AMOUNT AS AMOUNT,\r\n        --OPPORTUNITY.EXPECTED_REVENUE as EXPECTED_REVENUE,\r\n        NULL AS amount_without_disc,\r\n        NULL AS expectd_Clouser_Dt,\r\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\r\n        contact.NAME AS contact_name,\r\n        contact.PHONE AS contact_number,\r\n        contact.EMAIL AS contact_email,\r\n        contact.MAILING_STREET AS contact_address,\r\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\r\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\r\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\r\n        NULL AS prospect_Dt,\r\n        NULL AS stage_calc_id,\r\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\r\n        NULL AS stage_end_dt,        \r\n        NULL AS lead_lost_reason,\r\n        --OPPORTUNITY.CAMPAIGN_ID AS campaign_id,\r\n        NULL AS competitor,\r\n        NULL AS on_hold_flag,\r\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_2_ID AS product_id,\r\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_CODE AS product_name,\r\n        NULL AS sub_product_id,\r\n        NULL AS sub_product_name,\r\n        --OPPORTUNITY_LINE_ITEM. TOTAL_PRICE AS product_amount,\r\n        NULL AS prd_amount_without_disc,\r\n        NULL AS prd_discount,\r\n        OPPORTUNITY. IS_DELETED AS active_flag,\r\n        NULL AS DW_CURR_FLG,\r\n        NULL AS EFFCT_START_DATE,\r\n        NULL AS EFFCT_END_DATE,\r\n        {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n      FROM\r\n        OPPORTUNITY \r\n        left join emp on OPPORTUNITY.Owner_id  =  emp.id\r\n        left join contact on emp.contact_id  =  contact.id\r\n        --left join OPPORTUNITY_LINE_ITEM on OPPORTUNITY.ID = OPPORTUNITY_LINE_ITEM.OPPORTUNITY_ID\r\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL\r\n     \r\n    )    \r\n    \r\n\r\nselect * from Dim_Opportunity", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Opportunity"], "unique_id": "model.sales_dataflo.Dim_Opportunity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Opportunity.sql", "original_file_path": "ETL/Target/Tables/Dim_Opportunity.sql", "name": "Dim_Opportunity", "resource_type": "model", "alias": "Dim_Opportunity", "checksum": {"name": "sha256", "checksum": "7685503b17808529ab104feb175204949830416369dcb9bf1049cf5da0276af9"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "opportunity_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Opportunity.sql", "deferred": false, "compiled_sql": "\n\n\n\n    WITH OPPORTUNITY AS (\n       select *  from DBT_TEST_LIVEDATA_RK.opportunity \n    ),contact AS(\n        select *  from DBT_TEST_LIVEDATA_RK.contact    \n    ),\n    emp AS(\n        select *  from DBT_TEST_LIVEDATA_RK.user    \n    ),\n    --OPPORTUNITY_LINE_ITEM AS(\n    --      select OPPORTUNITY_ID,PRODUCT_2_ID ,PRODUCT_CODE,TOTAL_PRICE from DBT_TEST_LIVEDATA_RK.OPPORTUNITY_LINE_ITEM\n     --),\n    OPPORTUNITY_STAGE AS(\n        select *  from DBT_TEST_LIVEDATA_RK.opportunity_stage  \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        md5(cast(\n    \n    coalesce(cast(OPPORTUNITY.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS opportunity_id,\n        OPPORTUNITY.NAME AS opportunity_NAME,\n        OPPORTUNITY.TYPE AS opportunity_Type, \n        OPPORTUNITY.ACCOUNT_ID AS ACCOUNT_ID,        \n        OPPORTUNITY.OWNER_ID AS employee_id,\n        OPPORTUNITY.ID AS Source_id,\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\n        OPPORTUNITY.IS_WON as IS_WON,\n        OPPORTUNITY.IS_CLOSED as IS_CLOSED,\n        OPPORTUNITY.stage_name AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        OPPORTUNITY.FORECAST_CATEGORY as FORECAST_CATEGORY,\n        OPPORTUNITY.AMOUNT AS AMOUNT,\n        --OPPORTUNITY.EXPECTED_REVENUE as EXPECTED_REVENUE,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\n        contact.NAME AS contact_name,\n        contact.PHONE AS contact_number,\n        contact.EMAIL AS contact_email,\n        contact.MAILING_STREET AS contact_address,\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        --OPPORTUNITY.CAMPAIGN_ID AS campaign_id,\n        NULL AS competitor,\n        NULL AS on_hold_flag,\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_2_ID AS product_id,\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_CODE AS product_name,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        --OPPORTUNITY_LINE_ITEM. TOTAL_PRICE AS product_amount,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        OPPORTUNITY. IS_DELETED AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n          'SF'  as Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.Owner_id  =  emp.id\n        left join contact on emp.contact_id  =  contact.id\n        --left join OPPORTUNITY_LINE_ITEM on OPPORTUNITY.ID = OPPORTUNITY_LINE_ITEM.OPPORTUNITY_ID\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL\n     \n    )    \n    \n\nselect * from Dim_Opportunity", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n    WITH OPPORTUNITY AS (\n       select *  from DBT_TEST_LIVEDATA_RK.opportunity \n    ),contact AS(\n        select *  from DBT_TEST_LIVEDATA_RK.contact    \n    ),\n    emp AS(\n        select *  from DBT_TEST_LIVEDATA_RK.user    \n    ),\n    --OPPORTUNITY_LINE_ITEM AS(\n    --      select OPPORTUNITY_ID,PRODUCT_2_ID ,PRODUCT_CODE,TOTAL_PRICE from DBT_TEST_LIVEDATA_RK.OPPORTUNITY_LINE_ITEM\n     --),\n    OPPORTUNITY_STAGE AS(\n        select *  from DBT_TEST_LIVEDATA_RK.opportunity_stage  \n    )\n    ,Dim_Opportunity as(\n    SELECT\n        md5(cast(\n    \n    coalesce(cast(OPPORTUNITY.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS opportunity_id,\n        OPPORTUNITY.NAME AS opportunity_NAME,\n        OPPORTUNITY.TYPE AS opportunity_Type, \n        OPPORTUNITY.ACCOUNT_ID AS ACCOUNT_ID,        \n        OPPORTUNITY.OWNER_ID AS employee_id,\n        OPPORTUNITY.ID AS Source_id,\n        OPPORTUNITY_STAGE.SORT_ORDER AS stage_id,\n        OPPORTUNITY.IS_WON as IS_WON,\n        OPPORTUNITY.IS_CLOSED as IS_CLOSED,\n        OPPORTUNITY.stage_name AS stage_name,\n        --   OPPORTUNITY.PROBABILITY as PROBABILITY,        \n        OPPORTUNITY.FORECAST_CATEGORY as FORECAST_CATEGORY,\n        OPPORTUNITY.AMOUNT AS AMOUNT,\n        --OPPORTUNITY.EXPECTED_REVENUE as EXPECTED_REVENUE,\n        NULL AS amount_without_disc,\n        NULL AS expectd_Clouser_Dt,\n        OPPORTUNITY.CONTACT_ID AS Contact_id,\n        contact.NAME AS contact_name,\n        contact.PHONE AS contact_number,\n        contact.EMAIL AS contact_email,\n        contact.MAILING_STREET AS contact_address,\n        OPPORTUNITY.CREATED_DATE AS initial_create_dt,\n        OPPORTUNITY.LAST_MODIFIED_DATE AS last_updated_dt,\n        OPPORTUNITY.CLOSE_DATE AS CLOSE_DATE,\n        NULL AS prospect_Dt,\n        NULL AS stage_calc_id,\n        OPPORTUNITY_STAGE.CREATED_DATE AS stage_start_dt,\n        NULL AS stage_end_dt,        \n        NULL AS lead_lost_reason,\n        --OPPORTUNITY.CAMPAIGN_ID AS campaign_id,\n        NULL AS competitor,\n        NULL AS on_hold_flag,\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_2_ID AS product_id,\n        --OPPORTUNITY_LINE_ITEM. PRODUCT_CODE AS product_name,\n        NULL AS sub_product_id,\n        NULL AS sub_product_name,\n        --OPPORTUNITY_LINE_ITEM. TOTAL_PRICE AS product_amount,\n        NULL AS prd_amount_without_disc,\n        NULL AS prd_discount,\n        OPPORTUNITY. IS_DELETED AS active_flag,\n        NULL AS DW_CURR_FLG,\n        NULL AS EFFCT_START_DATE,\n        NULL AS EFFCT_END_DATE,\n          'SF'  as Source_type,\n        'D_OPPORTUNITY_DIM_LOAD'  AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n      FROM\n        OPPORTUNITY \n        left join emp on OPPORTUNITY.Owner_id  =  emp.id\n        left join contact on emp.contact_id  =  contact.id\n        --left join OPPORTUNITY_LINE_ITEM on OPPORTUNITY.ID = OPPORTUNITY_LINE_ITEM.OPPORTUNITY_ID\n        left join OPPORTUNITY_STAGE on OPPORTUNITY.stage_name = OPPORTUNITY_STAGE.MASTER_LABEL\n     \n    )    \n    \n\nselect * from Dim_Opportunity"}, "error": null, "status": "SUCCESS 11459", "execution_time": 3.887105941772461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:34.410981Z", "completed_at": "2020-12-30T18:43:34.464349Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:34.464611Z", "completed_at": "2020-12-30T18:43:38.222610Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'contact_id'\r\n      )\r\n}}\r\n\r\nWITH contacts AS (\r\n       select *  from {{ var('V_SF_Schema') }}.Contact \r\n    ),\r\nDim_Contact as(\r\n      SELECT \r\n        {{ dbt_utils.surrogate_key('contacts.id') }} AS contact_id, \r\n        contacts.salutation AS salutation, \r\n        contacts.NAME AS contact_name, \r\n        contacts.last_name AS last_name, \r\n        contacts.first_name AS first_name, \r\n        contacts.phone AS contact_number, \r\n        contacts.mobile_phone AS mobile_phone, \r\n        contacts.home_phone AS home_phone, \r\n        contacts.email AS contact_email, \r\n        contacts.id AS source_id, \r\n        contacts.department AS department, \r\n        contacts.lead_source AS lead_source, \r\n        null AS organization_id, \r\n        contacts.owner_ID AS employee_id, \r\n        contacts.account_id AS account_id, \r\n        NULL AS contact_age_group, \r\n        NULL AS contact_income, \r\n        NULL AS dependent, \r\n        NULL AS contact_type, \r\n        contacts.IS_DELETED AS active,\r\n        CREATED_DATE as INITIAL_CREATE_DT,\r\n        {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM \r\n       contacts\r\n    )    \r\n    \r\nselect * from Dim_Contact", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Contact"], "unique_id": "model.sales_dataflo.Dim_Contact", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Contact.sql", "original_file_path": "ETL/Target/Tables/Dim_Contact.sql", "name": "Dim_Contact", "resource_type": "model", "alias": "Dim_Contact", "checksum": {"name": "sha256", "checksum": "aebbfff1aae1567225b8878a73aafd6b9222e5adf216c6beab5932413d336141"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "contact_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Contact.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH contacts AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Contact \n    ),\nDim_Contact as(\n      SELECT \n        md5(cast(\n    \n    coalesce(cast(contacts.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS contact_id, \n        contacts.salutation AS salutation, \n        contacts.NAME AS contact_name, \n        contacts.last_name AS last_name, \n        contacts.first_name AS first_name, \n        contacts.phone AS contact_number, \n        contacts.mobile_phone AS mobile_phone, \n        contacts.home_phone AS home_phone, \n        contacts.email AS contact_email, \n        contacts.id AS source_id, \n        contacts.department AS department, \n        contacts.lead_source AS lead_source, \n        null AS organization_id, \n        contacts.owner_ID AS employee_id, \n        contacts.account_id AS account_id, \n        NULL AS contact_age_group, \n        NULL AS contact_income, \n        NULL AS dependent, \n        NULL AS contact_type, \n        contacts.IS_DELETED AS active,\n        CREATED_DATE as INITIAL_CREATE_DT,\n          'SF'  as Source_type,\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM \n       contacts\n    )    \n    \nselect * from Dim_Contact", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH contacts AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Contact \n    ),\nDim_Contact as(\n      SELECT \n        md5(cast(\n    \n    coalesce(cast(contacts.id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS contact_id, \n        contacts.salutation AS salutation, \n        contacts.NAME AS contact_name, \n        contacts.last_name AS last_name, \n        contacts.first_name AS first_name, \n        contacts.phone AS contact_number, \n        contacts.mobile_phone AS mobile_phone, \n        contacts.home_phone AS home_phone, \n        contacts.email AS contact_email, \n        contacts.id AS source_id, \n        contacts.department AS department, \n        contacts.lead_source AS lead_source, \n        null AS organization_id, \n        contacts.owner_ID AS employee_id, \n        contacts.account_id AS account_id, \n        NULL AS contact_age_group, \n        NULL AS contact_income, \n        NULL AS dependent, \n        NULL AS contact_type, \n        contacts.IS_DELETED AS active,\n        CREATED_DATE as INITIAL_CREATE_DT,\n          'SF'  as Source_type,\n        'D_CONTACT_DIM_LOAD' AS dw_session_nm, \n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM \n       contacts\n    )    \n    \nselect * from Dim_Contact"}, "error": null, "status": "SUCCESS 237706", "execution_time": 6.201858758926392, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:38.300287Z", "completed_at": "2020-12-30T18:43:38.330468Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:38.330697Z", "completed_at": "2020-12-30T18:43:44.414279Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nWITH source AS (\r\n       select *  from {{ var('V_SF_Schema') }}.Contact \r\n    ),Dim_Address AS(\r\n        SELECT \r\n            {{ dbt_utils.surrogate_key('id') }} AS  address_id,\r\n            account_id AS account_id,\r\n            id as source_id,\r\n            MAILING_STREET AS STREET,\r\n            MAILING_CITY AS CITY,\r\n            MAILING_STATE AS STATE,\r\n            MAILING_POSTAL_CODE AS POSTAL_CODE,\r\n            MAILING_COUNTRY AS COUNTRY,\r\n            'Billing' as address_type,\r\n            {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\r\n            {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n            from source\r\n        union \r\n        SELECT\r\n            {{ dbt_utils.surrogate_key('id') }} AS  address_id,\r\n            account_id AS account_id,\r\n            id as source_id,\r\n            OTHER_STREET AS STREET,\r\n            OTHER_CITY AS CITY,\r\n            OTHER_STATE AS STATE,\r\n            OTHER_POSTAL_CODE AS POSTAL_CODE,\r\n            OTHER_COUNTRY As COUNTRY, \r\n            'Shipping' as address_type,\r\n            {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\r\n            {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n             from source\r\n    )\r\n    \r\nselect * from Dim_Address", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Address"], "unique_id": "model.sales_dataflo.Dim_Address", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Address.Sql", "original_file_path": "ETL/Target/Tables/Dim_Address.Sql", "name": "Dim_Address", "resource_type": "model", "alias": "Dim_Address", "checksum": {"name": "sha256", "checksum": "150f99d3abdceffaf8dd23b701e1e34e999675e3df9c0fb353153fb49d30b4f9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Address.Sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Contact \n    ),Dim_Address AS(\n        SELECT \n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS  address_id,\n            account_id AS account_id,\n            id as source_id,\n            MAILING_STREET AS STREET,\n            MAILING_CITY AS CITY,\n            MAILING_STATE AS STATE,\n            MAILING_POSTAL_CODE AS POSTAL_CODE,\n            MAILING_COUNTRY AS COUNTRY,\n            'Billing' as address_type,\n              'SF'  as Source_type,\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n            from source\n        union \n        SELECT\n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS  address_id,\n            account_id AS account_id,\n            id as source_id,\n            OTHER_STREET AS STREET,\n            OTHER_CITY AS CITY,\n            OTHER_STATE AS STATE,\n            OTHER_POSTAL_CODE AS POSTAL_CODE,\n            OTHER_COUNTRY As COUNTRY, \n            'Shipping' as address_type,\n              'SF'  as Source_type,\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n             from source\n    )\n    \nselect * from Dim_Address", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Contact \n    ),Dim_Address AS(\n        SELECT \n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS  address_id,\n            account_id AS account_id,\n            id as source_id,\n            MAILING_STREET AS STREET,\n            MAILING_CITY AS CITY,\n            MAILING_STATE AS STATE,\n            MAILING_POSTAL_CODE AS POSTAL_CODE,\n            MAILING_COUNTRY AS COUNTRY,\n            'Billing' as address_type,\n              'SF'  as Source_type,\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n            from source\n        union \n        SELECT\n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS  address_id,\n            account_id AS account_id,\n            id as source_id,\n            OTHER_STREET AS STREET,\n            OTHER_CITY AS CITY,\n            OTHER_STATE AS STATE,\n            OTHER_POSTAL_CODE AS POSTAL_CODE,\n            OTHER_COUNTRY As COUNTRY, \n            'Shipping' as address_type,\n              'SF'  as Source_type,\n             'D_ADDRESS_DIM_LOAD' AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n             from source\n    )\n    \nselect * from Dim_Address"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.1872613430023193, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:44.506001Z", "completed_at": "2020-12-30T18:43:44.543451Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:44.543802Z", "completed_at": "2020-12-30T18:43:47.623196Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Campaign_ID'\r\n      )\r\n}}\r\n\r\nWITH source AS (\r\n    select * from {{ var('V_SF_Schema') }}.Campaign \r\n    ),\r\nDim_Campaign as (\r\n\r\n      SELECT\r\n        NULL AS Account_ID,\r\n        {{ dbt_utils.surrogate_key('id') }} AS Campaign_ID,\r\n        NAME AS Campaign_Name,\r\n        IS_ACTIVE AS active_flag,\r\n        ID AS Source_ID,\r\n        TYPE AS TYPE,\r\n        STATUS AS STATUS,\r\n        START_DATE AS START_DATE,\r\n        END_DATE AS END_DATE,\r\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\r\n        BUDGETED_COST AS BUDGETED_COST,\r\n        ACTUAL_COST AS ACTUAL_COST,\r\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\r\n        NUMBER_SENT AS NUMBER_SENT,\r\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\r\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\r\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\r\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\r\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\r\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\r\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\r\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\r\n         {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM\r\n        source     \r\n      )\r\n\r\n  select * from  Dim_Campaign", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Campaign"], "unique_id": "model.sales_dataflo.Dim_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Campaign.sql", "original_file_path": "ETL/Target/Tables/Dim_Campaign.sql", "name": "Dim_Campaign", "resource_type": "model", "alias": "Dim_Campaign", "checksum": {"name": "sha256", "checksum": "6305a84d7d68fcb359b08ac27da9bc7e65174befddd845338559f904965597b3"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "Campaign_ID"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Campaign.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS (\n    select * from DBT_TEST_LIVEDATA_RK.Campaign \n    ),\nDim_Campaign as (\n\n      SELECT\n        NULL AS Account_ID,\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS Campaign_ID,\n        NAME AS Campaign_Name,\n        IS_ACTIVE AS active_flag,\n        ID AS Source_ID,\n        TYPE AS TYPE,\n        STATUS AS STATUS,\n        START_DATE AS START_DATE,\n        END_DATE AS END_DATE,\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\n        BUDGETED_COST AS BUDGETED_COST,\n        ACTUAL_COST AS ACTUAL_COST,\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\n        NUMBER_SENT AS NUMBER_SENT,\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\n           'SF'  as Source_type,\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n        source     \n      )\n\n  select * from  Dim_Campaign", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS (\n    select * from DBT_TEST_LIVEDATA_RK.Campaign \n    ),\nDim_Campaign as (\n\n      SELECT\n        NULL AS Account_ID,\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS Campaign_ID,\n        NAME AS Campaign_Name,\n        IS_ACTIVE AS active_flag,\n        ID AS Source_ID,\n        TYPE AS TYPE,\n        STATUS AS STATUS,\n        START_DATE AS START_DATE,\n        END_DATE AS END_DATE,\n        EXPECTED_REVENUE AS EXPECTED_REVENUE,\n        BUDGETED_COST AS BUDGETED_COST,\n        ACTUAL_COST AS ACTUAL_COST,\n        EXPECTED_RESPONSE AS EXPECTED_RESPONSE,\n        NUMBER_SENT AS NUMBER_SENT,\n        NUMBER_OF_LEADS AS NUMBER_OF_LEADS,\n        NUMBER_OF_CONVERTED_LEADS AS NUMBER_OF_CONVERTED_LEADS,\n        NUMBER_OF_CONTACTS AS NUMBER_OF_CONTACTS,\n        NUMBER_OF_RESPONSES AS NUMBER_OF_RESPONSES,\n        NUMBER_OF_OPPORTUNITIES AS NUMBER_OF_OPPORTUNITIES,\n        NUMBER_OF_WON_OPPORTUNITIES AS NUMBER_OF_WON_OPPORTUNITIES,\n        AMOUNT_ALL_OPPORTUNITIES AS AMOUNT_ALL_OPPORTUNITIES,\n        AMOUNT_WON_OPPORTUNITIES AS AMOUNT_WON_OPPORTUNITIES,\n           'SF'  as Source_type,\n        'D_CAMPAIGN_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n        source     \n      )\n\n  select * from  Dim_Campaign"}, "error": null, "status": "SUCCESS 1268", "execution_time": 2.802730083465576, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:47.695923Z", "completed_at": "2020-12-30T18:43:47.727510Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:47.727742Z", "completed_at": "2020-12-30T18:43:50.418427Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nselect * from (\r\nSelect 1 entity_id,'DBT_TEST_LIVEDATA_RK' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 2 entity_id,'SALESFORCE_FREETRAILS' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\n)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Entity"], "unique_id": "model.sales_dataflo.Dim_Entity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Entity.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Entity.sql", "name": "Dim_Entity", "resource_type": "model", "alias": "Dim_Entity", "checksum": {"name": "sha256", "checksum": "a593204d3e4b5ad02760c7023d678cdfc89f1170a9b4003bb2ace4b6177c81a6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Entity.sql", "deferred": false, "compiled_sql": "\n\nselect * from (\nSelect 1 entity_id,'DBT_TEST_LIVEDATA_RK' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 entity_id,'SALESFORCE_FREETRAILS' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from (\nSelect 1 entity_id,'DBT_TEST_LIVEDATA_RK' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 entity_id,'SALESFORCE_FREETRAILS' entity_name,'D_ENTITY_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.2229321002960205, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:50.502134Z", "completed_at": "2020-12-30T18:43:50.535139Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:50.535382Z", "completed_at": "2020-12-30T18:43:51.658231Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Stage_id'\r\n      )\r\n}}\r\n\r\nWITH source AS (\r\n       select *  from {{ var('V_SF_Schema') }}.Opportunity_stage \r\n    ),Dim_Opportunity_stage as(\r\n        SELECT\r\n        {{ dbt_utils.surrogate_key('id') }}  AS stage_id,\r\n        MASTER_LABEL AS stage_name,\r\n        SORT_ORDER AS stage_position,\r\n        NULL AS account_id,\r\n        IS_ACTIVE AS active_flag,\r\n        ID AS Source_id,\r\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\r\n        NULL AS lead_opp_flag,\r\n        IS_CLOSED AS IS_CLOSED,\r\n        IS_WON AS IS_WON,\r\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\r\n        {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n     FROM\r\n       source\r\n    )    \r\n\r\nselect * from Dim_Opportunity_stage", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Opportunity_Stage"], "unique_id": "model.sales_dataflo.Dim_Opportunity_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Opportunity_Stage.sql", "original_file_path": "ETL/Target/Tables/Dim_Opportunity_Stage.sql", "name": "Dim_Opportunity_Stage", "resource_type": "model", "alias": "Dim_Opportunity_Stage", "checksum": {"name": "sha256", "checksum": "ad723354a51c6df62747106e12ff582ac33da80a50cf172c9c28e581388f6be0"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "Stage_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Opportunity_Stage.sql", "deferred": false, "compiled_sql": "\n\n\n\nWITH source AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Opportunity_stage \n    ),Dim_Opportunity_stage as(\n        SELECT\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS stage_id,\n        MASTER_LABEL AS stage_name,\n        SORT_ORDER AS stage_position,\n        NULL AS account_id,\n        IS_ACTIVE AS active_flag,\n        ID AS Source_id,\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        NULL AS lead_opp_flag,\n        IS_CLOSED AS IS_CLOSED,\n        IS_WON AS IS_WON,\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\n          'SF'  as Source_type,\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n       source\n    )    \n\nselect * from Dim_Opportunity_stage", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nWITH source AS (\n       select *  from DBT_TEST_LIVEDATA_RK.Opportunity_stage \n    ),Dim_Opportunity_stage as(\n        SELECT\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS stage_id,\n        MASTER_LABEL AS stage_name,\n        SORT_ORDER AS stage_position,\n        NULL AS account_id,\n        IS_ACTIVE AS active_flag,\n        ID AS Source_id,\n        FORECAST_CATEGORY AS FORECAST_CATEGORY,\n        NULL AS lead_opp_flag,\n        IS_CLOSED AS IS_CLOSED,\n        IS_WON AS IS_WON,\n        DEFAULT_PROBABILITY AS OPPORTUNITY_STAGE,\n          'SF'  as Source_type,\n        'D_OPPORTUNITYSTAGES_DIM_LOAD'  AS \tDW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n     FROM\n       source\n    )    \n\nselect * from Dim_Opportunity_stage"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.523388624191284, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:51.728912Z", "completed_at": "2020-12-30T18:43:51.771606Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:51.771866Z", "completed_at": "2020-12-30T18:43:55.177799Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nselect * from(\r\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\n)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Metrics"], "unique_id": "model.sales_dataflo.Dim_Metrics", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Metrics.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Metrics.sql", "name": "Dim_Metrics", "resource_type": "model", "alias": "Dim_Metrics", "checksum": {"name": "sha256", "checksum": "8acf4ae1f131c1bf7aa6d6c6e226909264962eb02aeb842ad0450cca16ac8cc5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Metrics.sql", "deferred": false, "compiled_sql": "\n\nselect * from(\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from(\nSelect 1 METRIC_ID,'Opportunities Won Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 METRIC_ID,'Key Metrics' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Avg Case Close Time, Converted Leads, Expected revenue, New Cases, New Leads, Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count, Opportunities Won Revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 METRIC_ID,'Converted Leads' METRIC_NAME,4 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Converted\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Converted Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 METRIC_ID,'New Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Name \"\"is not empty\"\" and Lead owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 METRIC_ID,'Open Opportunity by stage' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is not equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 METRIC_ID,'Top Sales Rep' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum ' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Won Amount by Owner, Opportunities Won Count by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 METRIC_ID,'New Leads by industry' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Industry.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 METRIC_ID,'Return On Investment Amount by Campaign' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment Amount during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 9 METRIC_ID,'Return On Investment by Campaign Type' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Return On Investment during the specified Date Range split up by Campaign Type. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 10 METRIC_ID,'Opportunities Lost' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 11 METRIC_ID,'Opportunities Lost Amount by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 12 METRIC_ID,'Opportunities Lost by Owner' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\"' METRICCRITERIA,'Opportunities Lost Count during the specified Date Range split up by Owner.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 13 METRIC_ID,'Average Case Close Time' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'Average Case Close Time during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 14 METRIC_ID,'Opportunities Lost Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Lost\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Lost Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 15 METRIC_ID,'Closed Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Status \"\"is equal to Closed\"\" and case owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Number of Closed Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 16 METRIC_ID,'Opportunities Won Revenue by Product Family' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Opportunities Won Revenue during the specified Date Range split up by Product Family.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 17 METRIC_ID,'Expected Revenue' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Closed Date \"is not empty\" and Sales stage \"is not equal to Closed Won, closed Lost\"' METRICCRITERIA,'Expected Revenue during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 18 METRIC_ID,'New Leads by Lead Source' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Source \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Source.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 19 METRIC_ID,'New Leads by Lead Status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead Status \"\"is not empty\"\"' METRICCRITERIA,'Number of New Leads during the specified Date Range split up by Lead Status.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 20 METRIC_ID,'New Cases' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Case # \"\"is not empty\"\"' METRICCRITERIA,'Number of New Cases during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 21 METRIC_ID,'Opportunities Won' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Count during the specified Date Range.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 22 METRIC_ID,'Opportunities Won Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"\"is equal to Closed Won\"\" and Opportunity owner \"\"is equal to logged in employee\"\"' METRICCRITERIA,'Opportunities Won Amount during the specified Date Range split up by Opportunity Name.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 23 METRIC_ID,'Open Opportunities' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Count during the specified Date Range. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 24 METRIC_ID,'Opportunities Overview' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'' METRICCRITERIA,'This is a multi-metric Datablock with the following metrics: Opportunities Lost Count, Open Opportunities Count, Opportunities Won Count.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 25 METRIC_ID,'Open Opportunities Amount by Stage Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'Sales stage \"is not equal to Closed Won, closed Lost\" and Opportunity owner \"is equal to logged in employee\"' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Owner. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 26 METRIC_ID,'Open Opportunities Amount by Opp Name' METRIC_NAME,1 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Sum' RESULT_TYPE,'' METRICCRITERIA,'Total Open Opportunities Amount during the specified Date Range split up by Opportunity Name. Daily totals are not available for this metric. Instead, the total current value of this metric will be visualized cumulatively. No historical data is available from the initial connection.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 27 METRIC_ID,'Accounts' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Name \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by annual revenue.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 28 METRIC_ID,'Accounts by Type' METRIC_NAME,5 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Account Type \"is not empty\" and Account Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of accounts by type.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 29 METRIC_ID,'Contacts' METRIC_NAME,6 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Contact Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of all your contacts by department including name, phone, title, and more.' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 30 METRIC_ID,'Leads' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,' Name \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 31 METRIC_ID,'Leads by location' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,' Address \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of leads by location (for the last 7 days).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 32 METRIC_ID,'Opportunities by type' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Type \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get the number of opportunities by type (for this year or for the last two quarters).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 33 METRIC_ID,'Leads by status' METRIC_NAME,3 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'TRUE' SEGMENT_FLAG,'Count' RESULT_TYPE,'Lead status \"is not empty\" and Lead Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of new leads by status (for this month).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 34 METRIC_ID,'Opportunities (for this quarter)' METRIC_NAME,2 METRIC_CATEGORY_ID,'TRUE' ACTIVE_FLAG,'' SEGMENT_FLAG,'Count' RESULT_TYPE,'Opportunity Name \"is not empty\" and Opportunity Owner is equal to \"Logged in employee\"' METRICCRITERIA,'Get a list of opportunities (for this quarter).' DESCRIPTION,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.9544227123260498, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:55.254642Z", "completed_at": "2020-12-30T18:43:55.293936Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:55.294238Z", "completed_at": "2020-12-30T18:43:57.127859Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nselect *from (\r\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\nunion\r\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\r\n)", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Stage", "Static_Tables", "Dim_Metrics_Category"], "unique_id": "model.sales_dataflo.Dim_Metrics_Category", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Stage/Static_Tables/Dim_Metrics_Category.sql", "original_file_path": "ETL/Stage/Static_Tables/Dim_Metrics_Category.sql", "name": "Dim_Metrics_Category", "resource_type": "model", "alias": "Dim_Metrics_Category", "checksum": {"name": "sha256", "checksum": "8e92f059796758356059b44b5038b2ce2241057c00415699322f022db4347dc3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Stage/Static_Tables/Dim_Metrics_Category.sql", "deferred": false, "compiled_sql": "\n\nselect *from (\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect *from (\nSelect 1 metric_category_id,'Productivity' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 2 metric_category_id,'Opportunity Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 3 metric_category_id,'Lead Generation' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 4 metric_category_id,'Conversion' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 5 metric_category_id,'Account' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 6 metric_category_id,'Contact' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 7 metric_category_id,'Sub-list' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\nunion\nSelect 8 metric_category_id,'Funnel' metrics_category,'D_METRICS_DIM_LOAD' DW_SESSION_NM,CURRENT_TIMESTAMP DW_INS_UPD_DTS\n)"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.1840503215789795, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:57.213032Z", "completed_at": "2020-12-30T18:43:57.245299Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:57.245639Z", "completed_at": "2020-12-30T18:43:58.330803Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n/*\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'product_id'\r\n      )\r\n}}\r\n\r\n\r\n    WITH source AS (\r\n        SELECT * from {{ var('V_SF_Schema') }}.product\r\n    ),Dim_Product as(\r\n        SELECT\r\n            NULL AS account_id,\r\n            {{ dbt_utils.surrogate_key('id') }} AS product_id,\r\n            ID AS Source_id,\r\n            PRODUCT_CODE AS product_code,\r\n            NAME AS product_name,\r\n            IS_ACTIVE AS active_flag,\r\n            QUANTITY_UNIT_OF_MEASURE AS Quantity_UOM,\r\n             {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n            'D_PRODUCT_DIM_LOAD'  AS DW_SESSION_NM,\r\n            {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n         FROM\r\n            source \r\n     \r\n    )    \r\nselect * from Dim_Product\r\n*/", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Product"], "unique_id": "model.sales_dataflo.Dim_Product", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Product.sql", "original_file_path": "ETL/Target/Tables/Dim_Product.sql", "name": "Dim_Product", "resource_type": "model", "alias": "Dim_Product", "checksum": {"name": "sha256", "checksum": "5c176964b6ba17710df65497eafbd0e564f8b3dd0bcc8296b644215651899bd5"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "product_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Product.sql", "deferred": false, "compiled_sql": "\n/*\n\n\n\n    WITH source AS (\n        SELECT * from DBT_TEST_LIVEDATA_RK.product\n    ),Dim_Product as(\n        SELECT\n            NULL AS account_id,\n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS product_id,\n            ID AS Source_id,\n            PRODUCT_CODE AS product_code,\n            NAME AS product_name,\n            IS_ACTIVE AS active_flag,\n            QUANTITY_UNIT_OF_MEASURE AS Quantity_UOM,\n               'SF'  as Source_type,\n            'D_PRODUCT_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n         FROM\n            source \n     \n    )    \nselect * from Dim_Product\n*/", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n/*\n\n\n\n    WITH source AS (\n        SELECT * from DBT_TEST_LIVEDATA_RK.product\n    ),Dim_Product as(\n        SELECT\n            NULL AS account_id,\n            md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n)) AS product_id,\n            ID AS Source_id,\n            PRODUCT_CODE AS product_code,\n            NAME AS product_name,\n            IS_ACTIVE AS active_flag,\n            QUANTITY_UNIT_OF_MEASURE AS Quantity_UOM,\n               'SF'  as Source_type,\n            'D_PRODUCT_DIM_LOAD'  AS DW_SESSION_NM,\n            \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n         FROM\n            source \n     \n    )    \nselect * from Dim_Product\n*/"}, "error": "Database Error in model Dim_Product (ETL/Target/Tables/Dim_Product.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 39 at position 6 unexpected ')'.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Dim_Product.sql", "status": "ERROR", "execution_time": 0.8072469234466553, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nwith year_data as \r\n(\r\n    select * from {{ var('V_SF_Schema') }}.period \r\n    where type ='Year'\r\n),\r\nqutr_data as \r\n(\r\n    select * from {{ var('V_SF_Schema') }}.period \r\n    where type ='Quarter'\r\n),\r\n Dates AS \r\n(\r\n    SELECT * FROM {{ ref('Dim_Calendar') }}\r\n)   \r\n,Dim_TimeFrame as(\r\nselect\r\n    d.Calendar_ID AS TimeFrameID,\r\n    'D' as TimeFrameType,\r\n    d.Calendar_ID as calendar_id,\r\n    d.cldr_date as day_start,\r\n    d.cldr_date as day_end,\r\n    d.week_start_date as week_Start,\r\n    d.week_end_date as week_end,\r\n    'W' || d.cldr_week_num as week_num,\r\n    d.cldr_mnth_strt_dt as month_start,\r\n    d.cldr_mnth_end_dt as month_end, \r\n    d.month_name as month_name,\r\n     'Q' || s.number as qutr_number,\r\n    s.start_date as quarter_start,\r\n    s.end_date as quarter_end,\r\n    d.year as year,\r\n    y.start_date as year_start,\r\n    y.end_date as year_end,\r\n    {% if var(\"V_SF_CRM_ETL\") == 'FIVETRAN_SF' %}  'SF' {% endif %} as Source_type,\r\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\r\n    {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS     \r\nfrom\r\n    dates d\r\n    left join qutr_data s\r\n    on d.cldr_date between s.start_date and s.end_date\r\n    left join year_data y\r\n    on d.cldr_date between y.start_date and y.end_date\r\norder by 2)\r\n\r\nselect * from Dim_TimeFrame", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_TimeFrame"], "unique_id": "model.sales_dataflo.Dim_TimeFrame", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_TimeFrame.sql", "original_file_path": "ETL/Target/Tables/Dim_TimeFrame.sql", "name": "Dim_TimeFrame", "resource_type": "model", "alias": "Dim_TimeFrame", "checksum": {"name": "sha256", "checksum": "bccbd9d0fad7b827c6a3c76be1cd0669e827635b96151f881232da634764c8ea"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Calendar"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_Calendar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_TimeFrame.sql", "deferred": false, "compiled_sql": "\n\n\n\nwith year_data as \n(\n    select * from DBT_TEST_LIVEDATA_RK.period \n    where type ='Year'\n),\nqutr_data as \n(\n    select * from DBT_TEST_LIVEDATA_RK.period \n    where type ='Quarter'\n),\n Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \n,Dim_TimeFrame as(\nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    d.month_name as month_name,\n     'Q' || s.number as qutr_number,\n    s.start_date as quarter_start,\n    s.end_date as quarter_end,\n    d.year as year,\n    y.start_date as year_start,\n    y.end_date as year_end,\n      'SF'  as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n    left join qutr_data s\n    on d.cldr_date between s.start_date and s.end_date\n    left join year_data y\n    on d.cldr_date between y.start_date and y.end_date\norder by 2)\n\nselect * from Dim_TimeFrame", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nwith year_data as \n(\n    select * from DBT_TEST_LIVEDATA_RK.period \n    where type ='Year'\n),\nqutr_data as \n(\n    select * from DBT_TEST_LIVEDATA_RK.period \n    where type ='Quarter'\n),\n Dates AS \n(\n    SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Calendar\n)   \n,Dim_TimeFrame as(\nselect\n    d.Calendar_ID AS TimeFrameID,\n    'D' as TimeFrameType,\n    d.Calendar_ID as calendar_id,\n    d.cldr_date as day_start,\n    d.cldr_date as day_end,\n    d.week_start_date as week_Start,\n    d.week_end_date as week_end,\n    'W' || d.cldr_week_num as week_num,\n    d.cldr_mnth_strt_dt as month_start,\n    d.cldr_mnth_end_dt as month_end, \n    d.month_name as month_name,\n     'Q' || s.number as qutr_number,\n    s.start_date as quarter_start,\n    s.end_date as quarter_end,\n    d.year as year,\n    y.start_date as year_start,\n    y.end_date as year_end,\n      'SF'  as Source_type,\n    'D_TIMEFRAME_DIM_LOAD' AS DW_SESSION_NM,\n    \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS     \nfrom\n    dates d\n    left join qutr_data s\n    on d.cldr_date between s.start_date and s.end_date\n    left join year_data y\n    on d.cldr_date between y.start_date and y.end_date\norder by 2)\n\nselect * from Dim_TimeFrame"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.6194956302642822, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:43:59.209460Z", "completed_at": "2020-12-30T18:43:59.238177Z"}, {"name": "execute", "started_at": "2020-12-30T18:43:59.238410Z", "completed_at": "2020-12-30T18:44:00.757802Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% for i in range(10) %}\r\nwith recursive Emp_Hier as (\r\n select * from \r\n (\r\n select distinct \r\n a.entity_id,\r\n b.source_Emp_id as employee_id, \r\n b.emp_position_level, \r\n b.emp_role_id,\r\n a.mngr_emp_id\r\n a.mngr_position_level,\r\n a.mngr_role_id\r\n from \r\n {{ ref('Dim_Employee') }} a\r\n join {{ ref('Dim_Employee') }} b\r\n on a.source_Emp_id = b.mngr_emp_id\r\n ) rslt\r\n where not exists \r\n (Select 1 from {{ ref('Dim_Employee') }} e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\r\n )\r\n {% if not loop.last %} union all {% endif %}\r\n{% endfor %}\r\n\r\n select * from Emp_Hier", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Dim_Employee_Hier"], "unique_id": "model.sales_dataflo.Dim_Employee_Hier", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Dim_Employee_Hier.sql", "original_file_path": "ETL/Target/Tables/Dim_Employee_Hier.sql", "name": "Dim_Employee_Hier", "resource_type": "model", "alias": "Dim_Employee_Hier", "checksum": {"name": "sha256", "checksum": "a42dd0fe73e24af53e3252fb39ad30ca6dbdfa8dfe9fb9f7c38dd1dad85e6dff"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"], ["Dim_Employee"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Employee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Dim_Employee_Hier.sql", "deferred": false, "compiled_sql": "\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n \n\n\n select * from Emp_Hier", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n  union all \n\nwith recursive Emp_Hier as (\n select * from \n (\n select distinct \n a.entity_id,\n b.source_Emp_id as employee_id, \n b.emp_position_level, \n b.emp_role_id,\n a.mngr_emp_id\n a.mngr_position_level,\n a.mngr_role_id\n from \n DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee a\n join DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee b\n on a.source_Emp_id = b.mngr_emp_id\n ) rslt\n where not exists \n (Select 1 from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee e where rslt.employee_id = e.source_Emp_id and rslt.mngr_emp_id = e.mngr_emp_id)\n )\n \n\n\n select * from Emp_Hier"}, "error": "Database Error in model Dim_Employee_Hier (ETL/Target/Tables/Dim_Employee_Hier.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 12 at position 2 unexpected '.'.\n  syntax error line 14 at position 1 unexpected 'from'.\n  syntax error line 18 at position 3 unexpected 'rslt'.\n  syntax error line 21 at position 1 unexpected ')'.\n  compiled SQL at target/run/sales_dataflo/ETL/Target/Tables/Dim_Employee_Hier.sql", "status": "ERROR", "execution_time": 0.8538358211517334, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Employee') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Employee"], "unique_id": "model.sales_dataflo.VW_Employee", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Employee.sql", "original_file_path": "ETL/Target/Views/VW_Employee.sql", "name": "VW_Employee", "resource_type": "model", "alias": "VW_Employee", "checksum": {"name": "sha256", "checksum": "d3ce3a49096034105f23527148f02ffb69aed09f23971d3eb6ab61d7b0e82c23"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Employee"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Employee"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Employee.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.8922269344329834, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:01.689000Z", "completed_at": "2020-12-30T18:44:01.718079Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:01.718431Z", "completed_at": "2020-12-30T18:44:02.507838Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Account') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Account"], "unique_id": "model.sales_dataflo.VW_Account", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Account.sql", "original_file_path": "ETL/Target/Views/VW_Account.sql", "name": "VW_Account", "resource_type": "model", "alias": "VW_Account", "checksum": {"name": "sha256", "checksum": "70b956dd282029fc4941e66a4f34ea75840506ff718fba1f48546f17b9017c1f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Account"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Account.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7239725589752197, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:02.583591Z", "completed_at": "2020-12-30T18:44:02.609743Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:02.609978Z", "completed_at": "2020-12-30T18:44:03.230536Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Lead') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Lead"], "unique_id": "model.sales_dataflo.VW_Lead", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Lead.sql", "original_file_path": "ETL/Target/Views/VW_Lead.sql", "name": "VW_Lead", "resource_type": "model", "alias": "VW_Lead", "checksum": {"name": "sha256", "checksum": "62dcf4bff6ebf102e926c44b90ba9cbfd4404405f9c3146c53c79c18ccfa5320"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Lead.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7393519878387451, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:03.309955Z", "completed_at": "2020-12-30T18:44:03.337926Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:03.338201Z", "completed_at": "2020-12-30T18:44:03.976974Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Opportunity') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Opportunity"], "unique_id": "model.sales_dataflo.VW_Opportunity", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Opportunity.sql", "original_file_path": "ETL/Target/Views/VW_Opportunity.sql", "name": "VW_Opportunity", "resource_type": "model", "alias": "VW_Opportunity", "checksum": {"name": "sha256", "checksum": "e1b79b8223f6a0be455932747ce223658ea532919586b62d101a4010995a0221"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Opportunity.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7514970302581787, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:04.051749Z", "completed_at": "2020-12-30T18:44:04.080719Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:04.081040Z", "completed_at": "2020-12-30T18:44:04.734867Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Contact') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Contact"], "unique_id": "model.sales_dataflo.VW_Contact", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Contact.sql", "original_file_path": "ETL/Target/Views/VW_Contact.sql", "name": "VW_Contact", "resource_type": "model", "alias": "VW_Contact", "checksum": {"name": "sha256", "checksum": "1c1f291bdb70ca35558ad27cde87581411af1580e9bf14144b75de2fd8954bb3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Contact.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7929325103759766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:04.805654Z", "completed_at": "2020-12-30T18:44:04.833025Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:04.833348Z", "completed_at": "2020-12-30T18:44:05.523979Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Address') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Address"], "unique_id": "model.sales_dataflo.VW_Address", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Address.sql", "original_file_path": "ETL/Target/Views/VW_Address.sql", "name": "VW_Address", "resource_type": "model", "alias": "VW_Address", "checksum": {"name": "sha256", "checksum": "f0ebbb7edc50e98cad8153165e55fcdbbde9568c33a7923946d19c6559f0f298"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Address"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Address"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Address.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Address", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Address"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7606618404388428, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:05.601367Z", "completed_at": "2020-12-30T18:44:05.626198Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:05.626438Z", "completed_at": "2020-12-30T18:44:06.293872Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Campaign') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Campaign"], "unique_id": "model.sales_dataflo.VW_Campaign", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Campaign.sql", "original_file_path": "ETL/Target/Views/VW_Campaign.sql", "name": "VW_Campaign", "resource_type": "model", "alias": "VW_Campaign", "checksum": {"name": "sha256", "checksum": "81a5fbb2705d231938ef8396d8391175aba3f01a1d5eda7b06c8cde05dca7dd0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Campaign"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Campaign.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Campaign"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.7215449810028076, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:06.365414Z", "completed_at": "2020-12-30T18:44:06.391677Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:06.391910Z", "completed_at": "2020-12-30T18:44:07.022789Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set results = dbt_utils.get_column_values(ref('Dim_Entity'),'entity_name') %}\r\n\r\n{% if not var(\"enable_SF_source\") %}\r\n{{\r\n    config(\r\n        enabled=false\r\n    )\r\n}}\r\n{% endif %}\r\n\r\n{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key= 'Account_ID'\r\n      )\r\n}}\r\n\r\n{% for V_SF_Schema in results %}\r\n{% if not loop.first %}\r\n            UNION ALL\r\n        {% endif %}\r\n  select\r\n        {{ dbt_utils.surrogate_key('id') }}  AS Account_ID,\r\n        NAME AS Account_Name,\r\n        TYPE AS Account_Type,\r\n        ID AS Source_ID,\r\n        IS_DELETED AS Active_Flag,\r\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\r\n        INDUSTRY AS INDUSTRY,\r\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\r\n        OWNER_ID AS Employee_ID,\r\n        CREATED_DATE as INITIAL_CREATE_DT,\r\n        '{{ V_SF_Schema }}' as Source_type,\r\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\r\n        {{ dbt_utils.current_timestamp() }} AS DW_INS_UPD_DTS \r\n    FROM {{ V_SF_Schema }}.Account\r\n{% endfor %}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "test"], "unique_id": "model.sales_dataflo.test", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/test.sql", "original_file_path": "ETL/Target/Tables/test.sql", "name": "test", "resource_type": "model", "alias": "test", "checksum": {"name": "sha256", "checksum": "01a30745aa778aff6cb65d0e7f5b0092d42689931c055e49e58799487b5be693"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "Account_ID"}, "tags": [], "refs": [["Dim_Entity"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_Entity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/test.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\n\n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        'DBT_TEST_LIVEDATA_RK' as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM DBT_TEST_LIVEDATA_RK.Account\n\n\n            UNION ALL\n        \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        'SALESFORCE_FREETRAILS' as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SALESFORCE_FREETRAILS.Account\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\n\n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        'DBT_TEST_LIVEDATA_RK' as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM DBT_TEST_LIVEDATA_RK.Account\n\n\n            UNION ALL\n        \n  select\n        md5(cast(\n    \n    coalesce(cast(id as \n    varchar\n), '')\n\n as \n    varchar\n))  AS Account_ID,\n        NAME AS Account_Name,\n        TYPE AS Account_Type,\n        ID AS Source_ID,\n        IS_DELETED AS Active_Flag,\n        --ACCOUNT_NUMBER AS ACCOUNT_NUMBER,\n        INDUSTRY AS INDUSTRY,\n        ANNUAL_REVENUE AS ANNUAL_REVENUE,\n        OWNER_ID AS Employee_ID,\n        CREATED_DATE as INITIAL_CREATE_DT,\n        'SALESFORCE_FREETRAILS' as Source_type,\n        'D_ACCOUNT_DIM_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS \n    FROM SALESFORCE_FREETRAILS.Account\n"}, "error": null, "status": "SUCCESS 16248", "execution_time": 2.7257378101348877, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:07.089300Z", "completed_at": "2020-12-30T18:44:07.644925Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:07.645266Z", "completed_at": "2020-12-30T18:44:09.734691Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_Opportunity_Stage') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_Opportunity_Stage"], "unique_id": "model.sales_dataflo.VW_Opportunity_Stage", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_Opportunity_Stage.sql", "original_file_path": "ETL/Target/Views/VW_Opportunity_Stage.sql", "name": "VW_Opportunity_Stage", "resource_type": "model", "alias": "VW_Opportunity_Stage", "checksum": {"name": "sha256", "checksum": "9a5f130aa5caca211e8f5d343234cb9c22dba59a9f534ac607e850f61aec7c18"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_Opportunity_Stage"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_Opportunity_Stage"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_Opportunity_Stage.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity_Stage", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity_Stage"}, "error": null, "status": "SUCCESS 1", "execution_time": 0.8981578350067139, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:09.817720Z", "completed_at": "2020-12-30T18:44:09.846148Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:09.846414Z", "completed_at": "2020-12-30T18:44:10.644066Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n{%- for metrics in [(run_metrics_history('upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '1', '1','Dim_Opportunity')),\r\n                    (run_metrics_history('upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '10', '1','Dim_Opportunity')),\r\n                    (run_metrics_history('upper(lead_to_opp_flag) = '\"'\"'TRUE'\"'\"'', '3', '4','Dim_Lead')),\r\n                    (run_metrics_history('1 = 1', '4', '4','Dim_Lead')),\r\n                    (run_metrics_history('upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '23', '2','Dim_Opportunity')),\r\n                    (run_metrics_history('1 = 1', '27', '5','Dim_Account')),\r\n                    (run_metrics_history('1 = 1', '29', '6','Dim_Contact'))                    \r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales_History"], "unique_id": "model.sales_dataflo.Fact_Sales_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales_History.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales_History.sql", "name": "Fact_Sales_History", "resource_type": "model", "alias": "Fact_Sales_History", "checksum": {"name": "sha256", "checksum": "0252286da929db5992779d03f00b9957be6f77d28e287414cf8854ad0ed25a06"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Account"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Contact"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.run_metrics_history", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Sales_History.sql", "deferred": false, "compiled_sql": "\n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('1' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('10' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where upper(lead_to_opp_flag) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('3' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('4' as number) as METRIC_ID,\n        cast('4' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('23' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Contact  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('29' as number) as METRIC_ID,\n        cast('6' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        "}, "error": null, "status": "SUCCESS 1", "execution_time": 23.805421829223633, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:10.718390Z", "completed_at": "2020-12-30T18:44:11.738555Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:11.738852Z", "completed_at": "2020-12-30T18:44:34.432164Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n{%- for metrics in [(run_metrics_segment_history('upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '5', '2','Dim_Opportunity','STAGE_NAME')),\r\n                    (run_metrics_segment_history('1 = 1', '7', '3','Dim_Lead','INDUSTRY')),\r\n                    (run_metrics_segment_history('upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '11', '2','Dim_Opportunity','EMPLOYEE_ID')),\r\n                    (run_metrics_segment_history('upper(IS_WON) = '\"'\"'FALSE'\"'\"' and upper(IS_CLOSED) = '\"'\"'TRUE'\"'\"'', '14', '1','Dim_Opportunity','OPPORTUNITY_NAME')),\r\n                    (run_metrics_segment_history('1 = 1', '18', '3','Dim_Lead','LEAD_SOURCE')),\r\n\t\t\t\t\t(run_metrics_segment_history('1 = 1', '19', '3','Dim_Lead','STATUS')),\r\n                    (run_metrics_segment_history('upper(IS_WON) = '\"'\"'TRUE'\"'\"'', '22', '1','Dim_Opportunity','OPPORTUNITY_NAME')),\r\n\t\t\t\t\t(run_metrics_segment_history('upper(IS_CLOSED) = '\"'\"'FALSE'\"'\"'', '26', '1','Dim_Opportunity','OPPORTUNITY_NAME')),\r\n                    (run_metrics_segment_history('1 = 1', '28', '5','Dim_Account','EMPLOYEE_ID')),\r\n\t\t\t\t\t(run_metrics_segment_history('1 = 1', '30', '3','Dim_Lead','EMPLOYEE_ID')),\r\n                    (run_metrics_segment_history('1 = 1', '31', '3','Dim_Lead','LEAD_CONTACT_ADDRESS')),\r\n\t\t\t\t\t(run_metrics_segment_history('1 = 1', '32', '2','Dim_Opportunity','OPPORTUNITY_TYPE'))                    \r\n                   ]  %}\r\n        (\r\n             {{ metrics }}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n{%- endfor -%}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales_Segmented_History"], "unique_id": "model.sales_dataflo.Fact_Sales_Segmented_History", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales_Segmented_History.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales_Segmented_History.sql", "name": "Fact_Sales_Segmented_History", "resource_type": "model", "alias": "Fact_Sales_Segmented_History", "checksum": {"name": "sha256", "checksum": "38f6023aad7f5ed45a3ff415f2abd25b22cf18f0974fd60b8be5d5f9b7e7fe87"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Account"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Lead"], ["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Opportunity"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.run_metrics_segment_history", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Account", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Lead", "model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Sales_Segmented_History.sql", "deferred": false, "compiled_sql": "\n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('11' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('14' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('22' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('26' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('5' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STAGE_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('7' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(INDUSTRY as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('11' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'FALSE' and upper(IS_CLOSED) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('14' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('18' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_SOURCE as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('19' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(STATUS as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_WON) = 'TRUE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('22' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where upper(IS_CLOSED) = 'FALSE' )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('26' as number) as METRIC_ID,\n        cast('1' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_NAME as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('28' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('30' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(EMPLOYEE_ID as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Lead  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('31' as number) as METRIC_ID,\n        cast('3' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(LEAD_CONTACT_ADDRESS as varchar(1000)) As Segment_name,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        union all\n        \n        (\n             with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Opportunity  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('32' as number) as METRIC_ID,\n        cast('2' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        cast(OPPORTUNITY_TYPE as varchar(1000)) As Segment_name,\n        sum( Amount  ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_name\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID, Segment_name,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type,'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type\n        )\n\n        "}, "error": null, "status": "SUCCESS 1", "execution_time": 38.63227319717407, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:44:34.526333Z", "completed_at": "2020-12-30T18:44:35.853108Z"}, {"name": "execute", "started_at": "2020-12-30T18:44:35.853370Z", "completed_at": "2020-12-30T18:45:13.078103Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT * FROM {{ ref('Dim_TimeFrame') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Views", "VW_TimeFrame"], "unique_id": "model.sales_dataflo.VW_TimeFrame", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Views/VW_TimeFrame.sql", "original_file_path": "ETL/Target/Views/VW_TimeFrame.sql", "name": "VW_TimeFrame", "resource_type": "model", "alias": "VW_TimeFrame", "checksum": {"name": "sha256", "checksum": "05c9ee70e7f7f4407cce06073f0f9ce1aa51daaa8f90ab2f1aaf4cbab5aa3359"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_TimeFrame"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Views/VW_TimeFrame.sql", "deferred": false, "compiled_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT * FROM DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.0244770050048828, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:45:13.162350Z", "completed_at": "2020-12-30T18:45:13.204196Z"}, {"name": "execute", "started_at": "2020-12-30T18:45:13.204570Z", "completed_at": "2020-12-30T18:45:14.116757Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{(run_metrics_history('1 = 1', '27', '5','Dim_Account'))}}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "test_metrics"], "unique_id": "model.sales_dataflo.test_metrics", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/test_metrics.sql", "original_file_path": "ETL/Target/Tables/test_metrics.sql", "name": "test_metrics", "resource_type": "model", "alias": "test_metrics", "checksum": {"name": "sha256", "checksum": "b55fa4fee2bd79be5a4197923d9f59880e64fea2710440f2434fe6c16bd4da1f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"], ["Dim_Employee"], ["Dim_Account"]], "sources": [], "depends_on": {"macros": ["macro.sales_dataflo.run_metrics_history", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Dim_Employee", "model.sales_dataflo.Dim_Account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/test_metrics.sql", "deferred": false, "compiled_sql": "with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ), \nEmp AS\n( SELECT source_Emp_id as Emp_id, Entity_id as Emp_Entity_id , TimeFrameID join_Date FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Employee  \ncross join timeframe\n),\n\n Source AS\n   ( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_Account  Where 1 = 1 )\n \n,Metrics_Calc AS(\n    SELECT\n        TimeFrameID AS Report_Dt,\n        Emp_Entity_id  AS entity_code,\n        Emp_id AS employee_code,\n        cast('27' as number) as METRIC_ID,\n        cast('5' as number)  AS METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum( 0   ) as AMOUNT,\n        count(INITIAL_CREATE_DT)  as Count\n     from Emp \n          join timeframe \n          on join_Date = TimeFrameID\n          left join Source \n          on Emp.Emp_id = source.employee_id\n          and cast( INITIAL_CREATE_DT as date) between timeframe.Day_START and timeframe.Day_END \n          join date_range\n          on TimeFrameID = date_range.date_day\n         group by\n        Report_Dt,\n        entity_code,\n        employee_code,\n        METRIC_ID,\n        METRIC_CATEGORY_ID\n        )\n SELECT Report_Dt, entity_code, employee_code,METRIC_ID,METRIC_CATEGORY_ID,nvl(amount,0) as Amount, count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average , 'D' TimeFrame_Type, 'D_SALES_FACT_LOAD' AS DW_SESSION_NM,\n        \n    current_timestamp::\n    timestamp_ntz\n\n AS DW_INS_UPD_DTS from Metrics_Calc\n      order by Report_Dt, METRIC_ID, TimeFrame_Type"}, "error": null, "status": "SUCCESS 1", "execution_time": 1.0503787994384766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:45:14.190852Z", "completed_at": "2020-12-30T18:45:14.626881Z"}, {"name": "execute", "started_at": "2020-12-30T18:45:14.627172Z", "completed_at": "2020-12-30T18:45:15.176815Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nwith date_range as \r\n(\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2017', 'dd/mm/yyyy')\",\r\n        end_date=\"to_date('31/12/2018', 'dd/mm/yyyy')\"\r\n       )\r\n    }}\r\n),\r\n timeframe as (\r\n  select * from {{ ref('Dim_TimeFrame') }} \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  ),  \r\nSource AS\r\n( SELECT * FROM  {{ ref('Fact_Sales_History') }}\r\n),\r\nMetrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        'D' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day\r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        'W' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        'M' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        'Q' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        'Y' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS                        \r\n )\r\n \r\nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, TimeFrame_Type, AMOUNT, Count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS from Metrics_Calc\r\norder by Report_Date, METRIC_ID, TimeFrame_Type", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales"], "unique_id": "model.sales_dataflo.Fact_Sales", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales.sql", "name": "Fact_Sales", "resource_type": "model", "alias": "Fact_Sales", "checksum": {"name": "sha256", "checksum": "4e63b56c8546eb682d87c852dc23e0e1111cd90dd4c814c9916f3e9915f255dd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"], ["Fact_Sales_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Fact_Sales_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Sales.sql", "deferred": false, "compiled_sql": "\n\nwith date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ),  \nSource AS\n( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Fact_Sales_History\n),\nMetrics_Calc AS(\n    SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\n        join date_range\n        on TimeFrameID = date_range.date_day\n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS                        \n )\n \nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, TimeFrame_Type, AMOUNT, Count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS from Metrics_Calc\norder by Report_Date, METRIC_ID, TimeFrame_Type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ),  \nSource AS\n( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Fact_Sales_History\n),\nMetrics_Calc AS(\n    SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'D' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\n        join date_range\n        on TimeFrameID = date_range.date_day\n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'W' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'M' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'Q' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        'Y' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS                        \n )\n \nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, TimeFrame_Type, AMOUNT, Count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS from Metrics_Calc\norder by Report_Date, METRIC_ID, TimeFrame_Type"}, "error": null, "status": "SUCCESS 1", "execution_time": 196.34422516822815, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:45:15.243467Z", "completed_at": "2020-12-30T18:45:15.818260Z"}, {"name": "execute", "started_at": "2020-12-30T18:45:15.818665Z", "completed_at": "2020-12-30T18:48:31.513205Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(\r\n    materialized=\"table\"\r\n) \r\n}}\r\n\r\nwith date_range as \r\n(\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2017', 'dd/mm/yyyy')\",\r\n        end_date=\"to_date('31/12/2018', 'dd/mm/yyyy')\"\r\n       )\r\n    }}\r\n),\r\n timeframe as (\r\n  select * from {{ ref('Dim_TimeFrame') }} \r\n  join date_range \r\n  on TimeFrameID = date_range.date_day\r\n  ),  \r\nSource AS\r\n( SELECT * FROM  {{ ref('Fact_Sales_Segmented_History') }}\r\n),\r\nMetrics_Calc AS(\r\n    SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        'D' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day\r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        'W' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        'M' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        'Q' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n     Union\r\n        SELECT\r\n        TimeFrameID as Report_Date,\r\n        entity_code  AS entity_id,\r\n        employee_code AS employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        'Y' as TimeFrame_Type,\r\n        sum(AMOUNT) as AMOUNT,\r\n        sum(count) as COUNT,  \r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS\r\n    from Source \r\n        join timeframe \r\n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\r\n        and Report_Dt <= TimeFrameID\r\n        join date_range\r\n        on TimeFrameID = date_range.date_day        \r\n    group by\r\n        Report_Date,\r\n        entity_id,\r\n        employee_id,\r\n        METRIC_ID,\r\n        METRIC_CATEGORY_ID,\r\n        Segment_Name,\r\n        TimeFrame_Type,\r\n        Source.DW_SESSION_NM,\r\n        Source.DW_INS_UPD_DTS                        \r\n )\r\n \r\nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, Segment_Name,TimeFrame_Type, AMOUNT, Count, \r\n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS  from Metrics_Calc\r\norder by Report_Date, METRIC_ID,Segment_Name, TimeFrame_Type", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_salesdataflo", "fqn": ["sales_dataflo", "Target", "Tables", "Fact_Sales_Segmented"], "unique_id": "model.sales_dataflo.Fact_Sales_Segmented", "package_name": "sales_dataflo", "root_path": "/usr/src/develop/user-10139/environment-14955/repository-12142", "path": "Target/Tables/Fact_Sales_Segmented.sql", "original_file_path": "ETL/Target/Tables/Fact_Sales_Segmented.sql", "name": "Fact_Sales_Segmented", "resource_type": "model", "alias": "Fact_Sales_Segmented", "checksum": {"name": "sha256", "checksum": "ef80bd5480622cb53237a72a71c172362aa04c980679783ff72404f1894a07a3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["Dim_TimeFrame"], ["Fact_Sales_Segmented_History"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.sales_dataflo.Dim_TimeFrame", "model.sales_dataflo.Fact_Sales_Segmented_History"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/sales_dataflo/ETL/Target/Tables/Fact_Sales_Segmented.sql", "deferred": false, "compiled_sql": "\n\nwith date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ),  \nSource AS\n( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Fact_Sales_Segmented_History\n),\nMetrics_Calc AS(\n    SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'D' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\n        join date_range\n        on TimeFrameID = date_range.date_day\n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'W' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'M' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'Q' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'Y' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS                        \n )\n \nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, Segment_Name,TimeFrame_Type, AMOUNT, Count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS  from Metrics_Calc\norder by Report_Date, METRIC_ID,Segment_Name, TimeFrame_Type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith date_range as \n(\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 729\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n  \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2017', 'dd/mm/yyyy')\n        )\n\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= to_date('31/12/2018', 'dd/mm/yyyy')\n\n)\n\nselect * from filtered\n\n\n),\n timeframe as (\n  select * from DATAFLOTEST_DATABASE.dbt_salesdataflo.Dim_TimeFrame \n  join date_range \n  on TimeFrameID = date_range.date_day\n  ),  \nSource AS\n( SELECT * FROM  DATAFLOTEST_DATABASE.dbt_salesdataflo.Fact_Sales_Segmented_History\n),\nMetrics_Calc AS(\n    SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'D' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.DAY_START and timeframe.DAY_END\n        join date_range\n        on TimeFrameID = date_range.date_day\n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'W' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.WEEK_START and timeframe.WEEK_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'M' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.MONTH_START and timeframe.MONTH_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'Q' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.QUARTER_START and timeframe.QUARTER_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n     Union\n        SELECT\n        TimeFrameID as Report_Date,\n        entity_code  AS entity_id,\n        employee_code AS employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        'Y' as TimeFrame_Type,\n        sum(AMOUNT) as AMOUNT,\n        sum(count) as COUNT,  \n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS\n    from Source \n        join timeframe \n        on Report_Dt between timeframe.YEAR_START and timeframe.YEAR_END\n        and Report_Dt <= TimeFrameID\n        join date_range\n        on TimeFrameID = date_range.date_day        \n    group by\n        Report_Date,\n        entity_id,\n        employee_id,\n        METRIC_ID,\n        METRIC_CATEGORY_ID,\n        Segment_Name,\n        TimeFrame_Type,\n        Source.DW_SESSION_NM,\n        Source.DW_INS_UPD_DTS                        \n )\n \nSELECT Report_Date, entity_id, employee_id, METRIC_ID, METRIC_CATEGORY_ID, Segment_Name,TimeFrame_Type, AMOUNT, Count, \n        nvl(AMOUNT/decode(count,0,1,count),0) as Average,  DW_SESSION_NM, DW_INS_UPD_DTS  from Metrics_Calc\norder by Report_Date, METRIC_ID,Segment_Name, TimeFrame_Type"}, "error": null, "status": "SUCCESS 1", "execution_time": 471.8677840232849, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-30T18:48:31.591658Z", "completed_at": "2020-12-30T18:48:32.287083Z"}, {"name": "execute", "started_at": "2020-12-30T18:48:32.287390Z", "completed_at": "2020-12-30T18:56:23.388470Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-12-30T18:56:24.324914Z", "elapsed_time": 788.4061677455902}